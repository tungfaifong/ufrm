// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_common_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_common_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_common_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_common_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_common_2eproto;
class Variant;
struct VariantDefaultTypeInternal;
extern VariantDefaultTypeInternal _Variant_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Variant* Arena::CreateMaybeMessage<::Variant>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum NODETYPE : int {
  GATEWAY = 0,
  LBSRV = 1,
  GAMESRV = 2,
  PROXY = 3,
  DBSRV = 4,
  IOSRV = 5,
  NODETYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  NODETYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool NODETYPE_IsValid(int value);
constexpr NODETYPE NODETYPE_MIN = GATEWAY;
constexpr NODETYPE NODETYPE_MAX = IOSRV;
constexpr int NODETYPE_ARRAYSIZE = NODETYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NODETYPE_descriptor();
template<typename T>
inline const std::string& NODETYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NODETYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NODETYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NODETYPE_descriptor(), enum_t_value);
}
inline bool NODETYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NODETYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NODETYPE>(
    NODETYPE_descriptor(), name, value);
}
// ===================================================================

class Variant final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Variant) */ {
 public:
  inline Variant() : Variant(nullptr) {}
  ~Variant() override;
  explicit constexpr Variant(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Variant(const Variant& from);
  Variant(Variant&& from) noexcept
    : Variant() {
    *this = ::std::move(from);
  }

  inline Variant& operator=(const Variant& from) {
    CopyFrom(from);
    return *this;
  }
  inline Variant& operator=(Variant&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Variant& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kBool = 1,
    kInt32 = 2,
    kUint32 = 3,
    kInt64 = 4,
    kUint64 = 5,
    kFloat = 6,
    kDouble = 7,
    kString = 8,
    VALUE_NOT_SET = 0,
  };

  static inline const Variant* internal_default_instance() {
    return reinterpret_cast<const Variant*>(
               &_Variant_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Variant& a, Variant& b) {
    a.Swap(&b);
  }
  inline void Swap(Variant* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Variant* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Variant* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Variant>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Variant& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Variant& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Variant* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Variant";
  }
  protected:
  explicit Variant(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBoolFieldNumber = 1,
    kInt32FieldNumber = 2,
    kUint32FieldNumber = 3,
    kInt64FieldNumber = 4,
    kUint64FieldNumber = 5,
    kFloatFieldNumber = 6,
    kDoubleFieldNumber = 7,
    kStringFieldNumber = 8,
  };
  // bool bool_ = 1;
  bool has_bool_() const;
  private:
  bool _internal_has_bool_() const;
  public:
  void clear_bool_();
  bool bool_() const;
  void set_bool_(bool value);
  private:
  bool _internal_bool_() const;
  void _internal_set_bool_(bool value);
  public:

  // int32 int32_ = 2;
  bool has_int32_() const;
  private:
  bool _internal_has_int32_() const;
  public:
  void clear_int32_();
  int32_t int32_() const;
  void set_int32_(int32_t value);
  private:
  int32_t _internal_int32_() const;
  void _internal_set_int32_(int32_t value);
  public:

  // uint32 uint32_ = 3;
  bool has_uint32_() const;
  private:
  bool _internal_has_uint32_() const;
  public:
  void clear_uint32_();
  uint32_t uint32_() const;
  void set_uint32_(uint32_t value);
  private:
  uint32_t _internal_uint32_() const;
  void _internal_set_uint32_(uint32_t value);
  public:

  // int64 int64_ = 4;
  bool has_int64_() const;
  private:
  bool _internal_has_int64_() const;
  public:
  void clear_int64_();
  int64_t int64_() const;
  void set_int64_(int64_t value);
  private:
  int64_t _internal_int64_() const;
  void _internal_set_int64_(int64_t value);
  public:

  // uint64 uint64_ = 5;
  bool has_uint64_() const;
  private:
  bool _internal_has_uint64_() const;
  public:
  void clear_uint64_();
  uint64_t uint64_() const;
  void set_uint64_(uint64_t value);
  private:
  uint64_t _internal_uint64_() const;
  void _internal_set_uint64_(uint64_t value);
  public:

  // float float_ = 6;
  bool has_float_() const;
  private:
  bool _internal_has_float_() const;
  public:
  void clear_float_();
  float float_() const;
  void set_float_(float value);
  private:
  float _internal_float_() const;
  void _internal_set_float_(float value);
  public:

  // double double_ = 7;
  bool has_double_() const;
  private:
  bool _internal_has_double_() const;
  public:
  void clear_double_();
  double double_() const;
  void set_double_(double value);
  private:
  double _internal_double_() const;
  void _internal_set_double_(double value);
  public:

  // string string_ = 8;
  bool has_string_() const;
  private:
  bool _internal_has_string_() const;
  public:
  void clear_string_();
  const std::string& string_() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_string_(ArgT0&& arg0, ArgT... args);
  std::string* mutable_string_();
  PROTOBUF_NODISCARD std::string* release_string_();
  void set_allocated_string_(std::string* string_);
  private:
  const std::string& _internal_string_() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string_(const std::string& value);
  std::string* _internal_mutable_string_();
  public:

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:Variant)
 private:
  class _Internal;
  void set_has_bool_();
  void set_has_int32_();
  void set_has_uint32_();
  void set_has_int64_();
  void set_has_uint64_();
  void set_has_float_();
  void set_has_double_();
  void set_has_string_();

  inline bool has_value() const;
  inline void clear_has_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ValueUnion {
    constexpr ValueUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    bool bool__;
    int32_t int32__;
    uint32_t uint32__;
    int64_t int64__;
    uint64_t uint64__;
    float float__;
    double double__;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string__;
  } value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_common_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Variant

// bool bool_ = 1;
inline bool Variant::_internal_has_bool_() const {
  return value_case() == kBool;
}
inline bool Variant::has_bool_() const {
  return _internal_has_bool_();
}
inline void Variant::set_has_bool_() {
  _oneof_case_[0] = kBool;
}
inline void Variant::clear_bool_() {
  if (_internal_has_bool_()) {
    value_.bool__ = false;
    clear_has_value();
  }
}
inline bool Variant::_internal_bool_() const {
  if (_internal_has_bool_()) {
    return value_.bool__;
  }
  return false;
}
inline void Variant::_internal_set_bool_(bool value) {
  if (!_internal_has_bool_()) {
    clear_value();
    set_has_bool_();
  }
  value_.bool__ = value;
}
inline bool Variant::bool_() const {
  // @@protoc_insertion_point(field_get:Variant.bool_)
  return _internal_bool_();
}
inline void Variant::set_bool_(bool value) {
  _internal_set_bool_(value);
  // @@protoc_insertion_point(field_set:Variant.bool_)
}

// int32 int32_ = 2;
inline bool Variant::_internal_has_int32_() const {
  return value_case() == kInt32;
}
inline bool Variant::has_int32_() const {
  return _internal_has_int32_();
}
inline void Variant::set_has_int32_() {
  _oneof_case_[0] = kInt32;
}
inline void Variant::clear_int32_() {
  if (_internal_has_int32_()) {
    value_.int32__ = 0;
    clear_has_value();
  }
}
inline int32_t Variant::_internal_int32_() const {
  if (_internal_has_int32_()) {
    return value_.int32__;
  }
  return 0;
}
inline void Variant::_internal_set_int32_(int32_t value) {
  if (!_internal_has_int32_()) {
    clear_value();
    set_has_int32_();
  }
  value_.int32__ = value;
}
inline int32_t Variant::int32_() const {
  // @@protoc_insertion_point(field_get:Variant.int32_)
  return _internal_int32_();
}
inline void Variant::set_int32_(int32_t value) {
  _internal_set_int32_(value);
  // @@protoc_insertion_point(field_set:Variant.int32_)
}

// uint32 uint32_ = 3;
inline bool Variant::_internal_has_uint32_() const {
  return value_case() == kUint32;
}
inline bool Variant::has_uint32_() const {
  return _internal_has_uint32_();
}
inline void Variant::set_has_uint32_() {
  _oneof_case_[0] = kUint32;
}
inline void Variant::clear_uint32_() {
  if (_internal_has_uint32_()) {
    value_.uint32__ = 0u;
    clear_has_value();
  }
}
inline uint32_t Variant::_internal_uint32_() const {
  if (_internal_has_uint32_()) {
    return value_.uint32__;
  }
  return 0u;
}
inline void Variant::_internal_set_uint32_(uint32_t value) {
  if (!_internal_has_uint32_()) {
    clear_value();
    set_has_uint32_();
  }
  value_.uint32__ = value;
}
inline uint32_t Variant::uint32_() const {
  // @@protoc_insertion_point(field_get:Variant.uint32_)
  return _internal_uint32_();
}
inline void Variant::set_uint32_(uint32_t value) {
  _internal_set_uint32_(value);
  // @@protoc_insertion_point(field_set:Variant.uint32_)
}

// int64 int64_ = 4;
inline bool Variant::_internal_has_int64_() const {
  return value_case() == kInt64;
}
inline bool Variant::has_int64_() const {
  return _internal_has_int64_();
}
inline void Variant::set_has_int64_() {
  _oneof_case_[0] = kInt64;
}
inline void Variant::clear_int64_() {
  if (_internal_has_int64_()) {
    value_.int64__ = int64_t{0};
    clear_has_value();
  }
}
inline int64_t Variant::_internal_int64_() const {
  if (_internal_has_int64_()) {
    return value_.int64__;
  }
  return int64_t{0};
}
inline void Variant::_internal_set_int64_(int64_t value) {
  if (!_internal_has_int64_()) {
    clear_value();
    set_has_int64_();
  }
  value_.int64__ = value;
}
inline int64_t Variant::int64_() const {
  // @@protoc_insertion_point(field_get:Variant.int64_)
  return _internal_int64_();
}
inline void Variant::set_int64_(int64_t value) {
  _internal_set_int64_(value);
  // @@protoc_insertion_point(field_set:Variant.int64_)
}

// uint64 uint64_ = 5;
inline bool Variant::_internal_has_uint64_() const {
  return value_case() == kUint64;
}
inline bool Variant::has_uint64_() const {
  return _internal_has_uint64_();
}
inline void Variant::set_has_uint64_() {
  _oneof_case_[0] = kUint64;
}
inline void Variant::clear_uint64_() {
  if (_internal_has_uint64_()) {
    value_.uint64__ = uint64_t{0u};
    clear_has_value();
  }
}
inline uint64_t Variant::_internal_uint64_() const {
  if (_internal_has_uint64_()) {
    return value_.uint64__;
  }
  return uint64_t{0u};
}
inline void Variant::_internal_set_uint64_(uint64_t value) {
  if (!_internal_has_uint64_()) {
    clear_value();
    set_has_uint64_();
  }
  value_.uint64__ = value;
}
inline uint64_t Variant::uint64_() const {
  // @@protoc_insertion_point(field_get:Variant.uint64_)
  return _internal_uint64_();
}
inline void Variant::set_uint64_(uint64_t value) {
  _internal_set_uint64_(value);
  // @@protoc_insertion_point(field_set:Variant.uint64_)
}

// float float_ = 6;
inline bool Variant::_internal_has_float_() const {
  return value_case() == kFloat;
}
inline bool Variant::has_float_() const {
  return _internal_has_float_();
}
inline void Variant::set_has_float_() {
  _oneof_case_[0] = kFloat;
}
inline void Variant::clear_float_() {
  if (_internal_has_float_()) {
    value_.float__ = 0;
    clear_has_value();
  }
}
inline float Variant::_internal_float_() const {
  if (_internal_has_float_()) {
    return value_.float__;
  }
  return 0;
}
inline void Variant::_internal_set_float_(float value) {
  if (!_internal_has_float_()) {
    clear_value();
    set_has_float_();
  }
  value_.float__ = value;
}
inline float Variant::float_() const {
  // @@protoc_insertion_point(field_get:Variant.float_)
  return _internal_float_();
}
inline void Variant::set_float_(float value) {
  _internal_set_float_(value);
  // @@protoc_insertion_point(field_set:Variant.float_)
}

// double double_ = 7;
inline bool Variant::_internal_has_double_() const {
  return value_case() == kDouble;
}
inline bool Variant::has_double_() const {
  return _internal_has_double_();
}
inline void Variant::set_has_double_() {
  _oneof_case_[0] = kDouble;
}
inline void Variant::clear_double_() {
  if (_internal_has_double_()) {
    value_.double__ = 0;
    clear_has_value();
  }
}
inline double Variant::_internal_double_() const {
  if (_internal_has_double_()) {
    return value_.double__;
  }
  return 0;
}
inline void Variant::_internal_set_double_(double value) {
  if (!_internal_has_double_()) {
    clear_value();
    set_has_double_();
  }
  value_.double__ = value;
}
inline double Variant::double_() const {
  // @@protoc_insertion_point(field_get:Variant.double_)
  return _internal_double_();
}
inline void Variant::set_double_(double value) {
  _internal_set_double_(value);
  // @@protoc_insertion_point(field_set:Variant.double_)
}

// string string_ = 8;
inline bool Variant::_internal_has_string_() const {
  return value_case() == kString;
}
inline bool Variant::has_string_() const {
  return _internal_has_string_();
}
inline void Variant::set_has_string_() {
  _oneof_case_[0] = kString;
}
inline void Variant::clear_string_() {
  if (_internal_has_string_()) {
    value_.string__.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_value();
  }
}
inline const std::string& Variant::string_() const {
  // @@protoc_insertion_point(field_get:Variant.string_)
  return _internal_string_();
}
template <typename ArgT0, typename... ArgT>
inline void Variant::set_string_(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_string_()) {
    clear_value();
    set_has_string_();
    value_.string__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.string__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Variant.string_)
}
inline std::string* Variant::mutable_string_() {
  std::string* _s = _internal_mutable_string_();
  // @@protoc_insertion_point(field_mutable:Variant.string_)
  return _s;
}
inline const std::string& Variant::_internal_string_() const {
  if (_internal_has_string_()) {
    return value_.string__.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Variant::_internal_set_string_(const std::string& value) {
  if (!_internal_has_string_()) {
    clear_value();
    set_has_string_();
    value_.string__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.string__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Variant::_internal_mutable_string_() {
  if (!_internal_has_string_()) {
    clear_value();
    set_has_string_();
    value_.string__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return value_.string__.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Variant::release_string_() {
  // @@protoc_insertion_point(field_release:Variant.string_)
  if (_internal_has_string_()) {
    clear_has_value();
    return value_.string__.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void Variant::set_allocated_string_(std::string* string_) {
  if (has_value()) {
    clear_value();
  }
  if (string_ != nullptr) {
    set_has_string_();
    value_.string__.UnsafeSetDefault(string_);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(string_);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:Variant.string_)
}

inline bool Variant::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void Variant::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline Variant::ValueCase Variant::value_case() const {
  return Variant::ValueCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::NODETYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NODETYPE>() {
  return ::NODETYPE_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_common_2eproto
