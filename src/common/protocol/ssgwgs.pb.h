// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ssgwgs.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ssgwgs_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ssgwgs_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "cs.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ssgwgs_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ssgwgs_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ssgwgs_2eproto;
class SSGSGWHertBeatRsp;
struct SSGSGWHertBeatRspDefaultTypeInternal;
extern SSGSGWHertBeatRspDefaultTypeInternal _SSGSGWHertBeatRsp_default_instance_;
class SSGWGSForwardCSPkg;
struct SSGWGSForwardCSPkgDefaultTypeInternal;
extern SSGWGSForwardCSPkgDefaultTypeInternal _SSGWGSForwardCSPkg_default_instance_;
class SSGWGSHertBeatReq;
struct SSGWGSHertBeatReqDefaultTypeInternal;
extern SSGWGSHertBeatReqDefaultTypeInternal _SSGWGSHertBeatReq_default_instance_;
class SSGWGSInit;
struct SSGWGSInitDefaultTypeInternal;
extern SSGWGSInitDefaultTypeInternal _SSGWGSInit_default_instance_;
class SSGWGSPkgBody;
struct SSGWGSPkgBodyDefaultTypeInternal;
extern SSGWGSPkgBodyDefaultTypeInternal _SSGWGSPkgBody_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::SSGSGWHertBeatRsp* Arena::CreateMaybeMessage<::SSGSGWHertBeatRsp>(Arena*);
template<> ::SSGWGSForwardCSPkg* Arena::CreateMaybeMessage<::SSGWGSForwardCSPkg>(Arena*);
template<> ::SSGWGSHertBeatReq* Arena::CreateMaybeMessage<::SSGWGSHertBeatReq>(Arena*);
template<> ::SSGWGSInit* Arena::CreateMaybeMessage<::SSGWGSInit>(Arena*);
template<> ::SSGWGSPkgBody* Arena::CreateMaybeMessage<::SSGWGSPkgBody>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class SSGWGSInit final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:SSGWGSInit) */ {
 public:
  inline SSGWGSInit() : SSGWGSInit(nullptr) {}
  explicit constexpr SSGWGSInit(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SSGWGSInit(const SSGWGSInit& from);
  SSGWGSInit(SSGWGSInit&& from) noexcept
    : SSGWGSInit() {
    *this = ::std::move(from);
  }

  inline SSGWGSInit& operator=(const SSGWGSInit& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSGWGSInit& operator=(SSGWGSInit&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SSGWGSInit& default_instance() {
    return *internal_default_instance();
  }
  static inline const SSGWGSInit* internal_default_instance() {
    return reinterpret_cast<const SSGWGSInit*>(
               &_SSGWGSInit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SSGWGSInit& a, SSGWGSInit& b) {
    a.Swap(&b);
  }
  inline void Swap(SSGWGSInit* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SSGWGSInit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SSGWGSInit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SSGWGSInit>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SSGWGSInit& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SSGWGSInit& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SSGWGSInit";
  }
  protected:
  explicit SSGWGSInit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:SSGWGSInit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ssgwgs_2eproto;
};
// -------------------------------------------------------------------

class SSGWGSHertBeatReq final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:SSGWGSHertBeatReq) */ {
 public:
  inline SSGWGSHertBeatReq() : SSGWGSHertBeatReq(nullptr) {}
  explicit constexpr SSGWGSHertBeatReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SSGWGSHertBeatReq(const SSGWGSHertBeatReq& from);
  SSGWGSHertBeatReq(SSGWGSHertBeatReq&& from) noexcept
    : SSGWGSHertBeatReq() {
    *this = ::std::move(from);
  }

  inline SSGWGSHertBeatReq& operator=(const SSGWGSHertBeatReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSGWGSHertBeatReq& operator=(SSGWGSHertBeatReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SSGWGSHertBeatReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const SSGWGSHertBeatReq* internal_default_instance() {
    return reinterpret_cast<const SSGWGSHertBeatReq*>(
               &_SSGWGSHertBeatReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SSGWGSHertBeatReq& a, SSGWGSHertBeatReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SSGWGSHertBeatReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SSGWGSHertBeatReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SSGWGSHertBeatReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SSGWGSHertBeatReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SSGWGSHertBeatReq& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SSGWGSHertBeatReq& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SSGWGSHertBeatReq";
  }
  protected:
  explicit SSGWGSHertBeatReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:SSGWGSHertBeatReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ssgwgs_2eproto;
};
// -------------------------------------------------------------------

class SSGSGWHertBeatRsp final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:SSGSGWHertBeatRsp) */ {
 public:
  inline SSGSGWHertBeatRsp() : SSGSGWHertBeatRsp(nullptr) {}
  explicit constexpr SSGSGWHertBeatRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SSGSGWHertBeatRsp(const SSGSGWHertBeatRsp& from);
  SSGSGWHertBeatRsp(SSGSGWHertBeatRsp&& from) noexcept
    : SSGSGWHertBeatRsp() {
    *this = ::std::move(from);
  }

  inline SSGSGWHertBeatRsp& operator=(const SSGSGWHertBeatRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSGSGWHertBeatRsp& operator=(SSGSGWHertBeatRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SSGSGWHertBeatRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const SSGSGWHertBeatRsp* internal_default_instance() {
    return reinterpret_cast<const SSGSGWHertBeatRsp*>(
               &_SSGSGWHertBeatRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SSGSGWHertBeatRsp& a, SSGSGWHertBeatRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(SSGSGWHertBeatRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SSGSGWHertBeatRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SSGSGWHertBeatRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SSGSGWHertBeatRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SSGSGWHertBeatRsp& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SSGSGWHertBeatRsp& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SSGSGWHertBeatRsp";
  }
  protected:
  explicit SSGSGWHertBeatRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:SSGSGWHertBeatRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ssgwgs_2eproto;
};
// -------------------------------------------------------------------

class SSGWGSForwardCSPkg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SSGWGSForwardCSPkg) */ {
 public:
  inline SSGWGSForwardCSPkg() : SSGWGSForwardCSPkg(nullptr) {}
  ~SSGWGSForwardCSPkg() override;
  explicit constexpr SSGWGSForwardCSPkg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SSGWGSForwardCSPkg(const SSGWGSForwardCSPkg& from);
  SSGWGSForwardCSPkg(SSGWGSForwardCSPkg&& from) noexcept
    : SSGWGSForwardCSPkg() {
    *this = ::std::move(from);
  }

  inline SSGWGSForwardCSPkg& operator=(const SSGWGSForwardCSPkg& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSGWGSForwardCSPkg& operator=(SSGWGSForwardCSPkg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SSGWGSForwardCSPkg& default_instance() {
    return *internal_default_instance();
  }
  static inline const SSGWGSForwardCSPkg* internal_default_instance() {
    return reinterpret_cast<const SSGWGSForwardCSPkg*>(
               &_SSGWGSForwardCSPkg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SSGWGSForwardCSPkg& a, SSGWGSForwardCSPkg& b) {
    a.Swap(&b);
  }
  inline void Swap(SSGWGSForwardCSPkg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SSGWGSForwardCSPkg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SSGWGSForwardCSPkg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SSGWGSForwardCSPkg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SSGWGSForwardCSPkg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SSGWGSForwardCSPkg& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSGWGSForwardCSPkg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SSGWGSForwardCSPkg";
  }
  protected:
  explicit SSGWGSForwardCSPkg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCsPkgFieldNumber = 3,
    kRoleIdFieldNumber = 1,
    kGameIdFieldNumber = 2,
  };
  // .CSPkg cs_pkg = 3;
  bool has_cs_pkg() const;
  private:
  bool _internal_has_cs_pkg() const;
  public:
  void clear_cs_pkg();
  const ::CSPkg& cs_pkg() const;
  PROTOBUF_NODISCARD ::CSPkg* release_cs_pkg();
  ::CSPkg* mutable_cs_pkg();
  void set_allocated_cs_pkg(::CSPkg* cs_pkg);
  private:
  const ::CSPkg& _internal_cs_pkg() const;
  ::CSPkg* _internal_mutable_cs_pkg();
  public:
  void unsafe_arena_set_allocated_cs_pkg(
      ::CSPkg* cs_pkg);
  ::CSPkg* unsafe_arena_release_cs_pkg();

  // uint32 role_id = 1;
  void clear_role_id();
  uint32_t role_id() const;
  void set_role_id(uint32_t value);
  private:
  uint32_t _internal_role_id() const;
  void _internal_set_role_id(uint32_t value);
  public:

  // uint32 game_id = 2;
  void clear_game_id();
  uint32_t game_id() const;
  void set_game_id(uint32_t value);
  private:
  uint32_t _internal_game_id() const;
  void _internal_set_game_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:SSGWGSForwardCSPkg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::CSPkg* cs_pkg_;
  uint32_t role_id_;
  uint32_t game_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ssgwgs_2eproto;
};
// -------------------------------------------------------------------

class SSGWGSPkgBody final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SSGWGSPkgBody) */ {
 public:
  inline SSGWGSPkgBody() : SSGWGSPkgBody(nullptr) {}
  ~SSGWGSPkgBody() override;
  explicit constexpr SSGWGSPkgBody(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SSGWGSPkgBody(const SSGWGSPkgBody& from);
  SSGWGSPkgBody(SSGWGSPkgBody&& from) noexcept
    : SSGWGSPkgBody() {
    *this = ::std::move(from);
  }

  inline SSGWGSPkgBody& operator=(const SSGWGSPkgBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSGWGSPkgBody& operator=(SSGWGSPkgBody&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SSGWGSPkgBody& default_instance() {
    return *internal_default_instance();
  }
  enum BodyCase {
    kInit = 1,
    kHeartBeatReq = 2,
    kHeartBeatRsp = 3,
    kForwardCsPkg = 4,
    BODY_NOT_SET = 0,
  };

  static inline const SSGWGSPkgBody* internal_default_instance() {
    return reinterpret_cast<const SSGWGSPkgBody*>(
               &_SSGWGSPkgBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SSGWGSPkgBody& a, SSGWGSPkgBody& b) {
    a.Swap(&b);
  }
  inline void Swap(SSGWGSPkgBody* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SSGWGSPkgBody* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SSGWGSPkgBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SSGWGSPkgBody>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SSGWGSPkgBody& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SSGWGSPkgBody& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSGWGSPkgBody* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SSGWGSPkgBody";
  }
  protected:
  explicit SSGWGSPkgBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInitFieldNumber = 1,
    kHeartBeatReqFieldNumber = 2,
    kHeartBeatRspFieldNumber = 3,
    kForwardCsPkgFieldNumber = 4,
  };
  // .SSGWGSInit init = 1;
  bool has_init() const;
  private:
  bool _internal_has_init() const;
  public:
  void clear_init();
  const ::SSGWGSInit& init() const;
  PROTOBUF_NODISCARD ::SSGWGSInit* release_init();
  ::SSGWGSInit* mutable_init();
  void set_allocated_init(::SSGWGSInit* init);
  private:
  const ::SSGWGSInit& _internal_init() const;
  ::SSGWGSInit* _internal_mutable_init();
  public:
  void unsafe_arena_set_allocated_init(
      ::SSGWGSInit* init);
  ::SSGWGSInit* unsafe_arena_release_init();

  // .SSGWGSHertBeatReq heart_beat_req = 2;
  bool has_heart_beat_req() const;
  private:
  bool _internal_has_heart_beat_req() const;
  public:
  void clear_heart_beat_req();
  const ::SSGWGSHertBeatReq& heart_beat_req() const;
  PROTOBUF_NODISCARD ::SSGWGSHertBeatReq* release_heart_beat_req();
  ::SSGWGSHertBeatReq* mutable_heart_beat_req();
  void set_allocated_heart_beat_req(::SSGWGSHertBeatReq* heart_beat_req);
  private:
  const ::SSGWGSHertBeatReq& _internal_heart_beat_req() const;
  ::SSGWGSHertBeatReq* _internal_mutable_heart_beat_req();
  public:
  void unsafe_arena_set_allocated_heart_beat_req(
      ::SSGWGSHertBeatReq* heart_beat_req);
  ::SSGWGSHertBeatReq* unsafe_arena_release_heart_beat_req();

  // .SSGSGWHertBeatRsp heart_beat_rsp = 3;
  bool has_heart_beat_rsp() const;
  private:
  bool _internal_has_heart_beat_rsp() const;
  public:
  void clear_heart_beat_rsp();
  const ::SSGSGWHertBeatRsp& heart_beat_rsp() const;
  PROTOBUF_NODISCARD ::SSGSGWHertBeatRsp* release_heart_beat_rsp();
  ::SSGSGWHertBeatRsp* mutable_heart_beat_rsp();
  void set_allocated_heart_beat_rsp(::SSGSGWHertBeatRsp* heart_beat_rsp);
  private:
  const ::SSGSGWHertBeatRsp& _internal_heart_beat_rsp() const;
  ::SSGSGWHertBeatRsp* _internal_mutable_heart_beat_rsp();
  public:
  void unsafe_arena_set_allocated_heart_beat_rsp(
      ::SSGSGWHertBeatRsp* heart_beat_rsp);
  ::SSGSGWHertBeatRsp* unsafe_arena_release_heart_beat_rsp();

  // .SSGWGSForwardCSPkg forward_cs_pkg = 4;
  bool has_forward_cs_pkg() const;
  private:
  bool _internal_has_forward_cs_pkg() const;
  public:
  void clear_forward_cs_pkg();
  const ::SSGWGSForwardCSPkg& forward_cs_pkg() const;
  PROTOBUF_NODISCARD ::SSGWGSForwardCSPkg* release_forward_cs_pkg();
  ::SSGWGSForwardCSPkg* mutable_forward_cs_pkg();
  void set_allocated_forward_cs_pkg(::SSGWGSForwardCSPkg* forward_cs_pkg);
  private:
  const ::SSGWGSForwardCSPkg& _internal_forward_cs_pkg() const;
  ::SSGWGSForwardCSPkg* _internal_mutable_forward_cs_pkg();
  public:
  void unsafe_arena_set_allocated_forward_cs_pkg(
      ::SSGWGSForwardCSPkg* forward_cs_pkg);
  ::SSGWGSForwardCSPkg* unsafe_arena_release_forward_cs_pkg();

  void clear_body();
  BodyCase body_case() const;
  // @@protoc_insertion_point(class_scope:SSGWGSPkgBody)
 private:
  class _Internal;
  void set_has_init();
  void set_has_heart_beat_req();
  void set_has_heart_beat_rsp();
  void set_has_forward_cs_pkg();

  inline bool has_body() const;
  inline void clear_has_body();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union BodyUnion {
    constexpr BodyUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::SSGWGSInit* init_;
    ::SSGWGSHertBeatReq* heart_beat_req_;
    ::SSGSGWHertBeatRsp* heart_beat_rsp_;
    ::SSGWGSForwardCSPkg* forward_cs_pkg_;
  } body_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_ssgwgs_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SSGWGSInit

// -------------------------------------------------------------------

// SSGWGSHertBeatReq

// -------------------------------------------------------------------

// SSGSGWHertBeatRsp

// -------------------------------------------------------------------

// SSGWGSForwardCSPkg

// uint32 role_id = 1;
inline void SSGWGSForwardCSPkg::clear_role_id() {
  role_id_ = 0u;
}
inline uint32_t SSGWGSForwardCSPkg::_internal_role_id() const {
  return role_id_;
}
inline uint32_t SSGWGSForwardCSPkg::role_id() const {
  // @@protoc_insertion_point(field_get:SSGWGSForwardCSPkg.role_id)
  return _internal_role_id();
}
inline void SSGWGSForwardCSPkg::_internal_set_role_id(uint32_t value) {
  
  role_id_ = value;
}
inline void SSGWGSForwardCSPkg::set_role_id(uint32_t value) {
  _internal_set_role_id(value);
  // @@protoc_insertion_point(field_set:SSGWGSForwardCSPkg.role_id)
}

// uint32 game_id = 2;
inline void SSGWGSForwardCSPkg::clear_game_id() {
  game_id_ = 0u;
}
inline uint32_t SSGWGSForwardCSPkg::_internal_game_id() const {
  return game_id_;
}
inline uint32_t SSGWGSForwardCSPkg::game_id() const {
  // @@protoc_insertion_point(field_get:SSGWGSForwardCSPkg.game_id)
  return _internal_game_id();
}
inline void SSGWGSForwardCSPkg::_internal_set_game_id(uint32_t value) {
  
  game_id_ = value;
}
inline void SSGWGSForwardCSPkg::set_game_id(uint32_t value) {
  _internal_set_game_id(value);
  // @@protoc_insertion_point(field_set:SSGWGSForwardCSPkg.game_id)
}

// .CSPkg cs_pkg = 3;
inline bool SSGWGSForwardCSPkg::_internal_has_cs_pkg() const {
  return this != internal_default_instance() && cs_pkg_ != nullptr;
}
inline bool SSGWGSForwardCSPkg::has_cs_pkg() const {
  return _internal_has_cs_pkg();
}
inline const ::CSPkg& SSGWGSForwardCSPkg::_internal_cs_pkg() const {
  const ::CSPkg* p = cs_pkg_;
  return p != nullptr ? *p : reinterpret_cast<const ::CSPkg&>(
      ::_CSPkg_default_instance_);
}
inline const ::CSPkg& SSGWGSForwardCSPkg::cs_pkg() const {
  // @@protoc_insertion_point(field_get:SSGWGSForwardCSPkg.cs_pkg)
  return _internal_cs_pkg();
}
inline void SSGWGSForwardCSPkg::unsafe_arena_set_allocated_cs_pkg(
    ::CSPkg* cs_pkg) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cs_pkg_);
  }
  cs_pkg_ = cs_pkg;
  if (cs_pkg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SSGWGSForwardCSPkg.cs_pkg)
}
inline ::CSPkg* SSGWGSForwardCSPkg::release_cs_pkg() {
  
  ::CSPkg* temp = cs_pkg_;
  cs_pkg_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CSPkg* SSGWGSForwardCSPkg::unsafe_arena_release_cs_pkg() {
  // @@protoc_insertion_point(field_release:SSGWGSForwardCSPkg.cs_pkg)
  
  ::CSPkg* temp = cs_pkg_;
  cs_pkg_ = nullptr;
  return temp;
}
inline ::CSPkg* SSGWGSForwardCSPkg::_internal_mutable_cs_pkg() {
  
  if (cs_pkg_ == nullptr) {
    auto* p = CreateMaybeMessage<::CSPkg>(GetArenaForAllocation());
    cs_pkg_ = p;
  }
  return cs_pkg_;
}
inline ::CSPkg* SSGWGSForwardCSPkg::mutable_cs_pkg() {
  ::CSPkg* _msg = _internal_mutable_cs_pkg();
  // @@protoc_insertion_point(field_mutable:SSGWGSForwardCSPkg.cs_pkg)
  return _msg;
}
inline void SSGWGSForwardCSPkg::set_allocated_cs_pkg(::CSPkg* cs_pkg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cs_pkg_);
  }
  if (cs_pkg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cs_pkg));
    if (message_arena != submessage_arena) {
      cs_pkg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cs_pkg, submessage_arena);
    }
    
  } else {
    
  }
  cs_pkg_ = cs_pkg;
  // @@protoc_insertion_point(field_set_allocated:SSGWGSForwardCSPkg.cs_pkg)
}

// -------------------------------------------------------------------

// SSGWGSPkgBody

// .SSGWGSInit init = 1;
inline bool SSGWGSPkgBody::_internal_has_init() const {
  return body_case() == kInit;
}
inline bool SSGWGSPkgBody::has_init() const {
  return _internal_has_init();
}
inline void SSGWGSPkgBody::set_has_init() {
  _oneof_case_[0] = kInit;
}
inline void SSGWGSPkgBody::clear_init() {
  if (_internal_has_init()) {
    if (GetArenaForAllocation() == nullptr) {
      delete body_.init_;
    }
    clear_has_body();
  }
}
inline ::SSGWGSInit* SSGWGSPkgBody::release_init() {
  // @@protoc_insertion_point(field_release:SSGWGSPkgBody.init)
  if (_internal_has_init()) {
    clear_has_body();
      ::SSGWGSInit* temp = body_.init_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    body_.init_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::SSGWGSInit& SSGWGSPkgBody::_internal_init() const {
  return _internal_has_init()
      ? *body_.init_
      : reinterpret_cast< ::SSGWGSInit&>(::_SSGWGSInit_default_instance_);
}
inline const ::SSGWGSInit& SSGWGSPkgBody::init() const {
  // @@protoc_insertion_point(field_get:SSGWGSPkgBody.init)
  return _internal_init();
}
inline ::SSGWGSInit* SSGWGSPkgBody::unsafe_arena_release_init() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SSGWGSPkgBody.init)
  if (_internal_has_init()) {
    clear_has_body();
    ::SSGWGSInit* temp = body_.init_;
    body_.init_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SSGWGSPkgBody::unsafe_arena_set_allocated_init(::SSGWGSInit* init) {
  clear_body();
  if (init) {
    set_has_init();
    body_.init_ = init;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SSGWGSPkgBody.init)
}
inline ::SSGWGSInit* SSGWGSPkgBody::_internal_mutable_init() {
  if (!_internal_has_init()) {
    clear_body();
    set_has_init();
    body_.init_ = CreateMaybeMessage< ::SSGWGSInit >(GetArenaForAllocation());
  }
  return body_.init_;
}
inline ::SSGWGSInit* SSGWGSPkgBody::mutable_init() {
  ::SSGWGSInit* _msg = _internal_mutable_init();
  // @@protoc_insertion_point(field_mutable:SSGWGSPkgBody.init)
  return _msg;
}

// .SSGWGSHertBeatReq heart_beat_req = 2;
inline bool SSGWGSPkgBody::_internal_has_heart_beat_req() const {
  return body_case() == kHeartBeatReq;
}
inline bool SSGWGSPkgBody::has_heart_beat_req() const {
  return _internal_has_heart_beat_req();
}
inline void SSGWGSPkgBody::set_has_heart_beat_req() {
  _oneof_case_[0] = kHeartBeatReq;
}
inline void SSGWGSPkgBody::clear_heart_beat_req() {
  if (_internal_has_heart_beat_req()) {
    if (GetArenaForAllocation() == nullptr) {
      delete body_.heart_beat_req_;
    }
    clear_has_body();
  }
}
inline ::SSGWGSHertBeatReq* SSGWGSPkgBody::release_heart_beat_req() {
  // @@protoc_insertion_point(field_release:SSGWGSPkgBody.heart_beat_req)
  if (_internal_has_heart_beat_req()) {
    clear_has_body();
      ::SSGWGSHertBeatReq* temp = body_.heart_beat_req_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    body_.heart_beat_req_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::SSGWGSHertBeatReq& SSGWGSPkgBody::_internal_heart_beat_req() const {
  return _internal_has_heart_beat_req()
      ? *body_.heart_beat_req_
      : reinterpret_cast< ::SSGWGSHertBeatReq&>(::_SSGWGSHertBeatReq_default_instance_);
}
inline const ::SSGWGSHertBeatReq& SSGWGSPkgBody::heart_beat_req() const {
  // @@protoc_insertion_point(field_get:SSGWGSPkgBody.heart_beat_req)
  return _internal_heart_beat_req();
}
inline ::SSGWGSHertBeatReq* SSGWGSPkgBody::unsafe_arena_release_heart_beat_req() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SSGWGSPkgBody.heart_beat_req)
  if (_internal_has_heart_beat_req()) {
    clear_has_body();
    ::SSGWGSHertBeatReq* temp = body_.heart_beat_req_;
    body_.heart_beat_req_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SSGWGSPkgBody::unsafe_arena_set_allocated_heart_beat_req(::SSGWGSHertBeatReq* heart_beat_req) {
  clear_body();
  if (heart_beat_req) {
    set_has_heart_beat_req();
    body_.heart_beat_req_ = heart_beat_req;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SSGWGSPkgBody.heart_beat_req)
}
inline ::SSGWGSHertBeatReq* SSGWGSPkgBody::_internal_mutable_heart_beat_req() {
  if (!_internal_has_heart_beat_req()) {
    clear_body();
    set_has_heart_beat_req();
    body_.heart_beat_req_ = CreateMaybeMessage< ::SSGWGSHertBeatReq >(GetArenaForAllocation());
  }
  return body_.heart_beat_req_;
}
inline ::SSGWGSHertBeatReq* SSGWGSPkgBody::mutable_heart_beat_req() {
  ::SSGWGSHertBeatReq* _msg = _internal_mutable_heart_beat_req();
  // @@protoc_insertion_point(field_mutable:SSGWGSPkgBody.heart_beat_req)
  return _msg;
}

// .SSGSGWHertBeatRsp heart_beat_rsp = 3;
inline bool SSGWGSPkgBody::_internal_has_heart_beat_rsp() const {
  return body_case() == kHeartBeatRsp;
}
inline bool SSGWGSPkgBody::has_heart_beat_rsp() const {
  return _internal_has_heart_beat_rsp();
}
inline void SSGWGSPkgBody::set_has_heart_beat_rsp() {
  _oneof_case_[0] = kHeartBeatRsp;
}
inline void SSGWGSPkgBody::clear_heart_beat_rsp() {
  if (_internal_has_heart_beat_rsp()) {
    if (GetArenaForAllocation() == nullptr) {
      delete body_.heart_beat_rsp_;
    }
    clear_has_body();
  }
}
inline ::SSGSGWHertBeatRsp* SSGWGSPkgBody::release_heart_beat_rsp() {
  // @@protoc_insertion_point(field_release:SSGWGSPkgBody.heart_beat_rsp)
  if (_internal_has_heart_beat_rsp()) {
    clear_has_body();
      ::SSGSGWHertBeatRsp* temp = body_.heart_beat_rsp_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    body_.heart_beat_rsp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::SSGSGWHertBeatRsp& SSGWGSPkgBody::_internal_heart_beat_rsp() const {
  return _internal_has_heart_beat_rsp()
      ? *body_.heart_beat_rsp_
      : reinterpret_cast< ::SSGSGWHertBeatRsp&>(::_SSGSGWHertBeatRsp_default_instance_);
}
inline const ::SSGSGWHertBeatRsp& SSGWGSPkgBody::heart_beat_rsp() const {
  // @@protoc_insertion_point(field_get:SSGWGSPkgBody.heart_beat_rsp)
  return _internal_heart_beat_rsp();
}
inline ::SSGSGWHertBeatRsp* SSGWGSPkgBody::unsafe_arena_release_heart_beat_rsp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SSGWGSPkgBody.heart_beat_rsp)
  if (_internal_has_heart_beat_rsp()) {
    clear_has_body();
    ::SSGSGWHertBeatRsp* temp = body_.heart_beat_rsp_;
    body_.heart_beat_rsp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SSGWGSPkgBody::unsafe_arena_set_allocated_heart_beat_rsp(::SSGSGWHertBeatRsp* heart_beat_rsp) {
  clear_body();
  if (heart_beat_rsp) {
    set_has_heart_beat_rsp();
    body_.heart_beat_rsp_ = heart_beat_rsp;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SSGWGSPkgBody.heart_beat_rsp)
}
inline ::SSGSGWHertBeatRsp* SSGWGSPkgBody::_internal_mutable_heart_beat_rsp() {
  if (!_internal_has_heart_beat_rsp()) {
    clear_body();
    set_has_heart_beat_rsp();
    body_.heart_beat_rsp_ = CreateMaybeMessage< ::SSGSGWHertBeatRsp >(GetArenaForAllocation());
  }
  return body_.heart_beat_rsp_;
}
inline ::SSGSGWHertBeatRsp* SSGWGSPkgBody::mutable_heart_beat_rsp() {
  ::SSGSGWHertBeatRsp* _msg = _internal_mutable_heart_beat_rsp();
  // @@protoc_insertion_point(field_mutable:SSGWGSPkgBody.heart_beat_rsp)
  return _msg;
}

// .SSGWGSForwardCSPkg forward_cs_pkg = 4;
inline bool SSGWGSPkgBody::_internal_has_forward_cs_pkg() const {
  return body_case() == kForwardCsPkg;
}
inline bool SSGWGSPkgBody::has_forward_cs_pkg() const {
  return _internal_has_forward_cs_pkg();
}
inline void SSGWGSPkgBody::set_has_forward_cs_pkg() {
  _oneof_case_[0] = kForwardCsPkg;
}
inline void SSGWGSPkgBody::clear_forward_cs_pkg() {
  if (_internal_has_forward_cs_pkg()) {
    if (GetArenaForAllocation() == nullptr) {
      delete body_.forward_cs_pkg_;
    }
    clear_has_body();
  }
}
inline ::SSGWGSForwardCSPkg* SSGWGSPkgBody::release_forward_cs_pkg() {
  // @@protoc_insertion_point(field_release:SSGWGSPkgBody.forward_cs_pkg)
  if (_internal_has_forward_cs_pkg()) {
    clear_has_body();
      ::SSGWGSForwardCSPkg* temp = body_.forward_cs_pkg_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    body_.forward_cs_pkg_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::SSGWGSForwardCSPkg& SSGWGSPkgBody::_internal_forward_cs_pkg() const {
  return _internal_has_forward_cs_pkg()
      ? *body_.forward_cs_pkg_
      : reinterpret_cast< ::SSGWGSForwardCSPkg&>(::_SSGWGSForwardCSPkg_default_instance_);
}
inline const ::SSGWGSForwardCSPkg& SSGWGSPkgBody::forward_cs_pkg() const {
  // @@protoc_insertion_point(field_get:SSGWGSPkgBody.forward_cs_pkg)
  return _internal_forward_cs_pkg();
}
inline ::SSGWGSForwardCSPkg* SSGWGSPkgBody::unsafe_arena_release_forward_cs_pkg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SSGWGSPkgBody.forward_cs_pkg)
  if (_internal_has_forward_cs_pkg()) {
    clear_has_body();
    ::SSGWGSForwardCSPkg* temp = body_.forward_cs_pkg_;
    body_.forward_cs_pkg_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SSGWGSPkgBody::unsafe_arena_set_allocated_forward_cs_pkg(::SSGWGSForwardCSPkg* forward_cs_pkg) {
  clear_body();
  if (forward_cs_pkg) {
    set_has_forward_cs_pkg();
    body_.forward_cs_pkg_ = forward_cs_pkg;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SSGWGSPkgBody.forward_cs_pkg)
}
inline ::SSGWGSForwardCSPkg* SSGWGSPkgBody::_internal_mutable_forward_cs_pkg() {
  if (!_internal_has_forward_cs_pkg()) {
    clear_body();
    set_has_forward_cs_pkg();
    body_.forward_cs_pkg_ = CreateMaybeMessage< ::SSGWGSForwardCSPkg >(GetArenaForAllocation());
  }
  return body_.forward_cs_pkg_;
}
inline ::SSGWGSForwardCSPkg* SSGWGSPkgBody::mutable_forward_cs_pkg() {
  ::SSGWGSForwardCSPkg* _msg = _internal_mutable_forward_cs_pkg();
  // @@protoc_insertion_point(field_mutable:SSGWGSPkgBody.forward_cs_pkg)
  return _msg;
}

inline bool SSGWGSPkgBody::has_body() const {
  return body_case() != BODY_NOT_SET;
}
inline void SSGWGSPkgBody::clear_has_body() {
  _oneof_case_[0] = BODY_NOT_SET;
}
inline SSGWGSPkgBody::BodyCase SSGWGSPkgBody::body_case() const {
  return SSGWGSPkgBody::BodyCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ssgwgs_2eproto
