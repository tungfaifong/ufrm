// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ssdcds.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ssdcds_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ssdcds_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ssdcds_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ssdcds_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[15]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ssdcds_2eproto;
class SSDCDSDeleteReq;
struct SSDCDSDeleteReqDefaultTypeInternal;
extern SSDCDSDeleteReqDefaultTypeInternal _SSDCDSDeleteReq_default_instance_;
class SSDCDSDeleteReq_WhereEntry_DoNotUse;
struct SSDCDSDeleteReq_WhereEntry_DoNotUseDefaultTypeInternal;
extern SSDCDSDeleteReq_WhereEntry_DoNotUseDefaultTypeInternal _SSDCDSDeleteReq_WhereEntry_DoNotUse_default_instance_;
class SSDCDSInsertReq;
struct SSDCDSInsertReqDefaultTypeInternal;
extern SSDCDSInsertReqDefaultTypeInternal _SSDCDSInsertReq_default_instance_;
class SSDCDSPkgBody;
struct SSDCDSPkgBodyDefaultTypeInternal;
extern SSDCDSPkgBodyDefaultTypeInternal _SSDCDSPkgBody_default_instance_;
class SSDCDSSelectReq;
struct SSDCDSSelectReqDefaultTypeInternal;
extern SSDCDSSelectReqDefaultTypeInternal _SSDCDSSelectReq_default_instance_;
class SSDCDSSelectReq_WhereEntry_DoNotUse;
struct SSDCDSSelectReq_WhereEntry_DoNotUseDefaultTypeInternal;
extern SSDCDSSelectReq_WhereEntry_DoNotUseDefaultTypeInternal _SSDCDSSelectReq_WhereEntry_DoNotUse_default_instance_;
class SSDCDSUpdateReq;
struct SSDCDSUpdateReqDefaultTypeInternal;
extern SSDCDSUpdateReqDefaultTypeInternal _SSDCDSUpdateReq_default_instance_;
class SSDCDSUpdateReq_ValueEntry_DoNotUse;
struct SSDCDSUpdateReq_ValueEntry_DoNotUseDefaultTypeInternal;
extern SSDCDSUpdateReq_ValueEntry_DoNotUseDefaultTypeInternal _SSDCDSUpdateReq_ValueEntry_DoNotUse_default_instance_;
class SSDCDSUpdateReq_WhereEntry_DoNotUse;
struct SSDCDSUpdateReq_WhereEntry_DoNotUseDefaultTypeInternal;
extern SSDCDSUpdateReq_WhereEntry_DoNotUseDefaultTypeInternal _SSDCDSUpdateReq_WhereEntry_DoNotUse_default_instance_;
class SSDSDCDeleteRsp;
struct SSDSDCDeleteRspDefaultTypeInternal;
extern SSDSDCDeleteRspDefaultTypeInternal _SSDSDCDeleteRsp_default_instance_;
class SSDSDCInsertRsp;
struct SSDSDCInsertRspDefaultTypeInternal;
extern SSDSDCInsertRspDefaultTypeInternal _SSDSDCInsertRsp_default_instance_;
class SSDSDCSelectRsp;
struct SSDSDCSelectRspDefaultTypeInternal;
extern SSDSDCSelectRspDefaultTypeInternal _SSDSDCSelectRsp_default_instance_;
class SSDSDCSelectRsp_VariantMap;
struct SSDSDCSelectRsp_VariantMapDefaultTypeInternal;
extern SSDSDCSelectRsp_VariantMapDefaultTypeInternal _SSDSDCSelectRsp_VariantMap_default_instance_;
class SSDSDCSelectRsp_VariantMap_ValueEntry_DoNotUse;
struct SSDSDCSelectRsp_VariantMap_ValueEntry_DoNotUseDefaultTypeInternal;
extern SSDSDCSelectRsp_VariantMap_ValueEntry_DoNotUseDefaultTypeInternal _SSDSDCSelectRsp_VariantMap_ValueEntry_DoNotUse_default_instance_;
class SSDSDCUpdateRsp;
struct SSDSDCUpdateRspDefaultTypeInternal;
extern SSDSDCUpdateRspDefaultTypeInternal _SSDSDCUpdateRsp_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::SSDCDSDeleteReq* Arena::CreateMaybeMessage<::SSDCDSDeleteReq>(Arena*);
template<> ::SSDCDSDeleteReq_WhereEntry_DoNotUse* Arena::CreateMaybeMessage<::SSDCDSDeleteReq_WhereEntry_DoNotUse>(Arena*);
template<> ::SSDCDSInsertReq* Arena::CreateMaybeMessage<::SSDCDSInsertReq>(Arena*);
template<> ::SSDCDSPkgBody* Arena::CreateMaybeMessage<::SSDCDSPkgBody>(Arena*);
template<> ::SSDCDSSelectReq* Arena::CreateMaybeMessage<::SSDCDSSelectReq>(Arena*);
template<> ::SSDCDSSelectReq_WhereEntry_DoNotUse* Arena::CreateMaybeMessage<::SSDCDSSelectReq_WhereEntry_DoNotUse>(Arena*);
template<> ::SSDCDSUpdateReq* Arena::CreateMaybeMessage<::SSDCDSUpdateReq>(Arena*);
template<> ::SSDCDSUpdateReq_ValueEntry_DoNotUse* Arena::CreateMaybeMessage<::SSDCDSUpdateReq_ValueEntry_DoNotUse>(Arena*);
template<> ::SSDCDSUpdateReq_WhereEntry_DoNotUse* Arena::CreateMaybeMessage<::SSDCDSUpdateReq_WhereEntry_DoNotUse>(Arena*);
template<> ::SSDSDCDeleteRsp* Arena::CreateMaybeMessage<::SSDSDCDeleteRsp>(Arena*);
template<> ::SSDSDCInsertRsp* Arena::CreateMaybeMessage<::SSDSDCInsertRsp>(Arena*);
template<> ::SSDSDCSelectRsp* Arena::CreateMaybeMessage<::SSDSDCSelectRsp>(Arena*);
template<> ::SSDSDCSelectRsp_VariantMap* Arena::CreateMaybeMessage<::SSDSDCSelectRsp_VariantMap>(Arena*);
template<> ::SSDSDCSelectRsp_VariantMap_ValueEntry_DoNotUse* Arena::CreateMaybeMessage<::SSDSDCSelectRsp_VariantMap_ValueEntry_DoNotUse>(Arena*);
template<> ::SSDSDCUpdateRsp* Arena::CreateMaybeMessage<::SSDSDCUpdateRsp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class SSDCDSSelectReq_WhereEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SSDCDSSelectReq_WhereEntry_DoNotUse, 
    std::string, ::Variant,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SSDCDSSelectReq_WhereEntry_DoNotUse, 
    std::string, ::Variant,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  SSDCDSSelectReq_WhereEntry_DoNotUse();
  explicit constexpr SSDCDSSelectReq_WhereEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit SSDCDSSelectReq_WhereEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const SSDCDSSelectReq_WhereEntry_DoNotUse& other);
  static const SSDCDSSelectReq_WhereEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SSDCDSSelectReq_WhereEntry_DoNotUse*>(&_SSDCDSSelectReq_WhereEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "SSDCDSSelectReq.WhereEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class SSDCDSSelectReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SSDCDSSelectReq) */ {
 public:
  inline SSDCDSSelectReq() : SSDCDSSelectReq(nullptr) {}
  ~SSDCDSSelectReq() override;
  explicit constexpr SSDCDSSelectReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SSDCDSSelectReq(const SSDCDSSelectReq& from);
  SSDCDSSelectReq(SSDCDSSelectReq&& from) noexcept
    : SSDCDSSelectReq() {
    *this = ::std::move(from);
  }

  inline SSDCDSSelectReq& operator=(const SSDCDSSelectReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSDCDSSelectReq& operator=(SSDCDSSelectReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SSDCDSSelectReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const SSDCDSSelectReq* internal_default_instance() {
    return reinterpret_cast<const SSDCDSSelectReq*>(
               &_SSDCDSSelectReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SSDCDSSelectReq& a, SSDCDSSelectReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SSDCDSSelectReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SSDCDSSelectReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SSDCDSSelectReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SSDCDSSelectReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SSDCDSSelectReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SSDCDSSelectReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSDCDSSelectReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SSDCDSSelectReq";
  }
  protected:
  explicit SSDCDSSelectReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kColumnFieldNumber = 2,
    kWhereFieldNumber = 3,
    kTbNameFieldNumber = 1,
  };
  // repeated string column = 2;
  int column_size() const;
  private:
  int _internal_column_size() const;
  public:
  void clear_column();
  const std::string& column(int index) const;
  std::string* mutable_column(int index);
  void set_column(int index, const std::string& value);
  void set_column(int index, std::string&& value);
  void set_column(int index, const char* value);
  void set_column(int index, const char* value, size_t size);
  std::string* add_column();
  void add_column(const std::string& value);
  void add_column(std::string&& value);
  void add_column(const char* value);
  void add_column(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& column() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_column();
  private:
  const std::string& _internal_column(int index) const;
  std::string* _internal_add_column();
  public:

  // map<string, .Variant> where = 3;
  int where_size() const;
  private:
  int _internal_where_size() const;
  public:
  void clear_where();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Variant >&
      _internal_where() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Variant >*
      _internal_mutable_where();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Variant >&
      where() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Variant >*
      mutable_where();

  // string tb_name = 1;
  void clear_tb_name();
  const std::string& tb_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tb_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tb_name();
  PROTOBUF_NODISCARD std::string* release_tb_name();
  void set_allocated_tb_name(std::string* tb_name);
  private:
  const std::string& _internal_tb_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tb_name(const std::string& value);
  std::string* _internal_mutable_tb_name();
  public:

  // @@protoc_insertion_point(class_scope:SSDCDSSelectReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> column_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      SSDCDSSelectReq_WhereEntry_DoNotUse,
      std::string, ::Variant,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> where_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tb_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ssdcds_2eproto;
};
// -------------------------------------------------------------------

class SSDSDCSelectRsp_VariantMap_ValueEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SSDSDCSelectRsp_VariantMap_ValueEntry_DoNotUse, 
    std::string, ::Variant,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SSDSDCSelectRsp_VariantMap_ValueEntry_DoNotUse, 
    std::string, ::Variant,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  SSDSDCSelectRsp_VariantMap_ValueEntry_DoNotUse();
  explicit constexpr SSDSDCSelectRsp_VariantMap_ValueEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit SSDSDCSelectRsp_VariantMap_ValueEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const SSDSDCSelectRsp_VariantMap_ValueEntry_DoNotUse& other);
  static const SSDSDCSelectRsp_VariantMap_ValueEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SSDSDCSelectRsp_VariantMap_ValueEntry_DoNotUse*>(&_SSDSDCSelectRsp_VariantMap_ValueEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "SSDSDCSelectRsp.VariantMap.ValueEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class SSDSDCSelectRsp_VariantMap final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SSDSDCSelectRsp.VariantMap) */ {
 public:
  inline SSDSDCSelectRsp_VariantMap() : SSDSDCSelectRsp_VariantMap(nullptr) {}
  ~SSDSDCSelectRsp_VariantMap() override;
  explicit constexpr SSDSDCSelectRsp_VariantMap(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SSDSDCSelectRsp_VariantMap(const SSDSDCSelectRsp_VariantMap& from);
  SSDSDCSelectRsp_VariantMap(SSDSDCSelectRsp_VariantMap&& from) noexcept
    : SSDSDCSelectRsp_VariantMap() {
    *this = ::std::move(from);
  }

  inline SSDSDCSelectRsp_VariantMap& operator=(const SSDSDCSelectRsp_VariantMap& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSDSDCSelectRsp_VariantMap& operator=(SSDSDCSelectRsp_VariantMap&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SSDSDCSelectRsp_VariantMap& default_instance() {
    return *internal_default_instance();
  }
  static inline const SSDSDCSelectRsp_VariantMap* internal_default_instance() {
    return reinterpret_cast<const SSDSDCSelectRsp_VariantMap*>(
               &_SSDSDCSelectRsp_VariantMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SSDSDCSelectRsp_VariantMap& a, SSDSDCSelectRsp_VariantMap& b) {
    a.Swap(&b);
  }
  inline void Swap(SSDSDCSelectRsp_VariantMap* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SSDSDCSelectRsp_VariantMap* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SSDSDCSelectRsp_VariantMap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SSDSDCSelectRsp_VariantMap>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SSDSDCSelectRsp_VariantMap& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SSDSDCSelectRsp_VariantMap& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSDSDCSelectRsp_VariantMap* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SSDSDCSelectRsp.VariantMap";
  }
  protected:
  explicit SSDSDCSelectRsp_VariantMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // map<string, .Variant> value = 1;
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Variant >&
      _internal_value() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Variant >*
      _internal_mutable_value();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Variant >&
      value() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Variant >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:SSDSDCSelectRsp.VariantMap)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      SSDSDCSelectRsp_VariantMap_ValueEntry_DoNotUse,
      std::string, ::Variant,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ssdcds_2eproto;
};
// -------------------------------------------------------------------

class SSDSDCSelectRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SSDSDCSelectRsp) */ {
 public:
  inline SSDSDCSelectRsp() : SSDSDCSelectRsp(nullptr) {}
  ~SSDSDCSelectRsp() override;
  explicit constexpr SSDSDCSelectRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SSDSDCSelectRsp(const SSDSDCSelectRsp& from);
  SSDSDCSelectRsp(SSDSDCSelectRsp&& from) noexcept
    : SSDSDCSelectRsp() {
    *this = ::std::move(from);
  }

  inline SSDSDCSelectRsp& operator=(const SSDSDCSelectRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSDSDCSelectRsp& operator=(SSDSDCSelectRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SSDSDCSelectRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const SSDSDCSelectRsp* internal_default_instance() {
    return reinterpret_cast<const SSDSDCSelectRsp*>(
               &_SSDSDCSelectRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SSDSDCSelectRsp& a, SSDSDCSelectRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(SSDSDCSelectRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SSDSDCSelectRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SSDSDCSelectRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SSDSDCSelectRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SSDSDCSelectRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SSDSDCSelectRsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSDSDCSelectRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SSDSDCSelectRsp";
  }
  protected:
  explicit SSDSDCSelectRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SSDSDCSelectRsp_VariantMap VariantMap;

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // repeated .SSDSDCSelectRsp.VariantMap result = 1;
  int result_size() const;
  private:
  int _internal_result_size() const;
  public:
  void clear_result();
  ::SSDSDCSelectRsp_VariantMap* mutable_result(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SSDSDCSelectRsp_VariantMap >*
      mutable_result();
  private:
  const ::SSDSDCSelectRsp_VariantMap& _internal_result(int index) const;
  ::SSDSDCSelectRsp_VariantMap* _internal_add_result();
  public:
  const ::SSDSDCSelectRsp_VariantMap& result(int index) const;
  ::SSDSDCSelectRsp_VariantMap* add_result();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SSDSDCSelectRsp_VariantMap >&
      result() const;

  // @@protoc_insertion_point(class_scope:SSDSDCSelectRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SSDSDCSelectRsp_VariantMap > result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ssdcds_2eproto;
};
// -------------------------------------------------------------------

class SSDCDSInsertReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SSDCDSInsertReq) */ {
 public:
  inline SSDCDSInsertReq() : SSDCDSInsertReq(nullptr) {}
  ~SSDCDSInsertReq() override;
  explicit constexpr SSDCDSInsertReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SSDCDSInsertReq(const SSDCDSInsertReq& from);
  SSDCDSInsertReq(SSDCDSInsertReq&& from) noexcept
    : SSDCDSInsertReq() {
    *this = ::std::move(from);
  }

  inline SSDCDSInsertReq& operator=(const SSDCDSInsertReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSDCDSInsertReq& operator=(SSDCDSInsertReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SSDCDSInsertReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const SSDCDSInsertReq* internal_default_instance() {
    return reinterpret_cast<const SSDCDSInsertReq*>(
               &_SSDCDSInsertReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SSDCDSInsertReq& a, SSDCDSInsertReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SSDCDSInsertReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SSDCDSInsertReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SSDCDSInsertReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SSDCDSInsertReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SSDCDSInsertReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SSDCDSInsertReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSDCDSInsertReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SSDCDSInsertReq";
  }
  protected:
  explicit SSDCDSInsertReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColumnFieldNumber = 2,
    kValueFieldNumber = 3,
    kTbNameFieldNumber = 1,
  };
  // repeated string column = 2;
  int column_size() const;
  private:
  int _internal_column_size() const;
  public:
  void clear_column();
  const std::string& column(int index) const;
  std::string* mutable_column(int index);
  void set_column(int index, const std::string& value);
  void set_column(int index, std::string&& value);
  void set_column(int index, const char* value);
  void set_column(int index, const char* value, size_t size);
  std::string* add_column();
  void add_column(const std::string& value);
  void add_column(std::string&& value);
  void add_column(const char* value);
  void add_column(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& column() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_column();
  private:
  const std::string& _internal_column(int index) const;
  std::string* _internal_add_column();
  public:

  // repeated .Variant value = 3;
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  ::Variant* mutable_value(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Variant >*
      mutable_value();
  private:
  const ::Variant& _internal_value(int index) const;
  ::Variant* _internal_add_value();
  public:
  const ::Variant& value(int index) const;
  ::Variant* add_value();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Variant >&
      value() const;

  // string tb_name = 1;
  void clear_tb_name();
  const std::string& tb_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tb_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tb_name();
  PROTOBUF_NODISCARD std::string* release_tb_name();
  void set_allocated_tb_name(std::string* tb_name);
  private:
  const std::string& _internal_tb_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tb_name(const std::string& value);
  std::string* _internal_mutable_tb_name();
  public:

  // @@protoc_insertion_point(class_scope:SSDCDSInsertReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> column_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Variant > value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tb_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ssdcds_2eproto;
};
// -------------------------------------------------------------------

class SSDSDCInsertRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SSDSDCInsertRsp) */ {
 public:
  inline SSDSDCInsertRsp() : SSDSDCInsertRsp(nullptr) {}
  ~SSDSDCInsertRsp() override;
  explicit constexpr SSDSDCInsertRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SSDSDCInsertRsp(const SSDSDCInsertRsp& from);
  SSDSDCInsertRsp(SSDSDCInsertRsp&& from) noexcept
    : SSDSDCInsertRsp() {
    *this = ::std::move(from);
  }

  inline SSDSDCInsertRsp& operator=(const SSDSDCInsertRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSDSDCInsertRsp& operator=(SSDSDCInsertRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SSDSDCInsertRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const SSDSDCInsertRsp* internal_default_instance() {
    return reinterpret_cast<const SSDSDCInsertRsp*>(
               &_SSDSDCInsertRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SSDSDCInsertRsp& a, SSDSDCInsertRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(SSDSDCInsertRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SSDSDCInsertRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SSDSDCInsertRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SSDSDCInsertRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SSDSDCInsertRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SSDSDCInsertRsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSDSDCInsertRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SSDSDCInsertRsp";
  }
  protected:
  explicit SSDSDCInsertRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:SSDSDCInsertRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ssdcds_2eproto;
};
// -------------------------------------------------------------------

class SSDCDSUpdateReq_ValueEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SSDCDSUpdateReq_ValueEntry_DoNotUse, 
    std::string, ::Variant,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SSDCDSUpdateReq_ValueEntry_DoNotUse, 
    std::string, ::Variant,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  SSDCDSUpdateReq_ValueEntry_DoNotUse();
  explicit constexpr SSDCDSUpdateReq_ValueEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit SSDCDSUpdateReq_ValueEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const SSDCDSUpdateReq_ValueEntry_DoNotUse& other);
  static const SSDCDSUpdateReq_ValueEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SSDCDSUpdateReq_ValueEntry_DoNotUse*>(&_SSDCDSUpdateReq_ValueEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "SSDCDSUpdateReq.ValueEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class SSDCDSUpdateReq_WhereEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SSDCDSUpdateReq_WhereEntry_DoNotUse, 
    std::string, ::Variant,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SSDCDSUpdateReq_WhereEntry_DoNotUse, 
    std::string, ::Variant,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  SSDCDSUpdateReq_WhereEntry_DoNotUse();
  explicit constexpr SSDCDSUpdateReq_WhereEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit SSDCDSUpdateReq_WhereEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const SSDCDSUpdateReq_WhereEntry_DoNotUse& other);
  static const SSDCDSUpdateReq_WhereEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SSDCDSUpdateReq_WhereEntry_DoNotUse*>(&_SSDCDSUpdateReq_WhereEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "SSDCDSUpdateReq.WhereEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class SSDCDSUpdateReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SSDCDSUpdateReq) */ {
 public:
  inline SSDCDSUpdateReq() : SSDCDSUpdateReq(nullptr) {}
  ~SSDCDSUpdateReq() override;
  explicit constexpr SSDCDSUpdateReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SSDCDSUpdateReq(const SSDCDSUpdateReq& from);
  SSDCDSUpdateReq(SSDCDSUpdateReq&& from) noexcept
    : SSDCDSUpdateReq() {
    *this = ::std::move(from);
  }

  inline SSDCDSUpdateReq& operator=(const SSDCDSUpdateReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSDCDSUpdateReq& operator=(SSDCDSUpdateReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SSDCDSUpdateReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const SSDCDSUpdateReq* internal_default_instance() {
    return reinterpret_cast<const SSDCDSUpdateReq*>(
               &_SSDCDSUpdateReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SSDCDSUpdateReq& a, SSDCDSUpdateReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SSDCDSUpdateReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SSDCDSUpdateReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SSDCDSUpdateReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SSDCDSUpdateReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SSDCDSUpdateReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SSDCDSUpdateReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSDCDSUpdateReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SSDCDSUpdateReq";
  }
  protected:
  explicit SSDCDSUpdateReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kWhereFieldNumber = 3,
    kTbNameFieldNumber = 1,
  };
  // map<string, .Variant> value = 2;
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Variant >&
      _internal_value() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Variant >*
      _internal_mutable_value();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Variant >&
      value() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Variant >*
      mutable_value();

  // map<string, .Variant> where = 3;
  int where_size() const;
  private:
  int _internal_where_size() const;
  public:
  void clear_where();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Variant >&
      _internal_where() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Variant >*
      _internal_mutable_where();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Variant >&
      where() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Variant >*
      mutable_where();

  // string tb_name = 1;
  void clear_tb_name();
  const std::string& tb_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tb_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tb_name();
  PROTOBUF_NODISCARD std::string* release_tb_name();
  void set_allocated_tb_name(std::string* tb_name);
  private:
  const std::string& _internal_tb_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tb_name(const std::string& value);
  std::string* _internal_mutable_tb_name();
  public:

  // @@protoc_insertion_point(class_scope:SSDCDSUpdateReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      SSDCDSUpdateReq_ValueEntry_DoNotUse,
      std::string, ::Variant,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> value_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      SSDCDSUpdateReq_WhereEntry_DoNotUse,
      std::string, ::Variant,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> where_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tb_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ssdcds_2eproto;
};
// -------------------------------------------------------------------

class SSDSDCUpdateRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SSDSDCUpdateRsp) */ {
 public:
  inline SSDSDCUpdateRsp() : SSDSDCUpdateRsp(nullptr) {}
  ~SSDSDCUpdateRsp() override;
  explicit constexpr SSDSDCUpdateRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SSDSDCUpdateRsp(const SSDSDCUpdateRsp& from);
  SSDSDCUpdateRsp(SSDSDCUpdateRsp&& from) noexcept
    : SSDSDCUpdateRsp() {
    *this = ::std::move(from);
  }

  inline SSDSDCUpdateRsp& operator=(const SSDSDCUpdateRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSDSDCUpdateRsp& operator=(SSDSDCUpdateRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SSDSDCUpdateRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const SSDSDCUpdateRsp* internal_default_instance() {
    return reinterpret_cast<const SSDSDCUpdateRsp*>(
               &_SSDSDCUpdateRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SSDSDCUpdateRsp& a, SSDSDCUpdateRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(SSDSDCUpdateRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SSDSDCUpdateRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SSDSDCUpdateRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SSDSDCUpdateRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SSDSDCUpdateRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SSDSDCUpdateRsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSDSDCUpdateRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SSDSDCUpdateRsp";
  }
  protected:
  explicit SSDSDCUpdateRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:SSDSDCUpdateRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ssdcds_2eproto;
};
// -------------------------------------------------------------------

class SSDCDSDeleteReq_WhereEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SSDCDSDeleteReq_WhereEntry_DoNotUse, 
    std::string, ::Variant,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SSDCDSDeleteReq_WhereEntry_DoNotUse, 
    std::string, ::Variant,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  SSDCDSDeleteReq_WhereEntry_DoNotUse();
  explicit constexpr SSDCDSDeleteReq_WhereEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit SSDCDSDeleteReq_WhereEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const SSDCDSDeleteReq_WhereEntry_DoNotUse& other);
  static const SSDCDSDeleteReq_WhereEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SSDCDSDeleteReq_WhereEntry_DoNotUse*>(&_SSDCDSDeleteReq_WhereEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "SSDCDSDeleteReq.WhereEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class SSDCDSDeleteReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SSDCDSDeleteReq) */ {
 public:
  inline SSDCDSDeleteReq() : SSDCDSDeleteReq(nullptr) {}
  ~SSDCDSDeleteReq() override;
  explicit constexpr SSDCDSDeleteReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SSDCDSDeleteReq(const SSDCDSDeleteReq& from);
  SSDCDSDeleteReq(SSDCDSDeleteReq&& from) noexcept
    : SSDCDSDeleteReq() {
    *this = ::std::move(from);
  }

  inline SSDCDSDeleteReq& operator=(const SSDCDSDeleteReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSDCDSDeleteReq& operator=(SSDCDSDeleteReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SSDCDSDeleteReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const SSDCDSDeleteReq* internal_default_instance() {
    return reinterpret_cast<const SSDCDSDeleteReq*>(
               &_SSDCDSDeleteReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(SSDCDSDeleteReq& a, SSDCDSDeleteReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SSDCDSDeleteReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SSDCDSDeleteReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SSDCDSDeleteReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SSDCDSDeleteReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SSDCDSDeleteReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SSDCDSDeleteReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSDCDSDeleteReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SSDCDSDeleteReq";
  }
  protected:
  explicit SSDCDSDeleteReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kWhereFieldNumber = 2,
    kTbNameFieldNumber = 1,
  };
  // map<string, .Variant> where = 2;
  int where_size() const;
  private:
  int _internal_where_size() const;
  public:
  void clear_where();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Variant >&
      _internal_where() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Variant >*
      _internal_mutable_where();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Variant >&
      where() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Variant >*
      mutable_where();

  // string tb_name = 1;
  void clear_tb_name();
  const std::string& tb_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tb_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tb_name();
  PROTOBUF_NODISCARD std::string* release_tb_name();
  void set_allocated_tb_name(std::string* tb_name);
  private:
  const std::string& _internal_tb_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tb_name(const std::string& value);
  std::string* _internal_mutable_tb_name();
  public:

  // @@protoc_insertion_point(class_scope:SSDCDSDeleteReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      SSDCDSDeleteReq_WhereEntry_DoNotUse,
      std::string, ::Variant,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> where_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tb_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ssdcds_2eproto;
};
// -------------------------------------------------------------------

class SSDSDCDeleteRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SSDSDCDeleteRsp) */ {
 public:
  inline SSDSDCDeleteRsp() : SSDSDCDeleteRsp(nullptr) {}
  ~SSDSDCDeleteRsp() override;
  explicit constexpr SSDSDCDeleteRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SSDSDCDeleteRsp(const SSDSDCDeleteRsp& from);
  SSDSDCDeleteRsp(SSDSDCDeleteRsp&& from) noexcept
    : SSDSDCDeleteRsp() {
    *this = ::std::move(from);
  }

  inline SSDSDCDeleteRsp& operator=(const SSDSDCDeleteRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSDSDCDeleteRsp& operator=(SSDSDCDeleteRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SSDSDCDeleteRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const SSDSDCDeleteRsp* internal_default_instance() {
    return reinterpret_cast<const SSDSDCDeleteRsp*>(
               &_SSDSDCDeleteRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(SSDSDCDeleteRsp& a, SSDSDCDeleteRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(SSDSDCDeleteRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SSDSDCDeleteRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SSDSDCDeleteRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SSDSDCDeleteRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SSDSDCDeleteRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SSDSDCDeleteRsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSDSDCDeleteRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SSDSDCDeleteRsp";
  }
  protected:
  explicit SSDSDCDeleteRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:SSDSDCDeleteRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ssdcds_2eproto;
};
// -------------------------------------------------------------------

class SSDCDSPkgBody final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SSDCDSPkgBody) */ {
 public:
  inline SSDCDSPkgBody() : SSDCDSPkgBody(nullptr) {}
  ~SSDCDSPkgBody() override;
  explicit constexpr SSDCDSPkgBody(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SSDCDSPkgBody(const SSDCDSPkgBody& from);
  SSDCDSPkgBody(SSDCDSPkgBody&& from) noexcept
    : SSDCDSPkgBody() {
    *this = ::std::move(from);
  }

  inline SSDCDSPkgBody& operator=(const SSDCDSPkgBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSDCDSPkgBody& operator=(SSDCDSPkgBody&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SSDCDSPkgBody& default_instance() {
    return *internal_default_instance();
  }
  enum BodyCase {
    kSelectReq = 1,
    kSelectRsp = 2,
    kInsertReq = 3,
    kInsertRsp = 4,
    kUpdateReq = 5,
    kUpdateRsp = 6,
    kDeleteReq = 7,
    kDeleteRsp = 8,
    BODY_NOT_SET = 0,
  };

  static inline const SSDCDSPkgBody* internal_default_instance() {
    return reinterpret_cast<const SSDCDSPkgBody*>(
               &_SSDCDSPkgBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(SSDCDSPkgBody& a, SSDCDSPkgBody& b) {
    a.Swap(&b);
  }
  inline void Swap(SSDCDSPkgBody* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SSDCDSPkgBody* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SSDCDSPkgBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SSDCDSPkgBody>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SSDCDSPkgBody& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SSDCDSPkgBody& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSDCDSPkgBody* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SSDCDSPkgBody";
  }
  protected:
  explicit SSDCDSPkgBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSelectReqFieldNumber = 1,
    kSelectRspFieldNumber = 2,
    kInsertReqFieldNumber = 3,
    kInsertRspFieldNumber = 4,
    kUpdateReqFieldNumber = 5,
    kUpdateRspFieldNumber = 6,
    kDeleteReqFieldNumber = 7,
    kDeleteRspFieldNumber = 8,
  };
  // .SSDCDSSelectReq select_req = 1;
  bool has_select_req() const;
  private:
  bool _internal_has_select_req() const;
  public:
  void clear_select_req();
  const ::SSDCDSSelectReq& select_req() const;
  PROTOBUF_NODISCARD ::SSDCDSSelectReq* release_select_req();
  ::SSDCDSSelectReq* mutable_select_req();
  void set_allocated_select_req(::SSDCDSSelectReq* select_req);
  private:
  const ::SSDCDSSelectReq& _internal_select_req() const;
  ::SSDCDSSelectReq* _internal_mutable_select_req();
  public:
  void unsafe_arena_set_allocated_select_req(
      ::SSDCDSSelectReq* select_req);
  ::SSDCDSSelectReq* unsafe_arena_release_select_req();

  // .SSDSDCSelectRsp select_rsp = 2;
  bool has_select_rsp() const;
  private:
  bool _internal_has_select_rsp() const;
  public:
  void clear_select_rsp();
  const ::SSDSDCSelectRsp& select_rsp() const;
  PROTOBUF_NODISCARD ::SSDSDCSelectRsp* release_select_rsp();
  ::SSDSDCSelectRsp* mutable_select_rsp();
  void set_allocated_select_rsp(::SSDSDCSelectRsp* select_rsp);
  private:
  const ::SSDSDCSelectRsp& _internal_select_rsp() const;
  ::SSDSDCSelectRsp* _internal_mutable_select_rsp();
  public:
  void unsafe_arena_set_allocated_select_rsp(
      ::SSDSDCSelectRsp* select_rsp);
  ::SSDSDCSelectRsp* unsafe_arena_release_select_rsp();

  // .SSDCDSInsertReq insert_req = 3;
  bool has_insert_req() const;
  private:
  bool _internal_has_insert_req() const;
  public:
  void clear_insert_req();
  const ::SSDCDSInsertReq& insert_req() const;
  PROTOBUF_NODISCARD ::SSDCDSInsertReq* release_insert_req();
  ::SSDCDSInsertReq* mutable_insert_req();
  void set_allocated_insert_req(::SSDCDSInsertReq* insert_req);
  private:
  const ::SSDCDSInsertReq& _internal_insert_req() const;
  ::SSDCDSInsertReq* _internal_mutable_insert_req();
  public:
  void unsafe_arena_set_allocated_insert_req(
      ::SSDCDSInsertReq* insert_req);
  ::SSDCDSInsertReq* unsafe_arena_release_insert_req();

  // .SSDSDCInsertRsp insert_rsp = 4;
  bool has_insert_rsp() const;
  private:
  bool _internal_has_insert_rsp() const;
  public:
  void clear_insert_rsp();
  const ::SSDSDCInsertRsp& insert_rsp() const;
  PROTOBUF_NODISCARD ::SSDSDCInsertRsp* release_insert_rsp();
  ::SSDSDCInsertRsp* mutable_insert_rsp();
  void set_allocated_insert_rsp(::SSDSDCInsertRsp* insert_rsp);
  private:
  const ::SSDSDCInsertRsp& _internal_insert_rsp() const;
  ::SSDSDCInsertRsp* _internal_mutable_insert_rsp();
  public:
  void unsafe_arena_set_allocated_insert_rsp(
      ::SSDSDCInsertRsp* insert_rsp);
  ::SSDSDCInsertRsp* unsafe_arena_release_insert_rsp();

  // .SSDCDSUpdateReq update_req = 5;
  bool has_update_req() const;
  private:
  bool _internal_has_update_req() const;
  public:
  void clear_update_req();
  const ::SSDCDSUpdateReq& update_req() const;
  PROTOBUF_NODISCARD ::SSDCDSUpdateReq* release_update_req();
  ::SSDCDSUpdateReq* mutable_update_req();
  void set_allocated_update_req(::SSDCDSUpdateReq* update_req);
  private:
  const ::SSDCDSUpdateReq& _internal_update_req() const;
  ::SSDCDSUpdateReq* _internal_mutable_update_req();
  public:
  void unsafe_arena_set_allocated_update_req(
      ::SSDCDSUpdateReq* update_req);
  ::SSDCDSUpdateReq* unsafe_arena_release_update_req();

  // .SSDSDCUpdateRsp update_rsp = 6;
  bool has_update_rsp() const;
  private:
  bool _internal_has_update_rsp() const;
  public:
  void clear_update_rsp();
  const ::SSDSDCUpdateRsp& update_rsp() const;
  PROTOBUF_NODISCARD ::SSDSDCUpdateRsp* release_update_rsp();
  ::SSDSDCUpdateRsp* mutable_update_rsp();
  void set_allocated_update_rsp(::SSDSDCUpdateRsp* update_rsp);
  private:
  const ::SSDSDCUpdateRsp& _internal_update_rsp() const;
  ::SSDSDCUpdateRsp* _internal_mutable_update_rsp();
  public:
  void unsafe_arena_set_allocated_update_rsp(
      ::SSDSDCUpdateRsp* update_rsp);
  ::SSDSDCUpdateRsp* unsafe_arena_release_update_rsp();

  // .SSDCDSDeleteReq delete_req = 7;
  bool has_delete_req() const;
  private:
  bool _internal_has_delete_req() const;
  public:
  void clear_delete_req();
  const ::SSDCDSDeleteReq& delete_req() const;
  PROTOBUF_NODISCARD ::SSDCDSDeleteReq* release_delete_req();
  ::SSDCDSDeleteReq* mutable_delete_req();
  void set_allocated_delete_req(::SSDCDSDeleteReq* delete_req);
  private:
  const ::SSDCDSDeleteReq& _internal_delete_req() const;
  ::SSDCDSDeleteReq* _internal_mutable_delete_req();
  public:
  void unsafe_arena_set_allocated_delete_req(
      ::SSDCDSDeleteReq* delete_req);
  ::SSDCDSDeleteReq* unsafe_arena_release_delete_req();

  // .SSDSDCDeleteRsp delete_rsp = 8;
  bool has_delete_rsp() const;
  private:
  bool _internal_has_delete_rsp() const;
  public:
  void clear_delete_rsp();
  const ::SSDSDCDeleteRsp& delete_rsp() const;
  PROTOBUF_NODISCARD ::SSDSDCDeleteRsp* release_delete_rsp();
  ::SSDSDCDeleteRsp* mutable_delete_rsp();
  void set_allocated_delete_rsp(::SSDSDCDeleteRsp* delete_rsp);
  private:
  const ::SSDSDCDeleteRsp& _internal_delete_rsp() const;
  ::SSDSDCDeleteRsp* _internal_mutable_delete_rsp();
  public:
  void unsafe_arena_set_allocated_delete_rsp(
      ::SSDSDCDeleteRsp* delete_rsp);
  ::SSDSDCDeleteRsp* unsafe_arena_release_delete_rsp();

  void clear_body();
  BodyCase body_case() const;
  // @@protoc_insertion_point(class_scope:SSDCDSPkgBody)
 private:
  class _Internal;
  void set_has_select_req();
  void set_has_select_rsp();
  void set_has_insert_req();
  void set_has_insert_rsp();
  void set_has_update_req();
  void set_has_update_rsp();
  void set_has_delete_req();
  void set_has_delete_rsp();

  inline bool has_body() const;
  inline void clear_has_body();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union BodyUnion {
    constexpr BodyUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::SSDCDSSelectReq* select_req_;
    ::SSDSDCSelectRsp* select_rsp_;
    ::SSDCDSInsertReq* insert_req_;
    ::SSDSDCInsertRsp* insert_rsp_;
    ::SSDCDSUpdateReq* update_req_;
    ::SSDSDCUpdateRsp* update_rsp_;
    ::SSDCDSDeleteReq* delete_req_;
    ::SSDSDCDeleteRsp* delete_rsp_;
  } body_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_ssdcds_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// SSDCDSSelectReq

// string tb_name = 1;
inline void SSDCDSSelectReq::clear_tb_name() {
  tb_name_.ClearToEmpty();
}
inline const std::string& SSDCDSSelectReq::tb_name() const {
  // @@protoc_insertion_point(field_get:SSDCDSSelectReq.tb_name)
  return _internal_tb_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SSDCDSSelectReq::set_tb_name(ArgT0&& arg0, ArgT... args) {
 
 tb_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SSDCDSSelectReq.tb_name)
}
inline std::string* SSDCDSSelectReq::mutable_tb_name() {
  std::string* _s = _internal_mutable_tb_name();
  // @@protoc_insertion_point(field_mutable:SSDCDSSelectReq.tb_name)
  return _s;
}
inline const std::string& SSDCDSSelectReq::_internal_tb_name() const {
  return tb_name_.Get();
}
inline void SSDCDSSelectReq::_internal_set_tb_name(const std::string& value) {
  
  tb_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SSDCDSSelectReq::_internal_mutable_tb_name() {
  
  return tb_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SSDCDSSelectReq::release_tb_name() {
  // @@protoc_insertion_point(field_release:SSDCDSSelectReq.tb_name)
  return tb_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SSDCDSSelectReq::set_allocated_tb_name(std::string* tb_name) {
  if (tb_name != nullptr) {
    
  } else {
    
  }
  tb_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tb_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (tb_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    tb_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SSDCDSSelectReq.tb_name)
}

// repeated string column = 2;
inline int SSDCDSSelectReq::_internal_column_size() const {
  return column_.size();
}
inline int SSDCDSSelectReq::column_size() const {
  return _internal_column_size();
}
inline void SSDCDSSelectReq::clear_column() {
  column_.Clear();
}
inline std::string* SSDCDSSelectReq::add_column() {
  std::string* _s = _internal_add_column();
  // @@protoc_insertion_point(field_add_mutable:SSDCDSSelectReq.column)
  return _s;
}
inline const std::string& SSDCDSSelectReq::_internal_column(int index) const {
  return column_.Get(index);
}
inline const std::string& SSDCDSSelectReq::column(int index) const {
  // @@protoc_insertion_point(field_get:SSDCDSSelectReq.column)
  return _internal_column(index);
}
inline std::string* SSDCDSSelectReq::mutable_column(int index) {
  // @@protoc_insertion_point(field_mutable:SSDCDSSelectReq.column)
  return column_.Mutable(index);
}
inline void SSDCDSSelectReq::set_column(int index, const std::string& value) {
  column_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:SSDCDSSelectReq.column)
}
inline void SSDCDSSelectReq::set_column(int index, std::string&& value) {
  column_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:SSDCDSSelectReq.column)
}
inline void SSDCDSSelectReq::set_column(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  column_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SSDCDSSelectReq.column)
}
inline void SSDCDSSelectReq::set_column(int index, const char* value, size_t size) {
  column_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SSDCDSSelectReq.column)
}
inline std::string* SSDCDSSelectReq::_internal_add_column() {
  return column_.Add();
}
inline void SSDCDSSelectReq::add_column(const std::string& value) {
  column_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SSDCDSSelectReq.column)
}
inline void SSDCDSSelectReq::add_column(std::string&& value) {
  column_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:SSDCDSSelectReq.column)
}
inline void SSDCDSSelectReq::add_column(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  column_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SSDCDSSelectReq.column)
}
inline void SSDCDSSelectReq::add_column(const char* value, size_t size) {
  column_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SSDCDSSelectReq.column)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SSDCDSSelectReq::column() const {
  // @@protoc_insertion_point(field_list:SSDCDSSelectReq.column)
  return column_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SSDCDSSelectReq::mutable_column() {
  // @@protoc_insertion_point(field_mutable_list:SSDCDSSelectReq.column)
  return &column_;
}

// map<string, .Variant> where = 3;
inline int SSDCDSSelectReq::_internal_where_size() const {
  return where_.size();
}
inline int SSDCDSSelectReq::where_size() const {
  return _internal_where_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Variant >&
SSDCDSSelectReq::_internal_where() const {
  return where_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Variant >&
SSDCDSSelectReq::where() const {
  // @@protoc_insertion_point(field_map:SSDCDSSelectReq.where)
  return _internal_where();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Variant >*
SSDCDSSelectReq::_internal_mutable_where() {
  return where_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Variant >*
SSDCDSSelectReq::mutable_where() {
  // @@protoc_insertion_point(field_mutable_map:SSDCDSSelectReq.where)
  return _internal_mutable_where();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// SSDSDCSelectRsp_VariantMap

// map<string, .Variant> value = 1;
inline int SSDSDCSelectRsp_VariantMap::_internal_value_size() const {
  return value_.size();
}
inline int SSDSDCSelectRsp_VariantMap::value_size() const {
  return _internal_value_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Variant >&
SSDSDCSelectRsp_VariantMap::_internal_value() const {
  return value_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Variant >&
SSDSDCSelectRsp_VariantMap::value() const {
  // @@protoc_insertion_point(field_map:SSDSDCSelectRsp.VariantMap.value)
  return _internal_value();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Variant >*
SSDSDCSelectRsp_VariantMap::_internal_mutable_value() {
  return value_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Variant >*
SSDSDCSelectRsp_VariantMap::mutable_value() {
  // @@protoc_insertion_point(field_mutable_map:SSDSDCSelectRsp.VariantMap.value)
  return _internal_mutable_value();
}

// -------------------------------------------------------------------

// SSDSDCSelectRsp

// repeated .SSDSDCSelectRsp.VariantMap result = 1;
inline int SSDSDCSelectRsp::_internal_result_size() const {
  return result_.size();
}
inline int SSDSDCSelectRsp::result_size() const {
  return _internal_result_size();
}
inline void SSDSDCSelectRsp::clear_result() {
  result_.Clear();
}
inline ::SSDSDCSelectRsp_VariantMap* SSDSDCSelectRsp::mutable_result(int index) {
  // @@protoc_insertion_point(field_mutable:SSDSDCSelectRsp.result)
  return result_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SSDSDCSelectRsp_VariantMap >*
SSDSDCSelectRsp::mutable_result() {
  // @@protoc_insertion_point(field_mutable_list:SSDSDCSelectRsp.result)
  return &result_;
}
inline const ::SSDSDCSelectRsp_VariantMap& SSDSDCSelectRsp::_internal_result(int index) const {
  return result_.Get(index);
}
inline const ::SSDSDCSelectRsp_VariantMap& SSDSDCSelectRsp::result(int index) const {
  // @@protoc_insertion_point(field_get:SSDSDCSelectRsp.result)
  return _internal_result(index);
}
inline ::SSDSDCSelectRsp_VariantMap* SSDSDCSelectRsp::_internal_add_result() {
  return result_.Add();
}
inline ::SSDSDCSelectRsp_VariantMap* SSDSDCSelectRsp::add_result() {
  ::SSDSDCSelectRsp_VariantMap* _add = _internal_add_result();
  // @@protoc_insertion_point(field_add:SSDSDCSelectRsp.result)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SSDSDCSelectRsp_VariantMap >&
SSDSDCSelectRsp::result() const {
  // @@protoc_insertion_point(field_list:SSDSDCSelectRsp.result)
  return result_;
}

// -------------------------------------------------------------------

// SSDCDSInsertReq

// string tb_name = 1;
inline void SSDCDSInsertReq::clear_tb_name() {
  tb_name_.ClearToEmpty();
}
inline const std::string& SSDCDSInsertReq::tb_name() const {
  // @@protoc_insertion_point(field_get:SSDCDSInsertReq.tb_name)
  return _internal_tb_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SSDCDSInsertReq::set_tb_name(ArgT0&& arg0, ArgT... args) {
 
 tb_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SSDCDSInsertReq.tb_name)
}
inline std::string* SSDCDSInsertReq::mutable_tb_name() {
  std::string* _s = _internal_mutable_tb_name();
  // @@protoc_insertion_point(field_mutable:SSDCDSInsertReq.tb_name)
  return _s;
}
inline const std::string& SSDCDSInsertReq::_internal_tb_name() const {
  return tb_name_.Get();
}
inline void SSDCDSInsertReq::_internal_set_tb_name(const std::string& value) {
  
  tb_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SSDCDSInsertReq::_internal_mutable_tb_name() {
  
  return tb_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SSDCDSInsertReq::release_tb_name() {
  // @@protoc_insertion_point(field_release:SSDCDSInsertReq.tb_name)
  return tb_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SSDCDSInsertReq::set_allocated_tb_name(std::string* tb_name) {
  if (tb_name != nullptr) {
    
  } else {
    
  }
  tb_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tb_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (tb_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    tb_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SSDCDSInsertReq.tb_name)
}

// repeated string column = 2;
inline int SSDCDSInsertReq::_internal_column_size() const {
  return column_.size();
}
inline int SSDCDSInsertReq::column_size() const {
  return _internal_column_size();
}
inline void SSDCDSInsertReq::clear_column() {
  column_.Clear();
}
inline std::string* SSDCDSInsertReq::add_column() {
  std::string* _s = _internal_add_column();
  // @@protoc_insertion_point(field_add_mutable:SSDCDSInsertReq.column)
  return _s;
}
inline const std::string& SSDCDSInsertReq::_internal_column(int index) const {
  return column_.Get(index);
}
inline const std::string& SSDCDSInsertReq::column(int index) const {
  // @@protoc_insertion_point(field_get:SSDCDSInsertReq.column)
  return _internal_column(index);
}
inline std::string* SSDCDSInsertReq::mutable_column(int index) {
  // @@protoc_insertion_point(field_mutable:SSDCDSInsertReq.column)
  return column_.Mutable(index);
}
inline void SSDCDSInsertReq::set_column(int index, const std::string& value) {
  column_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:SSDCDSInsertReq.column)
}
inline void SSDCDSInsertReq::set_column(int index, std::string&& value) {
  column_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:SSDCDSInsertReq.column)
}
inline void SSDCDSInsertReq::set_column(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  column_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SSDCDSInsertReq.column)
}
inline void SSDCDSInsertReq::set_column(int index, const char* value, size_t size) {
  column_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SSDCDSInsertReq.column)
}
inline std::string* SSDCDSInsertReq::_internal_add_column() {
  return column_.Add();
}
inline void SSDCDSInsertReq::add_column(const std::string& value) {
  column_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SSDCDSInsertReq.column)
}
inline void SSDCDSInsertReq::add_column(std::string&& value) {
  column_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:SSDCDSInsertReq.column)
}
inline void SSDCDSInsertReq::add_column(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  column_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SSDCDSInsertReq.column)
}
inline void SSDCDSInsertReq::add_column(const char* value, size_t size) {
  column_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SSDCDSInsertReq.column)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SSDCDSInsertReq::column() const {
  // @@protoc_insertion_point(field_list:SSDCDSInsertReq.column)
  return column_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SSDCDSInsertReq::mutable_column() {
  // @@protoc_insertion_point(field_mutable_list:SSDCDSInsertReq.column)
  return &column_;
}

// repeated .Variant value = 3;
inline int SSDCDSInsertReq::_internal_value_size() const {
  return value_.size();
}
inline int SSDCDSInsertReq::value_size() const {
  return _internal_value_size();
}
inline ::Variant* SSDCDSInsertReq::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:SSDCDSInsertReq.value)
  return value_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Variant >*
SSDCDSInsertReq::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:SSDCDSInsertReq.value)
  return &value_;
}
inline const ::Variant& SSDCDSInsertReq::_internal_value(int index) const {
  return value_.Get(index);
}
inline const ::Variant& SSDCDSInsertReq::value(int index) const {
  // @@protoc_insertion_point(field_get:SSDCDSInsertReq.value)
  return _internal_value(index);
}
inline ::Variant* SSDCDSInsertReq::_internal_add_value() {
  return value_.Add();
}
inline ::Variant* SSDCDSInsertReq::add_value() {
  ::Variant* _add = _internal_add_value();
  // @@protoc_insertion_point(field_add:SSDCDSInsertReq.value)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Variant >&
SSDCDSInsertReq::value() const {
  // @@protoc_insertion_point(field_list:SSDCDSInsertReq.value)
  return value_;
}

// -------------------------------------------------------------------

// SSDSDCInsertRsp

// bool result = 1;
inline void SSDSDCInsertRsp::clear_result() {
  result_ = false;
}
inline bool SSDSDCInsertRsp::_internal_result() const {
  return result_;
}
inline bool SSDSDCInsertRsp::result() const {
  // @@protoc_insertion_point(field_get:SSDSDCInsertRsp.result)
  return _internal_result();
}
inline void SSDSDCInsertRsp::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void SSDSDCInsertRsp::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:SSDSDCInsertRsp.result)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// SSDCDSUpdateReq

// string tb_name = 1;
inline void SSDCDSUpdateReq::clear_tb_name() {
  tb_name_.ClearToEmpty();
}
inline const std::string& SSDCDSUpdateReq::tb_name() const {
  // @@protoc_insertion_point(field_get:SSDCDSUpdateReq.tb_name)
  return _internal_tb_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SSDCDSUpdateReq::set_tb_name(ArgT0&& arg0, ArgT... args) {
 
 tb_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SSDCDSUpdateReq.tb_name)
}
inline std::string* SSDCDSUpdateReq::mutable_tb_name() {
  std::string* _s = _internal_mutable_tb_name();
  // @@protoc_insertion_point(field_mutable:SSDCDSUpdateReq.tb_name)
  return _s;
}
inline const std::string& SSDCDSUpdateReq::_internal_tb_name() const {
  return tb_name_.Get();
}
inline void SSDCDSUpdateReq::_internal_set_tb_name(const std::string& value) {
  
  tb_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SSDCDSUpdateReq::_internal_mutable_tb_name() {
  
  return tb_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SSDCDSUpdateReq::release_tb_name() {
  // @@protoc_insertion_point(field_release:SSDCDSUpdateReq.tb_name)
  return tb_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SSDCDSUpdateReq::set_allocated_tb_name(std::string* tb_name) {
  if (tb_name != nullptr) {
    
  } else {
    
  }
  tb_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tb_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (tb_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    tb_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SSDCDSUpdateReq.tb_name)
}

// map<string, .Variant> value = 2;
inline int SSDCDSUpdateReq::_internal_value_size() const {
  return value_.size();
}
inline int SSDCDSUpdateReq::value_size() const {
  return _internal_value_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Variant >&
SSDCDSUpdateReq::_internal_value() const {
  return value_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Variant >&
SSDCDSUpdateReq::value() const {
  // @@protoc_insertion_point(field_map:SSDCDSUpdateReq.value)
  return _internal_value();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Variant >*
SSDCDSUpdateReq::_internal_mutable_value() {
  return value_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Variant >*
SSDCDSUpdateReq::mutable_value() {
  // @@protoc_insertion_point(field_mutable_map:SSDCDSUpdateReq.value)
  return _internal_mutable_value();
}

// map<string, .Variant> where = 3;
inline int SSDCDSUpdateReq::_internal_where_size() const {
  return where_.size();
}
inline int SSDCDSUpdateReq::where_size() const {
  return _internal_where_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Variant >&
SSDCDSUpdateReq::_internal_where() const {
  return where_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Variant >&
SSDCDSUpdateReq::where() const {
  // @@protoc_insertion_point(field_map:SSDCDSUpdateReq.where)
  return _internal_where();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Variant >*
SSDCDSUpdateReq::_internal_mutable_where() {
  return where_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Variant >*
SSDCDSUpdateReq::mutable_where() {
  // @@protoc_insertion_point(field_mutable_map:SSDCDSUpdateReq.where)
  return _internal_mutable_where();
}

// -------------------------------------------------------------------

// SSDSDCUpdateRsp

// bool result = 1;
inline void SSDSDCUpdateRsp::clear_result() {
  result_ = false;
}
inline bool SSDSDCUpdateRsp::_internal_result() const {
  return result_;
}
inline bool SSDSDCUpdateRsp::result() const {
  // @@protoc_insertion_point(field_get:SSDSDCUpdateRsp.result)
  return _internal_result();
}
inline void SSDSDCUpdateRsp::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void SSDSDCUpdateRsp::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:SSDSDCUpdateRsp.result)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// SSDCDSDeleteReq

// string tb_name = 1;
inline void SSDCDSDeleteReq::clear_tb_name() {
  tb_name_.ClearToEmpty();
}
inline const std::string& SSDCDSDeleteReq::tb_name() const {
  // @@protoc_insertion_point(field_get:SSDCDSDeleteReq.tb_name)
  return _internal_tb_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SSDCDSDeleteReq::set_tb_name(ArgT0&& arg0, ArgT... args) {
 
 tb_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SSDCDSDeleteReq.tb_name)
}
inline std::string* SSDCDSDeleteReq::mutable_tb_name() {
  std::string* _s = _internal_mutable_tb_name();
  // @@protoc_insertion_point(field_mutable:SSDCDSDeleteReq.tb_name)
  return _s;
}
inline const std::string& SSDCDSDeleteReq::_internal_tb_name() const {
  return tb_name_.Get();
}
inline void SSDCDSDeleteReq::_internal_set_tb_name(const std::string& value) {
  
  tb_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SSDCDSDeleteReq::_internal_mutable_tb_name() {
  
  return tb_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SSDCDSDeleteReq::release_tb_name() {
  // @@protoc_insertion_point(field_release:SSDCDSDeleteReq.tb_name)
  return tb_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SSDCDSDeleteReq::set_allocated_tb_name(std::string* tb_name) {
  if (tb_name != nullptr) {
    
  } else {
    
  }
  tb_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tb_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (tb_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    tb_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SSDCDSDeleteReq.tb_name)
}

// map<string, .Variant> where = 2;
inline int SSDCDSDeleteReq::_internal_where_size() const {
  return where_.size();
}
inline int SSDCDSDeleteReq::where_size() const {
  return _internal_where_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Variant >&
SSDCDSDeleteReq::_internal_where() const {
  return where_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Variant >&
SSDCDSDeleteReq::where() const {
  // @@protoc_insertion_point(field_map:SSDCDSDeleteReq.where)
  return _internal_where();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Variant >*
SSDCDSDeleteReq::_internal_mutable_where() {
  return where_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Variant >*
SSDCDSDeleteReq::mutable_where() {
  // @@protoc_insertion_point(field_mutable_map:SSDCDSDeleteReq.where)
  return _internal_mutable_where();
}

// -------------------------------------------------------------------

// SSDSDCDeleteRsp

// bool result = 1;
inline void SSDSDCDeleteRsp::clear_result() {
  result_ = false;
}
inline bool SSDSDCDeleteRsp::_internal_result() const {
  return result_;
}
inline bool SSDSDCDeleteRsp::result() const {
  // @@protoc_insertion_point(field_get:SSDSDCDeleteRsp.result)
  return _internal_result();
}
inline void SSDSDCDeleteRsp::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void SSDSDCDeleteRsp::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:SSDSDCDeleteRsp.result)
}

// -------------------------------------------------------------------

// SSDCDSPkgBody

// .SSDCDSSelectReq select_req = 1;
inline bool SSDCDSPkgBody::_internal_has_select_req() const {
  return body_case() == kSelectReq;
}
inline bool SSDCDSPkgBody::has_select_req() const {
  return _internal_has_select_req();
}
inline void SSDCDSPkgBody::set_has_select_req() {
  _oneof_case_[0] = kSelectReq;
}
inline void SSDCDSPkgBody::clear_select_req() {
  if (_internal_has_select_req()) {
    if (GetArenaForAllocation() == nullptr) {
      delete body_.select_req_;
    }
    clear_has_body();
  }
}
inline ::SSDCDSSelectReq* SSDCDSPkgBody::release_select_req() {
  // @@protoc_insertion_point(field_release:SSDCDSPkgBody.select_req)
  if (_internal_has_select_req()) {
    clear_has_body();
      ::SSDCDSSelectReq* temp = body_.select_req_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    body_.select_req_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::SSDCDSSelectReq& SSDCDSPkgBody::_internal_select_req() const {
  return _internal_has_select_req()
      ? *body_.select_req_
      : reinterpret_cast< ::SSDCDSSelectReq&>(::_SSDCDSSelectReq_default_instance_);
}
inline const ::SSDCDSSelectReq& SSDCDSPkgBody::select_req() const {
  // @@protoc_insertion_point(field_get:SSDCDSPkgBody.select_req)
  return _internal_select_req();
}
inline ::SSDCDSSelectReq* SSDCDSPkgBody::unsafe_arena_release_select_req() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SSDCDSPkgBody.select_req)
  if (_internal_has_select_req()) {
    clear_has_body();
    ::SSDCDSSelectReq* temp = body_.select_req_;
    body_.select_req_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SSDCDSPkgBody::unsafe_arena_set_allocated_select_req(::SSDCDSSelectReq* select_req) {
  clear_body();
  if (select_req) {
    set_has_select_req();
    body_.select_req_ = select_req;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SSDCDSPkgBody.select_req)
}
inline ::SSDCDSSelectReq* SSDCDSPkgBody::_internal_mutable_select_req() {
  if (!_internal_has_select_req()) {
    clear_body();
    set_has_select_req();
    body_.select_req_ = CreateMaybeMessage< ::SSDCDSSelectReq >(GetArenaForAllocation());
  }
  return body_.select_req_;
}
inline ::SSDCDSSelectReq* SSDCDSPkgBody::mutable_select_req() {
  ::SSDCDSSelectReq* _msg = _internal_mutable_select_req();
  // @@protoc_insertion_point(field_mutable:SSDCDSPkgBody.select_req)
  return _msg;
}

// .SSDSDCSelectRsp select_rsp = 2;
inline bool SSDCDSPkgBody::_internal_has_select_rsp() const {
  return body_case() == kSelectRsp;
}
inline bool SSDCDSPkgBody::has_select_rsp() const {
  return _internal_has_select_rsp();
}
inline void SSDCDSPkgBody::set_has_select_rsp() {
  _oneof_case_[0] = kSelectRsp;
}
inline void SSDCDSPkgBody::clear_select_rsp() {
  if (_internal_has_select_rsp()) {
    if (GetArenaForAllocation() == nullptr) {
      delete body_.select_rsp_;
    }
    clear_has_body();
  }
}
inline ::SSDSDCSelectRsp* SSDCDSPkgBody::release_select_rsp() {
  // @@protoc_insertion_point(field_release:SSDCDSPkgBody.select_rsp)
  if (_internal_has_select_rsp()) {
    clear_has_body();
      ::SSDSDCSelectRsp* temp = body_.select_rsp_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    body_.select_rsp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::SSDSDCSelectRsp& SSDCDSPkgBody::_internal_select_rsp() const {
  return _internal_has_select_rsp()
      ? *body_.select_rsp_
      : reinterpret_cast< ::SSDSDCSelectRsp&>(::_SSDSDCSelectRsp_default_instance_);
}
inline const ::SSDSDCSelectRsp& SSDCDSPkgBody::select_rsp() const {
  // @@protoc_insertion_point(field_get:SSDCDSPkgBody.select_rsp)
  return _internal_select_rsp();
}
inline ::SSDSDCSelectRsp* SSDCDSPkgBody::unsafe_arena_release_select_rsp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SSDCDSPkgBody.select_rsp)
  if (_internal_has_select_rsp()) {
    clear_has_body();
    ::SSDSDCSelectRsp* temp = body_.select_rsp_;
    body_.select_rsp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SSDCDSPkgBody::unsafe_arena_set_allocated_select_rsp(::SSDSDCSelectRsp* select_rsp) {
  clear_body();
  if (select_rsp) {
    set_has_select_rsp();
    body_.select_rsp_ = select_rsp;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SSDCDSPkgBody.select_rsp)
}
inline ::SSDSDCSelectRsp* SSDCDSPkgBody::_internal_mutable_select_rsp() {
  if (!_internal_has_select_rsp()) {
    clear_body();
    set_has_select_rsp();
    body_.select_rsp_ = CreateMaybeMessage< ::SSDSDCSelectRsp >(GetArenaForAllocation());
  }
  return body_.select_rsp_;
}
inline ::SSDSDCSelectRsp* SSDCDSPkgBody::mutable_select_rsp() {
  ::SSDSDCSelectRsp* _msg = _internal_mutable_select_rsp();
  // @@protoc_insertion_point(field_mutable:SSDCDSPkgBody.select_rsp)
  return _msg;
}

// .SSDCDSInsertReq insert_req = 3;
inline bool SSDCDSPkgBody::_internal_has_insert_req() const {
  return body_case() == kInsertReq;
}
inline bool SSDCDSPkgBody::has_insert_req() const {
  return _internal_has_insert_req();
}
inline void SSDCDSPkgBody::set_has_insert_req() {
  _oneof_case_[0] = kInsertReq;
}
inline void SSDCDSPkgBody::clear_insert_req() {
  if (_internal_has_insert_req()) {
    if (GetArenaForAllocation() == nullptr) {
      delete body_.insert_req_;
    }
    clear_has_body();
  }
}
inline ::SSDCDSInsertReq* SSDCDSPkgBody::release_insert_req() {
  // @@protoc_insertion_point(field_release:SSDCDSPkgBody.insert_req)
  if (_internal_has_insert_req()) {
    clear_has_body();
      ::SSDCDSInsertReq* temp = body_.insert_req_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    body_.insert_req_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::SSDCDSInsertReq& SSDCDSPkgBody::_internal_insert_req() const {
  return _internal_has_insert_req()
      ? *body_.insert_req_
      : reinterpret_cast< ::SSDCDSInsertReq&>(::_SSDCDSInsertReq_default_instance_);
}
inline const ::SSDCDSInsertReq& SSDCDSPkgBody::insert_req() const {
  // @@protoc_insertion_point(field_get:SSDCDSPkgBody.insert_req)
  return _internal_insert_req();
}
inline ::SSDCDSInsertReq* SSDCDSPkgBody::unsafe_arena_release_insert_req() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SSDCDSPkgBody.insert_req)
  if (_internal_has_insert_req()) {
    clear_has_body();
    ::SSDCDSInsertReq* temp = body_.insert_req_;
    body_.insert_req_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SSDCDSPkgBody::unsafe_arena_set_allocated_insert_req(::SSDCDSInsertReq* insert_req) {
  clear_body();
  if (insert_req) {
    set_has_insert_req();
    body_.insert_req_ = insert_req;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SSDCDSPkgBody.insert_req)
}
inline ::SSDCDSInsertReq* SSDCDSPkgBody::_internal_mutable_insert_req() {
  if (!_internal_has_insert_req()) {
    clear_body();
    set_has_insert_req();
    body_.insert_req_ = CreateMaybeMessage< ::SSDCDSInsertReq >(GetArenaForAllocation());
  }
  return body_.insert_req_;
}
inline ::SSDCDSInsertReq* SSDCDSPkgBody::mutable_insert_req() {
  ::SSDCDSInsertReq* _msg = _internal_mutable_insert_req();
  // @@protoc_insertion_point(field_mutable:SSDCDSPkgBody.insert_req)
  return _msg;
}

// .SSDSDCInsertRsp insert_rsp = 4;
inline bool SSDCDSPkgBody::_internal_has_insert_rsp() const {
  return body_case() == kInsertRsp;
}
inline bool SSDCDSPkgBody::has_insert_rsp() const {
  return _internal_has_insert_rsp();
}
inline void SSDCDSPkgBody::set_has_insert_rsp() {
  _oneof_case_[0] = kInsertRsp;
}
inline void SSDCDSPkgBody::clear_insert_rsp() {
  if (_internal_has_insert_rsp()) {
    if (GetArenaForAllocation() == nullptr) {
      delete body_.insert_rsp_;
    }
    clear_has_body();
  }
}
inline ::SSDSDCInsertRsp* SSDCDSPkgBody::release_insert_rsp() {
  // @@protoc_insertion_point(field_release:SSDCDSPkgBody.insert_rsp)
  if (_internal_has_insert_rsp()) {
    clear_has_body();
      ::SSDSDCInsertRsp* temp = body_.insert_rsp_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    body_.insert_rsp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::SSDSDCInsertRsp& SSDCDSPkgBody::_internal_insert_rsp() const {
  return _internal_has_insert_rsp()
      ? *body_.insert_rsp_
      : reinterpret_cast< ::SSDSDCInsertRsp&>(::_SSDSDCInsertRsp_default_instance_);
}
inline const ::SSDSDCInsertRsp& SSDCDSPkgBody::insert_rsp() const {
  // @@protoc_insertion_point(field_get:SSDCDSPkgBody.insert_rsp)
  return _internal_insert_rsp();
}
inline ::SSDSDCInsertRsp* SSDCDSPkgBody::unsafe_arena_release_insert_rsp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SSDCDSPkgBody.insert_rsp)
  if (_internal_has_insert_rsp()) {
    clear_has_body();
    ::SSDSDCInsertRsp* temp = body_.insert_rsp_;
    body_.insert_rsp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SSDCDSPkgBody::unsafe_arena_set_allocated_insert_rsp(::SSDSDCInsertRsp* insert_rsp) {
  clear_body();
  if (insert_rsp) {
    set_has_insert_rsp();
    body_.insert_rsp_ = insert_rsp;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SSDCDSPkgBody.insert_rsp)
}
inline ::SSDSDCInsertRsp* SSDCDSPkgBody::_internal_mutable_insert_rsp() {
  if (!_internal_has_insert_rsp()) {
    clear_body();
    set_has_insert_rsp();
    body_.insert_rsp_ = CreateMaybeMessage< ::SSDSDCInsertRsp >(GetArenaForAllocation());
  }
  return body_.insert_rsp_;
}
inline ::SSDSDCInsertRsp* SSDCDSPkgBody::mutable_insert_rsp() {
  ::SSDSDCInsertRsp* _msg = _internal_mutable_insert_rsp();
  // @@protoc_insertion_point(field_mutable:SSDCDSPkgBody.insert_rsp)
  return _msg;
}

// .SSDCDSUpdateReq update_req = 5;
inline bool SSDCDSPkgBody::_internal_has_update_req() const {
  return body_case() == kUpdateReq;
}
inline bool SSDCDSPkgBody::has_update_req() const {
  return _internal_has_update_req();
}
inline void SSDCDSPkgBody::set_has_update_req() {
  _oneof_case_[0] = kUpdateReq;
}
inline void SSDCDSPkgBody::clear_update_req() {
  if (_internal_has_update_req()) {
    if (GetArenaForAllocation() == nullptr) {
      delete body_.update_req_;
    }
    clear_has_body();
  }
}
inline ::SSDCDSUpdateReq* SSDCDSPkgBody::release_update_req() {
  // @@protoc_insertion_point(field_release:SSDCDSPkgBody.update_req)
  if (_internal_has_update_req()) {
    clear_has_body();
      ::SSDCDSUpdateReq* temp = body_.update_req_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    body_.update_req_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::SSDCDSUpdateReq& SSDCDSPkgBody::_internal_update_req() const {
  return _internal_has_update_req()
      ? *body_.update_req_
      : reinterpret_cast< ::SSDCDSUpdateReq&>(::_SSDCDSUpdateReq_default_instance_);
}
inline const ::SSDCDSUpdateReq& SSDCDSPkgBody::update_req() const {
  // @@protoc_insertion_point(field_get:SSDCDSPkgBody.update_req)
  return _internal_update_req();
}
inline ::SSDCDSUpdateReq* SSDCDSPkgBody::unsafe_arena_release_update_req() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SSDCDSPkgBody.update_req)
  if (_internal_has_update_req()) {
    clear_has_body();
    ::SSDCDSUpdateReq* temp = body_.update_req_;
    body_.update_req_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SSDCDSPkgBody::unsafe_arena_set_allocated_update_req(::SSDCDSUpdateReq* update_req) {
  clear_body();
  if (update_req) {
    set_has_update_req();
    body_.update_req_ = update_req;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SSDCDSPkgBody.update_req)
}
inline ::SSDCDSUpdateReq* SSDCDSPkgBody::_internal_mutable_update_req() {
  if (!_internal_has_update_req()) {
    clear_body();
    set_has_update_req();
    body_.update_req_ = CreateMaybeMessage< ::SSDCDSUpdateReq >(GetArenaForAllocation());
  }
  return body_.update_req_;
}
inline ::SSDCDSUpdateReq* SSDCDSPkgBody::mutable_update_req() {
  ::SSDCDSUpdateReq* _msg = _internal_mutable_update_req();
  // @@protoc_insertion_point(field_mutable:SSDCDSPkgBody.update_req)
  return _msg;
}

// .SSDSDCUpdateRsp update_rsp = 6;
inline bool SSDCDSPkgBody::_internal_has_update_rsp() const {
  return body_case() == kUpdateRsp;
}
inline bool SSDCDSPkgBody::has_update_rsp() const {
  return _internal_has_update_rsp();
}
inline void SSDCDSPkgBody::set_has_update_rsp() {
  _oneof_case_[0] = kUpdateRsp;
}
inline void SSDCDSPkgBody::clear_update_rsp() {
  if (_internal_has_update_rsp()) {
    if (GetArenaForAllocation() == nullptr) {
      delete body_.update_rsp_;
    }
    clear_has_body();
  }
}
inline ::SSDSDCUpdateRsp* SSDCDSPkgBody::release_update_rsp() {
  // @@protoc_insertion_point(field_release:SSDCDSPkgBody.update_rsp)
  if (_internal_has_update_rsp()) {
    clear_has_body();
      ::SSDSDCUpdateRsp* temp = body_.update_rsp_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    body_.update_rsp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::SSDSDCUpdateRsp& SSDCDSPkgBody::_internal_update_rsp() const {
  return _internal_has_update_rsp()
      ? *body_.update_rsp_
      : reinterpret_cast< ::SSDSDCUpdateRsp&>(::_SSDSDCUpdateRsp_default_instance_);
}
inline const ::SSDSDCUpdateRsp& SSDCDSPkgBody::update_rsp() const {
  // @@protoc_insertion_point(field_get:SSDCDSPkgBody.update_rsp)
  return _internal_update_rsp();
}
inline ::SSDSDCUpdateRsp* SSDCDSPkgBody::unsafe_arena_release_update_rsp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SSDCDSPkgBody.update_rsp)
  if (_internal_has_update_rsp()) {
    clear_has_body();
    ::SSDSDCUpdateRsp* temp = body_.update_rsp_;
    body_.update_rsp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SSDCDSPkgBody::unsafe_arena_set_allocated_update_rsp(::SSDSDCUpdateRsp* update_rsp) {
  clear_body();
  if (update_rsp) {
    set_has_update_rsp();
    body_.update_rsp_ = update_rsp;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SSDCDSPkgBody.update_rsp)
}
inline ::SSDSDCUpdateRsp* SSDCDSPkgBody::_internal_mutable_update_rsp() {
  if (!_internal_has_update_rsp()) {
    clear_body();
    set_has_update_rsp();
    body_.update_rsp_ = CreateMaybeMessage< ::SSDSDCUpdateRsp >(GetArenaForAllocation());
  }
  return body_.update_rsp_;
}
inline ::SSDSDCUpdateRsp* SSDCDSPkgBody::mutable_update_rsp() {
  ::SSDSDCUpdateRsp* _msg = _internal_mutable_update_rsp();
  // @@protoc_insertion_point(field_mutable:SSDCDSPkgBody.update_rsp)
  return _msg;
}

// .SSDCDSDeleteReq delete_req = 7;
inline bool SSDCDSPkgBody::_internal_has_delete_req() const {
  return body_case() == kDeleteReq;
}
inline bool SSDCDSPkgBody::has_delete_req() const {
  return _internal_has_delete_req();
}
inline void SSDCDSPkgBody::set_has_delete_req() {
  _oneof_case_[0] = kDeleteReq;
}
inline void SSDCDSPkgBody::clear_delete_req() {
  if (_internal_has_delete_req()) {
    if (GetArenaForAllocation() == nullptr) {
      delete body_.delete_req_;
    }
    clear_has_body();
  }
}
inline ::SSDCDSDeleteReq* SSDCDSPkgBody::release_delete_req() {
  // @@protoc_insertion_point(field_release:SSDCDSPkgBody.delete_req)
  if (_internal_has_delete_req()) {
    clear_has_body();
      ::SSDCDSDeleteReq* temp = body_.delete_req_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    body_.delete_req_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::SSDCDSDeleteReq& SSDCDSPkgBody::_internal_delete_req() const {
  return _internal_has_delete_req()
      ? *body_.delete_req_
      : reinterpret_cast< ::SSDCDSDeleteReq&>(::_SSDCDSDeleteReq_default_instance_);
}
inline const ::SSDCDSDeleteReq& SSDCDSPkgBody::delete_req() const {
  // @@protoc_insertion_point(field_get:SSDCDSPkgBody.delete_req)
  return _internal_delete_req();
}
inline ::SSDCDSDeleteReq* SSDCDSPkgBody::unsafe_arena_release_delete_req() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SSDCDSPkgBody.delete_req)
  if (_internal_has_delete_req()) {
    clear_has_body();
    ::SSDCDSDeleteReq* temp = body_.delete_req_;
    body_.delete_req_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SSDCDSPkgBody::unsafe_arena_set_allocated_delete_req(::SSDCDSDeleteReq* delete_req) {
  clear_body();
  if (delete_req) {
    set_has_delete_req();
    body_.delete_req_ = delete_req;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SSDCDSPkgBody.delete_req)
}
inline ::SSDCDSDeleteReq* SSDCDSPkgBody::_internal_mutable_delete_req() {
  if (!_internal_has_delete_req()) {
    clear_body();
    set_has_delete_req();
    body_.delete_req_ = CreateMaybeMessage< ::SSDCDSDeleteReq >(GetArenaForAllocation());
  }
  return body_.delete_req_;
}
inline ::SSDCDSDeleteReq* SSDCDSPkgBody::mutable_delete_req() {
  ::SSDCDSDeleteReq* _msg = _internal_mutable_delete_req();
  // @@protoc_insertion_point(field_mutable:SSDCDSPkgBody.delete_req)
  return _msg;
}

// .SSDSDCDeleteRsp delete_rsp = 8;
inline bool SSDCDSPkgBody::_internal_has_delete_rsp() const {
  return body_case() == kDeleteRsp;
}
inline bool SSDCDSPkgBody::has_delete_rsp() const {
  return _internal_has_delete_rsp();
}
inline void SSDCDSPkgBody::set_has_delete_rsp() {
  _oneof_case_[0] = kDeleteRsp;
}
inline void SSDCDSPkgBody::clear_delete_rsp() {
  if (_internal_has_delete_rsp()) {
    if (GetArenaForAllocation() == nullptr) {
      delete body_.delete_rsp_;
    }
    clear_has_body();
  }
}
inline ::SSDSDCDeleteRsp* SSDCDSPkgBody::release_delete_rsp() {
  // @@protoc_insertion_point(field_release:SSDCDSPkgBody.delete_rsp)
  if (_internal_has_delete_rsp()) {
    clear_has_body();
      ::SSDSDCDeleteRsp* temp = body_.delete_rsp_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    body_.delete_rsp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::SSDSDCDeleteRsp& SSDCDSPkgBody::_internal_delete_rsp() const {
  return _internal_has_delete_rsp()
      ? *body_.delete_rsp_
      : reinterpret_cast< ::SSDSDCDeleteRsp&>(::_SSDSDCDeleteRsp_default_instance_);
}
inline const ::SSDSDCDeleteRsp& SSDCDSPkgBody::delete_rsp() const {
  // @@protoc_insertion_point(field_get:SSDCDSPkgBody.delete_rsp)
  return _internal_delete_rsp();
}
inline ::SSDSDCDeleteRsp* SSDCDSPkgBody::unsafe_arena_release_delete_rsp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SSDCDSPkgBody.delete_rsp)
  if (_internal_has_delete_rsp()) {
    clear_has_body();
    ::SSDSDCDeleteRsp* temp = body_.delete_rsp_;
    body_.delete_rsp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SSDCDSPkgBody::unsafe_arena_set_allocated_delete_rsp(::SSDSDCDeleteRsp* delete_rsp) {
  clear_body();
  if (delete_rsp) {
    set_has_delete_rsp();
    body_.delete_rsp_ = delete_rsp;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SSDCDSPkgBody.delete_rsp)
}
inline ::SSDSDCDeleteRsp* SSDCDSPkgBody::_internal_mutable_delete_rsp() {
  if (!_internal_has_delete_rsp()) {
    clear_body();
    set_has_delete_rsp();
    body_.delete_rsp_ = CreateMaybeMessage< ::SSDSDCDeleteRsp >(GetArenaForAllocation());
  }
  return body_.delete_rsp_;
}
inline ::SSDSDCDeleteRsp* SSDCDSPkgBody::mutable_delete_rsp() {
  ::SSDSDCDeleteRsp* _msg = _internal_mutable_delete_rsp();
  // @@protoc_insertion_point(field_mutable:SSDCDSPkgBody.delete_rsp)
  return _msg;
}

inline bool SSDCDSPkgBody::has_body() const {
  return body_case() != BODY_NOT_SET;
}
inline void SSDCDSPkgBody::clear_has_body() {
  _oneof_case_[0] = BODY_NOT_SET;
}
inline SSDCDSPkgBody::BodyCase SSDCDSPkgBody::body_case() const {
  return SSDCDSPkgBody::BodyCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ssdcds_2eproto
