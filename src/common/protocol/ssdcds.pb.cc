// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ssdcds.proto

#include "ssdcds.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr SSDCDSSelectReq_WhereEntry_DoNotUse::SSDCDSSelectReq_WhereEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SSDCDSSelectReq_WhereEntry_DoNotUseDefaultTypeInternal {
  constexpr SSDCDSSelectReq_WhereEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SSDCDSSelectReq_WhereEntry_DoNotUseDefaultTypeInternal() {}
  union {
    SSDCDSSelectReq_WhereEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SSDCDSSelectReq_WhereEntry_DoNotUseDefaultTypeInternal _SSDCDSSelectReq_WhereEntry_DoNotUse_default_instance_;
constexpr SSDCDSSelectReq::SSDCDSSelectReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : column_()
  , where_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , tb_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SSDCDSSelectReqDefaultTypeInternal {
  constexpr SSDCDSSelectReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SSDCDSSelectReqDefaultTypeInternal() {}
  union {
    SSDCDSSelectReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SSDCDSSelectReqDefaultTypeInternal _SSDCDSSelectReq_default_instance_;
constexpr SSDSDCSelectRsp_VariantMap_ValueEntry_DoNotUse::SSDSDCSelectRsp_VariantMap_ValueEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SSDSDCSelectRsp_VariantMap_ValueEntry_DoNotUseDefaultTypeInternal {
  constexpr SSDSDCSelectRsp_VariantMap_ValueEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SSDSDCSelectRsp_VariantMap_ValueEntry_DoNotUseDefaultTypeInternal() {}
  union {
    SSDSDCSelectRsp_VariantMap_ValueEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SSDSDCSelectRsp_VariantMap_ValueEntry_DoNotUseDefaultTypeInternal _SSDSDCSelectRsp_VariantMap_ValueEntry_DoNotUse_default_instance_;
constexpr SSDSDCSelectRsp_VariantMap::SSDSDCSelectRsp_VariantMap(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}){}
struct SSDSDCSelectRsp_VariantMapDefaultTypeInternal {
  constexpr SSDSDCSelectRsp_VariantMapDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SSDSDCSelectRsp_VariantMapDefaultTypeInternal() {}
  union {
    SSDSDCSelectRsp_VariantMap _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SSDSDCSelectRsp_VariantMapDefaultTypeInternal _SSDSDCSelectRsp_VariantMap_default_instance_;
constexpr SSDSDCSelectRsp::SSDSDCSelectRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(){}
struct SSDSDCSelectRspDefaultTypeInternal {
  constexpr SSDSDCSelectRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SSDSDCSelectRspDefaultTypeInternal() {}
  union {
    SSDSDCSelectRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SSDSDCSelectRspDefaultTypeInternal _SSDSDCSelectRsp_default_instance_;
constexpr SSDCDSInsertReq::SSDCDSInsertReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : column_()
  , value_()
  , tb_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SSDCDSInsertReqDefaultTypeInternal {
  constexpr SSDCDSInsertReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SSDCDSInsertReqDefaultTypeInternal() {}
  union {
    SSDCDSInsertReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SSDCDSInsertReqDefaultTypeInternal _SSDCDSInsertReq_default_instance_;
constexpr SSDSDCInsertRsp::SSDSDCInsertRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(false){}
struct SSDSDCInsertRspDefaultTypeInternal {
  constexpr SSDSDCInsertRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SSDSDCInsertRspDefaultTypeInternal() {}
  union {
    SSDSDCInsertRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SSDSDCInsertRspDefaultTypeInternal _SSDSDCInsertRsp_default_instance_;
constexpr SSDCDSUpdateReq_ValueEntry_DoNotUse::SSDCDSUpdateReq_ValueEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SSDCDSUpdateReq_ValueEntry_DoNotUseDefaultTypeInternal {
  constexpr SSDCDSUpdateReq_ValueEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SSDCDSUpdateReq_ValueEntry_DoNotUseDefaultTypeInternal() {}
  union {
    SSDCDSUpdateReq_ValueEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SSDCDSUpdateReq_ValueEntry_DoNotUseDefaultTypeInternal _SSDCDSUpdateReq_ValueEntry_DoNotUse_default_instance_;
constexpr SSDCDSUpdateReq_WhereEntry_DoNotUse::SSDCDSUpdateReq_WhereEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SSDCDSUpdateReq_WhereEntry_DoNotUseDefaultTypeInternal {
  constexpr SSDCDSUpdateReq_WhereEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SSDCDSUpdateReq_WhereEntry_DoNotUseDefaultTypeInternal() {}
  union {
    SSDCDSUpdateReq_WhereEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SSDCDSUpdateReq_WhereEntry_DoNotUseDefaultTypeInternal _SSDCDSUpdateReq_WhereEntry_DoNotUse_default_instance_;
constexpr SSDCDSUpdateReq::SSDCDSUpdateReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , where_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , tb_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SSDCDSUpdateReqDefaultTypeInternal {
  constexpr SSDCDSUpdateReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SSDCDSUpdateReqDefaultTypeInternal() {}
  union {
    SSDCDSUpdateReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SSDCDSUpdateReqDefaultTypeInternal _SSDCDSUpdateReq_default_instance_;
constexpr SSDSDCUpdateRsp::SSDSDCUpdateRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(false){}
struct SSDSDCUpdateRspDefaultTypeInternal {
  constexpr SSDSDCUpdateRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SSDSDCUpdateRspDefaultTypeInternal() {}
  union {
    SSDSDCUpdateRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SSDSDCUpdateRspDefaultTypeInternal _SSDSDCUpdateRsp_default_instance_;
constexpr SSDCDSDeleteReq_WhereEntry_DoNotUse::SSDCDSDeleteReq_WhereEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SSDCDSDeleteReq_WhereEntry_DoNotUseDefaultTypeInternal {
  constexpr SSDCDSDeleteReq_WhereEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SSDCDSDeleteReq_WhereEntry_DoNotUseDefaultTypeInternal() {}
  union {
    SSDCDSDeleteReq_WhereEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SSDCDSDeleteReq_WhereEntry_DoNotUseDefaultTypeInternal _SSDCDSDeleteReq_WhereEntry_DoNotUse_default_instance_;
constexpr SSDCDSDeleteReq::SSDCDSDeleteReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : where_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , tb_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SSDCDSDeleteReqDefaultTypeInternal {
  constexpr SSDCDSDeleteReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SSDCDSDeleteReqDefaultTypeInternal() {}
  union {
    SSDCDSDeleteReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SSDCDSDeleteReqDefaultTypeInternal _SSDCDSDeleteReq_default_instance_;
constexpr SSDSDCDeleteRsp::SSDSDCDeleteRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(false){}
struct SSDSDCDeleteRspDefaultTypeInternal {
  constexpr SSDSDCDeleteRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SSDSDCDeleteRspDefaultTypeInternal() {}
  union {
    SSDSDCDeleteRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SSDSDCDeleteRspDefaultTypeInternal _SSDSDCDeleteRsp_default_instance_;
constexpr SSDCDSPkgBody::SSDCDSPkgBody(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct SSDCDSPkgBodyDefaultTypeInternal {
  constexpr SSDCDSPkgBodyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SSDCDSPkgBodyDefaultTypeInternal() {}
  union {
    SSDCDSPkgBody _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SSDCDSPkgBodyDefaultTypeInternal _SSDCDSPkgBody_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ssdcds_2eproto[15];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ssdcds_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ssdcds_2eproto = nullptr;

const uint32_t TableStruct_ssdcds_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::SSDCDSSelectReq_WhereEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SSDCDSSelectReq_WhereEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SSDCDSSelectReq_WhereEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::SSDCDSSelectReq_WhereEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SSDCDSSelectReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SSDCDSSelectReq, tb_name_),
  PROTOBUF_FIELD_OFFSET(::SSDCDSSelectReq, column_),
  PROTOBUF_FIELD_OFFSET(::SSDCDSSelectReq, where_),
  PROTOBUF_FIELD_OFFSET(::SSDSDCSelectRsp_VariantMap_ValueEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SSDSDCSelectRsp_VariantMap_ValueEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SSDSDCSelectRsp_VariantMap_ValueEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::SSDSDCSelectRsp_VariantMap_ValueEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SSDSDCSelectRsp_VariantMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SSDSDCSelectRsp_VariantMap, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SSDSDCSelectRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SSDSDCSelectRsp, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SSDCDSInsertReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SSDCDSInsertReq, tb_name_),
  PROTOBUF_FIELD_OFFSET(::SSDCDSInsertReq, column_),
  PROTOBUF_FIELD_OFFSET(::SSDCDSInsertReq, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SSDSDCInsertRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SSDSDCInsertRsp, result_),
  PROTOBUF_FIELD_OFFSET(::SSDCDSUpdateReq_ValueEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SSDCDSUpdateReq_ValueEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SSDCDSUpdateReq_ValueEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::SSDCDSUpdateReq_ValueEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::SSDCDSUpdateReq_WhereEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SSDCDSUpdateReq_WhereEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SSDCDSUpdateReq_WhereEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::SSDCDSUpdateReq_WhereEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SSDCDSUpdateReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SSDCDSUpdateReq, tb_name_),
  PROTOBUF_FIELD_OFFSET(::SSDCDSUpdateReq, value_),
  PROTOBUF_FIELD_OFFSET(::SSDCDSUpdateReq, where_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SSDSDCUpdateRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SSDSDCUpdateRsp, result_),
  PROTOBUF_FIELD_OFFSET(::SSDCDSDeleteReq_WhereEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SSDCDSDeleteReq_WhereEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SSDCDSDeleteReq_WhereEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::SSDCDSDeleteReq_WhereEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SSDCDSDeleteReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SSDCDSDeleteReq, tb_name_),
  PROTOBUF_FIELD_OFFSET(::SSDCDSDeleteReq, where_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SSDSDCDeleteRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SSDSDCDeleteRsp, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SSDCDSPkgBody, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::SSDCDSPkgBody, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::SSDCDSPkgBody, body_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::SSDCDSSelectReq_WhereEntry_DoNotUse)},
  { 10, -1, -1, sizeof(::SSDCDSSelectReq)},
  { 19, 27, -1, sizeof(::SSDSDCSelectRsp_VariantMap_ValueEntry_DoNotUse)},
  { 29, -1, -1, sizeof(::SSDSDCSelectRsp_VariantMap)},
  { 36, -1, -1, sizeof(::SSDSDCSelectRsp)},
  { 43, -1, -1, sizeof(::SSDCDSInsertReq)},
  { 52, -1, -1, sizeof(::SSDSDCInsertRsp)},
  { 59, 67, -1, sizeof(::SSDCDSUpdateReq_ValueEntry_DoNotUse)},
  { 69, 77, -1, sizeof(::SSDCDSUpdateReq_WhereEntry_DoNotUse)},
  { 79, -1, -1, sizeof(::SSDCDSUpdateReq)},
  { 88, -1, -1, sizeof(::SSDSDCUpdateRsp)},
  { 95, 103, -1, sizeof(::SSDCDSDeleteReq_WhereEntry_DoNotUse)},
  { 105, -1, -1, sizeof(::SSDCDSDeleteReq)},
  { 113, -1, -1, sizeof(::SSDSDCDeleteRsp)},
  { 120, -1, -1, sizeof(::SSDCDSPkgBody)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SSDCDSSelectReq_WhereEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SSDCDSSelectReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SSDSDCSelectRsp_VariantMap_ValueEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SSDSDCSelectRsp_VariantMap_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SSDSDCSelectRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SSDCDSInsertReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SSDSDCInsertRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SSDCDSUpdateReq_ValueEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SSDCDSUpdateReq_WhereEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SSDCDSUpdateReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SSDSDCUpdateRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SSDCDSDeleteReq_WhereEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SSDCDSDeleteReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SSDSDCDeleteRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SSDCDSPkgBody_default_instance_),
};

const char descriptor_table_protodef_ssdcds_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014ssdcds.proto\032\014common.proto\"\226\001\n\017SSDCDSS"
  "electReq\022\017\n\007tb_name\030\001 \001(\t\022\016\n\006column\030\002 \003("
  "\t\022*\n\005where\030\003 \003(\0132\033.SSDCDSSelectReq.Where"
  "Entry\0326\n\nWhereEntry\022\013\n\003key\030\001 \001(\t\022\027\n\005valu"
  "e\030\002 \001(\0132\010.Variant:\0028\001\"\273\001\n\017SSDSDCSelectRs"
  "p\022+\n\006result\030\001 \003(\0132\033.SSDSDCSelectRsp.Vari"
  "antMap\032{\n\nVariantMap\0225\n\005value\030\001 \003(\0132&.SS"
  "DSDCSelectRsp.VariantMap.ValueEntry\0326\n\nV"
  "alueEntry\022\013\n\003key\030\001 \001(\t\022\027\n\005value\030\002 \001(\0132\010."
  "Variant:\0028\001\"K\n\017SSDCDSInsertReq\022\017\n\007tb_nam"
  "e\030\001 \001(\t\022\016\n\006column\030\002 \003(\t\022\027\n\005value\030\003 \003(\0132\010"
  ".Variant\"!\n\017SSDSDCInsertRsp\022\016\n\006result\030\001 "
  "\001(\010\"\352\001\n\017SSDCDSUpdateReq\022\017\n\007tb_name\030\001 \001(\t"
  "\022*\n\005value\030\002 \003(\0132\033.SSDCDSUpdateReq.ValueE"
  "ntry\022*\n\005where\030\003 \003(\0132\033.SSDCDSUpdateReq.Wh"
  "ereEntry\0326\n\nValueEntry\022\013\n\003key\030\001 \001(\t\022\027\n\005v"
  "alue\030\002 \001(\0132\010.Variant:\0028\001\0326\n\nWhereEntry\022\013"
  "\n\003key\030\001 \001(\t\022\027\n\005value\030\002 \001(\0132\010.Variant:\0028\001"
  "\"!\n\017SSDSDCUpdateRsp\022\016\n\006result\030\001 \001(\010\"\206\001\n\017"
  "SSDCDSDeleteReq\022\017\n\007tb_name\030\001 \001(\t\022*\n\005wher"
  "e\030\002 \003(\0132\033.SSDCDSDeleteReq.WhereEntry\0326\n\n"
  "WhereEntry\022\013\n\003key\030\001 \001(\t\022\027\n\005value\030\002 \001(\0132\010"
  ".Variant:\0028\001\"!\n\017SSDSDCDeleteRsp\022\016\n\006resul"
  "t\030\001 \001(\010\"\327\002\n\rSSDCDSPkgBody\022&\n\nselect_req\030"
  "\001 \001(\0132\020.SSDCDSSelectReqH\000\022&\n\nselect_rsp\030"
  "\002 \001(\0132\020.SSDSDCSelectRspH\000\022&\n\ninsert_req\030"
  "\003 \001(\0132\020.SSDCDSInsertReqH\000\022&\n\ninsert_rsp\030"
  "\004 \001(\0132\020.SSDSDCInsertRspH\000\022&\n\nupdate_req\030"
  "\005 \001(\0132\020.SSDCDSUpdateReqH\000\022&\n\nupdate_rsp\030"
  "\006 \001(\0132\020.SSDSDCUpdateRspH\000\022&\n\ndelete_req\030"
  "\007 \001(\0132\020.SSDCDSDeleteReqH\000\022&\n\ndelete_rsp\030"
  "\010 \001(\0132\020.SSDSDCDeleteRspH\000B\006\n\004bodyb\006proto"
  "3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ssdcds_2eproto_deps[1] = {
  &::descriptor_table_common_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ssdcds_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ssdcds_2eproto = {
  false, false, 1281, descriptor_table_protodef_ssdcds_2eproto, "ssdcds.proto", 
  &descriptor_table_ssdcds_2eproto_once, descriptor_table_ssdcds_2eproto_deps, 1, 15,
  schemas, file_default_instances, TableStruct_ssdcds_2eproto::offsets,
  file_level_metadata_ssdcds_2eproto, file_level_enum_descriptors_ssdcds_2eproto, file_level_service_descriptors_ssdcds_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_ssdcds_2eproto_getter() {
  return &descriptor_table_ssdcds_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_ssdcds_2eproto(&descriptor_table_ssdcds_2eproto);

// ===================================================================

SSDCDSSelectReq_WhereEntry_DoNotUse::SSDCDSSelectReq_WhereEntry_DoNotUse() {}
SSDCDSSelectReq_WhereEntry_DoNotUse::SSDCDSSelectReq_WhereEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SSDCDSSelectReq_WhereEntry_DoNotUse::MergeFrom(const SSDCDSSelectReq_WhereEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SSDCDSSelectReq_WhereEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssdcds_2eproto_getter, &descriptor_table_ssdcds_2eproto_once,
      file_level_metadata_ssdcds_2eproto[0]);
}

// ===================================================================

class SSDCDSSelectReq::_Internal {
 public:
};

void SSDCDSSelectReq::clear_where() {
  where_.Clear();
}
SSDCDSSelectReq::SSDCDSSelectReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  column_(arena),
  where_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:SSDCDSSelectReq)
}
SSDCDSSelectReq::SSDCDSSelectReq(const SSDCDSSelectReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      column_(from.column_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  where_.MergeFrom(from.where_);
  tb_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    tb_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tb_name().empty()) {
    tb_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tb_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:SSDCDSSelectReq)
}

inline void SSDCDSSelectReq::SharedCtor() {
tb_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  tb_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SSDCDSSelectReq::~SSDCDSSelectReq() {
  // @@protoc_insertion_point(destructor:SSDCDSSelectReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SSDCDSSelectReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  tb_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SSDCDSSelectReq::ArenaDtor(void* object) {
  SSDCDSSelectReq* _this = reinterpret_cast< SSDCDSSelectReq* >(object);
  (void)_this;
  _this->where_. ~MapField();
}
inline void SSDCDSSelectReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &SSDCDSSelectReq::ArenaDtor);
  }
}
void SSDCDSSelectReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SSDCDSSelectReq::Clear() {
// @@protoc_insertion_point(message_clear_start:SSDCDSSelectReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  column_.Clear();
  where_.Clear();
  tb_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SSDCDSSelectReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string tb_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_tb_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SSDCDSSelectReq.tb_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string column = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_column();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SSDCDSSelectReq.column"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, .Variant> where = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&where_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SSDCDSSelectReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSDCDSSelectReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string tb_name = 1;
  if (!this->_internal_tb_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tb_name().data(), static_cast<int>(this->_internal_tb_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SSDCDSSelectReq.tb_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tb_name(), target);
  }

  // repeated string column = 2;
  for (int i = 0, n = this->_internal_column_size(); i < n; i++) {
    const auto& s = this->_internal_column(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SSDCDSSelectReq.column");
    target = stream->WriteString(2, s, target);
  }

  // map<string, .Variant> where = 3;
  if (!this->_internal_where().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Variant >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "SSDCDSSelectReq.WhereEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_where().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_where().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Variant >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Variant >::const_iterator
          it = this->_internal_where().begin();
          it != this->_internal_where().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = SSDCDSSelectReq_WhereEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Variant >::const_iterator
          it = this->_internal_where().begin();
          it != this->_internal_where().end(); ++it) {
        target = SSDCDSSelectReq_WhereEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSDCDSSelectReq)
  return target;
}

size_t SSDCDSSelectReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SSDCDSSelectReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string column = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(column_.size());
  for (int i = 0, n = column_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      column_.Get(i));
  }

  // map<string, .Variant> where = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_where_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Variant >::const_iterator
      it = this->_internal_where().begin();
      it != this->_internal_where().end(); ++it) {
    total_size += SSDCDSSelectReq_WhereEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string tb_name = 1;
  if (!this->_internal_tb_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tb_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SSDCDSSelectReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SSDCDSSelectReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SSDCDSSelectReq::GetClassData() const { return &_class_data_; }

void SSDCDSSelectReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SSDCDSSelectReq *>(to)->MergeFrom(
      static_cast<const SSDCDSSelectReq &>(from));
}


void SSDCDSSelectReq::MergeFrom(const SSDCDSSelectReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SSDCDSSelectReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  column_.MergeFrom(from.column_);
  where_.MergeFrom(from.where_);
  if (!from._internal_tb_name().empty()) {
    _internal_set_tb_name(from._internal_tb_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SSDCDSSelectReq::CopyFrom(const SSDCDSSelectReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SSDCDSSelectReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSDCDSSelectReq::IsInitialized() const {
  return true;
}

void SSDCDSSelectReq::InternalSwap(SSDCDSSelectReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  column_.InternalSwap(&other->column_);
  where_.InternalSwap(&other->where_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &tb_name_, lhs_arena,
      &other->tb_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SSDCDSSelectReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssdcds_2eproto_getter, &descriptor_table_ssdcds_2eproto_once,
      file_level_metadata_ssdcds_2eproto[1]);
}

// ===================================================================

SSDSDCSelectRsp_VariantMap_ValueEntry_DoNotUse::SSDSDCSelectRsp_VariantMap_ValueEntry_DoNotUse() {}
SSDSDCSelectRsp_VariantMap_ValueEntry_DoNotUse::SSDSDCSelectRsp_VariantMap_ValueEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SSDSDCSelectRsp_VariantMap_ValueEntry_DoNotUse::MergeFrom(const SSDSDCSelectRsp_VariantMap_ValueEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SSDSDCSelectRsp_VariantMap_ValueEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssdcds_2eproto_getter, &descriptor_table_ssdcds_2eproto_once,
      file_level_metadata_ssdcds_2eproto[2]);
}

// ===================================================================

class SSDSDCSelectRsp_VariantMap::_Internal {
 public:
};

void SSDSDCSelectRsp_VariantMap::clear_value() {
  value_.Clear();
}
SSDSDCSelectRsp_VariantMap::SSDSDCSelectRsp_VariantMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  value_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:SSDSDCSelectRsp.VariantMap)
}
SSDSDCSelectRsp_VariantMap::SSDSDCSelectRsp_VariantMap(const SSDSDCSelectRsp_VariantMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.MergeFrom(from.value_);
  // @@protoc_insertion_point(copy_constructor:SSDSDCSelectRsp.VariantMap)
}

inline void SSDSDCSelectRsp_VariantMap::SharedCtor() {
}

SSDSDCSelectRsp_VariantMap::~SSDSDCSelectRsp_VariantMap() {
  // @@protoc_insertion_point(destructor:SSDSDCSelectRsp.VariantMap)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SSDSDCSelectRsp_VariantMap::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SSDSDCSelectRsp_VariantMap::ArenaDtor(void* object) {
  SSDSDCSelectRsp_VariantMap* _this = reinterpret_cast< SSDSDCSelectRsp_VariantMap* >(object);
  (void)_this;
  _this->value_. ~MapField();
}
inline void SSDSDCSelectRsp_VariantMap::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &SSDSDCSelectRsp_VariantMap::ArenaDtor);
  }
}
void SSDSDCSelectRsp_VariantMap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SSDSDCSelectRsp_VariantMap::Clear() {
// @@protoc_insertion_point(message_clear_start:SSDSDCSelectRsp.VariantMap)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SSDSDCSelectRsp_VariantMap::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, .Variant> value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&value_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SSDSDCSelectRsp_VariantMap::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSDSDCSelectRsp.VariantMap)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .Variant> value = 1;
  if (!this->_internal_value().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Variant >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "SSDSDCSelectRsp.VariantMap.ValueEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_value().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_value().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Variant >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Variant >::const_iterator
          it = this->_internal_value().begin();
          it != this->_internal_value().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = SSDSDCSelectRsp_VariantMap_ValueEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Variant >::const_iterator
          it = this->_internal_value().begin();
          it != this->_internal_value().end(); ++it) {
        target = SSDSDCSelectRsp_VariantMap_ValueEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSDSDCSelectRsp.VariantMap)
  return target;
}

size_t SSDSDCSelectRsp_VariantMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SSDSDCSelectRsp.VariantMap)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .Variant> value = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_value_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Variant >::const_iterator
      it = this->_internal_value().begin();
      it != this->_internal_value().end(); ++it) {
    total_size += SSDSDCSelectRsp_VariantMap_ValueEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SSDSDCSelectRsp_VariantMap::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SSDSDCSelectRsp_VariantMap::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SSDSDCSelectRsp_VariantMap::GetClassData() const { return &_class_data_; }

void SSDSDCSelectRsp_VariantMap::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SSDSDCSelectRsp_VariantMap *>(to)->MergeFrom(
      static_cast<const SSDSDCSelectRsp_VariantMap &>(from));
}


void SSDSDCSelectRsp_VariantMap::MergeFrom(const SSDSDCSelectRsp_VariantMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SSDSDCSelectRsp.VariantMap)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SSDSDCSelectRsp_VariantMap::CopyFrom(const SSDSDCSelectRsp_VariantMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SSDSDCSelectRsp.VariantMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSDSDCSelectRsp_VariantMap::IsInitialized() const {
  return true;
}

void SSDSDCSelectRsp_VariantMap::InternalSwap(SSDSDCSelectRsp_VariantMap* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  value_.InternalSwap(&other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SSDSDCSelectRsp_VariantMap::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssdcds_2eproto_getter, &descriptor_table_ssdcds_2eproto_once,
      file_level_metadata_ssdcds_2eproto[3]);
}

// ===================================================================

class SSDSDCSelectRsp::_Internal {
 public:
};

SSDSDCSelectRsp::SSDSDCSelectRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  result_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:SSDSDCSelectRsp)
}
SSDSDCSelectRsp::SSDSDCSelectRsp(const SSDSDCSelectRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      result_(from.result_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SSDSDCSelectRsp)
}

inline void SSDSDCSelectRsp::SharedCtor() {
}

SSDSDCSelectRsp::~SSDSDCSelectRsp() {
  // @@protoc_insertion_point(destructor:SSDSDCSelectRsp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SSDSDCSelectRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SSDSDCSelectRsp::ArenaDtor(void* object) {
  SSDSDCSelectRsp* _this = reinterpret_cast< SSDSDCSelectRsp* >(object);
  (void)_this;
}
void SSDSDCSelectRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SSDSDCSelectRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SSDSDCSelectRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:SSDSDCSelectRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SSDSDCSelectRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .SSDSDCSelectRsp.VariantMap result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_result(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SSDSDCSelectRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSDSDCSelectRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SSDSDCSelectRsp.VariantMap result = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_result_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_result(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSDSDCSelectRsp)
  return target;
}

size_t SSDSDCSelectRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SSDSDCSelectRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SSDSDCSelectRsp.VariantMap result = 1;
  total_size += 1UL * this->_internal_result_size();
  for (const auto& msg : this->result_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SSDSDCSelectRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SSDSDCSelectRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SSDSDCSelectRsp::GetClassData() const { return &_class_data_; }

void SSDSDCSelectRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SSDSDCSelectRsp *>(to)->MergeFrom(
      static_cast<const SSDSDCSelectRsp &>(from));
}


void SSDSDCSelectRsp::MergeFrom(const SSDSDCSelectRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SSDSDCSelectRsp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  result_.MergeFrom(from.result_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SSDSDCSelectRsp::CopyFrom(const SSDSDCSelectRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SSDSDCSelectRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSDSDCSelectRsp::IsInitialized() const {
  return true;
}

void SSDSDCSelectRsp::InternalSwap(SSDSDCSelectRsp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  result_.InternalSwap(&other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SSDSDCSelectRsp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssdcds_2eproto_getter, &descriptor_table_ssdcds_2eproto_once,
      file_level_metadata_ssdcds_2eproto[4]);
}

// ===================================================================

class SSDCDSInsertReq::_Internal {
 public:
};

void SSDCDSInsertReq::clear_value() {
  value_.Clear();
}
SSDCDSInsertReq::SSDCDSInsertReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  column_(arena),
  value_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:SSDCDSInsertReq)
}
SSDCDSInsertReq::SSDCDSInsertReq(const SSDCDSInsertReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      column_(from.column_),
      value_(from.value_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tb_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    tb_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tb_name().empty()) {
    tb_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tb_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:SSDCDSInsertReq)
}

inline void SSDCDSInsertReq::SharedCtor() {
tb_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  tb_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SSDCDSInsertReq::~SSDCDSInsertReq() {
  // @@protoc_insertion_point(destructor:SSDCDSInsertReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SSDCDSInsertReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  tb_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SSDCDSInsertReq::ArenaDtor(void* object) {
  SSDCDSInsertReq* _this = reinterpret_cast< SSDCDSInsertReq* >(object);
  (void)_this;
}
void SSDCDSInsertReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SSDCDSInsertReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SSDCDSInsertReq::Clear() {
// @@protoc_insertion_point(message_clear_start:SSDCDSInsertReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  column_.Clear();
  value_.Clear();
  tb_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SSDCDSInsertReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string tb_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_tb_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SSDCDSInsertReq.tb_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string column = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_column();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SSDCDSInsertReq.column"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .Variant value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_value(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SSDCDSInsertReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSDCDSInsertReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string tb_name = 1;
  if (!this->_internal_tb_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tb_name().data(), static_cast<int>(this->_internal_tb_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SSDCDSInsertReq.tb_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tb_name(), target);
  }

  // repeated string column = 2;
  for (int i = 0, n = this->_internal_column_size(); i < n; i++) {
    const auto& s = this->_internal_column(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SSDCDSInsertReq.column");
    target = stream->WriteString(2, s, target);
  }

  // repeated .Variant value = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_value_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_value(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSDCDSInsertReq)
  return target;
}

size_t SSDCDSInsertReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SSDCDSInsertReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string column = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(column_.size());
  for (int i = 0, n = column_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      column_.Get(i));
  }

  // repeated .Variant value = 3;
  total_size += 1UL * this->_internal_value_size();
  for (const auto& msg : this->value_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string tb_name = 1;
  if (!this->_internal_tb_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tb_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SSDCDSInsertReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SSDCDSInsertReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SSDCDSInsertReq::GetClassData() const { return &_class_data_; }

void SSDCDSInsertReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SSDCDSInsertReq *>(to)->MergeFrom(
      static_cast<const SSDCDSInsertReq &>(from));
}


void SSDCDSInsertReq::MergeFrom(const SSDCDSInsertReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SSDCDSInsertReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  column_.MergeFrom(from.column_);
  value_.MergeFrom(from.value_);
  if (!from._internal_tb_name().empty()) {
    _internal_set_tb_name(from._internal_tb_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SSDCDSInsertReq::CopyFrom(const SSDCDSInsertReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SSDCDSInsertReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSDCDSInsertReq::IsInitialized() const {
  return true;
}

void SSDCDSInsertReq::InternalSwap(SSDCDSInsertReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  column_.InternalSwap(&other->column_);
  value_.InternalSwap(&other->value_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &tb_name_, lhs_arena,
      &other->tb_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SSDCDSInsertReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssdcds_2eproto_getter, &descriptor_table_ssdcds_2eproto_once,
      file_level_metadata_ssdcds_2eproto[5]);
}

// ===================================================================

class SSDSDCInsertRsp::_Internal {
 public:
};

SSDSDCInsertRsp::SSDSDCInsertRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:SSDSDCInsertRsp)
}
SSDSDCInsertRsp::SSDSDCInsertRsp(const SSDSDCInsertRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:SSDSDCInsertRsp)
}

inline void SSDSDCInsertRsp::SharedCtor() {
result_ = false;
}

SSDSDCInsertRsp::~SSDSDCInsertRsp() {
  // @@protoc_insertion_point(destructor:SSDSDCInsertRsp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SSDSDCInsertRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SSDSDCInsertRsp::ArenaDtor(void* object) {
  SSDSDCInsertRsp* _this = reinterpret_cast< SSDSDCInsertRsp* >(object);
  (void)_this;
}
void SSDSDCInsertRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SSDSDCInsertRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SSDSDCInsertRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:SSDSDCInsertRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SSDSDCInsertRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SSDSDCInsertRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSDSDCInsertRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSDSDCInsertRsp)
  return target;
}

size_t SSDSDCInsertRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SSDSDCInsertRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool result = 1;
  if (this->_internal_result() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SSDSDCInsertRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SSDSDCInsertRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SSDSDCInsertRsp::GetClassData() const { return &_class_data_; }

void SSDSDCInsertRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SSDSDCInsertRsp *>(to)->MergeFrom(
      static_cast<const SSDSDCInsertRsp &>(from));
}


void SSDSDCInsertRsp::MergeFrom(const SSDSDCInsertRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SSDSDCInsertRsp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_result() != 0) {
    _internal_set_result(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SSDSDCInsertRsp::CopyFrom(const SSDSDCInsertRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SSDSDCInsertRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSDSDCInsertRsp::IsInitialized() const {
  return true;
}

void SSDSDCInsertRsp::InternalSwap(SSDSDCInsertRsp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SSDSDCInsertRsp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssdcds_2eproto_getter, &descriptor_table_ssdcds_2eproto_once,
      file_level_metadata_ssdcds_2eproto[6]);
}

// ===================================================================

SSDCDSUpdateReq_ValueEntry_DoNotUse::SSDCDSUpdateReq_ValueEntry_DoNotUse() {}
SSDCDSUpdateReq_ValueEntry_DoNotUse::SSDCDSUpdateReq_ValueEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SSDCDSUpdateReq_ValueEntry_DoNotUse::MergeFrom(const SSDCDSUpdateReq_ValueEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SSDCDSUpdateReq_ValueEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssdcds_2eproto_getter, &descriptor_table_ssdcds_2eproto_once,
      file_level_metadata_ssdcds_2eproto[7]);
}

// ===================================================================

SSDCDSUpdateReq_WhereEntry_DoNotUse::SSDCDSUpdateReq_WhereEntry_DoNotUse() {}
SSDCDSUpdateReq_WhereEntry_DoNotUse::SSDCDSUpdateReq_WhereEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SSDCDSUpdateReq_WhereEntry_DoNotUse::MergeFrom(const SSDCDSUpdateReq_WhereEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SSDCDSUpdateReq_WhereEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssdcds_2eproto_getter, &descriptor_table_ssdcds_2eproto_once,
      file_level_metadata_ssdcds_2eproto[8]);
}

// ===================================================================

class SSDCDSUpdateReq::_Internal {
 public:
};

void SSDCDSUpdateReq::clear_value() {
  value_.Clear();
}
void SSDCDSUpdateReq::clear_where() {
  where_.Clear();
}
SSDCDSUpdateReq::SSDCDSUpdateReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  value_(arena),
  where_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:SSDCDSUpdateReq)
}
SSDCDSUpdateReq::SSDCDSUpdateReq(const SSDCDSUpdateReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.MergeFrom(from.value_);
  where_.MergeFrom(from.where_);
  tb_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    tb_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tb_name().empty()) {
    tb_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tb_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:SSDCDSUpdateReq)
}

inline void SSDCDSUpdateReq::SharedCtor() {
tb_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  tb_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SSDCDSUpdateReq::~SSDCDSUpdateReq() {
  // @@protoc_insertion_point(destructor:SSDCDSUpdateReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SSDCDSUpdateReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  tb_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SSDCDSUpdateReq::ArenaDtor(void* object) {
  SSDCDSUpdateReq* _this = reinterpret_cast< SSDCDSUpdateReq* >(object);
  (void)_this;
  _this->value_. ~MapField();
  _this->where_. ~MapField();
}
inline void SSDCDSUpdateReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &SSDCDSUpdateReq::ArenaDtor);
  }
}
void SSDCDSUpdateReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SSDCDSUpdateReq::Clear() {
// @@protoc_insertion_point(message_clear_start:SSDCDSUpdateReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.Clear();
  where_.Clear();
  tb_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SSDCDSUpdateReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string tb_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_tb_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SSDCDSUpdateReq.tb_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, .Variant> value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&value_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, .Variant> where = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&where_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SSDCDSUpdateReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSDCDSUpdateReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string tb_name = 1;
  if (!this->_internal_tb_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tb_name().data(), static_cast<int>(this->_internal_tb_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SSDCDSUpdateReq.tb_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tb_name(), target);
  }

  // map<string, .Variant> value = 2;
  if (!this->_internal_value().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Variant >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "SSDCDSUpdateReq.ValueEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_value().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_value().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Variant >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Variant >::const_iterator
          it = this->_internal_value().begin();
          it != this->_internal_value().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = SSDCDSUpdateReq_ValueEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Variant >::const_iterator
          it = this->_internal_value().begin();
          it != this->_internal_value().end(); ++it) {
        target = SSDCDSUpdateReq_ValueEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, .Variant> where = 3;
  if (!this->_internal_where().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Variant >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "SSDCDSUpdateReq.WhereEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_where().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_where().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Variant >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Variant >::const_iterator
          it = this->_internal_where().begin();
          it != this->_internal_where().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = SSDCDSUpdateReq_WhereEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Variant >::const_iterator
          it = this->_internal_where().begin();
          it != this->_internal_where().end(); ++it) {
        target = SSDCDSUpdateReq_WhereEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSDCDSUpdateReq)
  return target;
}

size_t SSDCDSUpdateReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SSDCDSUpdateReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .Variant> value = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_value_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Variant >::const_iterator
      it = this->_internal_value().begin();
      it != this->_internal_value().end(); ++it) {
    total_size += SSDCDSUpdateReq_ValueEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .Variant> where = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_where_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Variant >::const_iterator
      it = this->_internal_where().begin();
      it != this->_internal_where().end(); ++it) {
    total_size += SSDCDSUpdateReq_WhereEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string tb_name = 1;
  if (!this->_internal_tb_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tb_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SSDCDSUpdateReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SSDCDSUpdateReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SSDCDSUpdateReq::GetClassData() const { return &_class_data_; }

void SSDCDSUpdateReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SSDCDSUpdateReq *>(to)->MergeFrom(
      static_cast<const SSDCDSUpdateReq &>(from));
}


void SSDCDSUpdateReq::MergeFrom(const SSDCDSUpdateReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SSDCDSUpdateReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
  where_.MergeFrom(from.where_);
  if (!from._internal_tb_name().empty()) {
    _internal_set_tb_name(from._internal_tb_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SSDCDSUpdateReq::CopyFrom(const SSDCDSUpdateReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SSDCDSUpdateReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSDCDSUpdateReq::IsInitialized() const {
  return true;
}

void SSDCDSUpdateReq::InternalSwap(SSDCDSUpdateReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  value_.InternalSwap(&other->value_);
  where_.InternalSwap(&other->where_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &tb_name_, lhs_arena,
      &other->tb_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SSDCDSUpdateReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssdcds_2eproto_getter, &descriptor_table_ssdcds_2eproto_once,
      file_level_metadata_ssdcds_2eproto[9]);
}

// ===================================================================

class SSDSDCUpdateRsp::_Internal {
 public:
};

SSDSDCUpdateRsp::SSDSDCUpdateRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:SSDSDCUpdateRsp)
}
SSDSDCUpdateRsp::SSDSDCUpdateRsp(const SSDSDCUpdateRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:SSDSDCUpdateRsp)
}

inline void SSDSDCUpdateRsp::SharedCtor() {
result_ = false;
}

SSDSDCUpdateRsp::~SSDSDCUpdateRsp() {
  // @@protoc_insertion_point(destructor:SSDSDCUpdateRsp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SSDSDCUpdateRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SSDSDCUpdateRsp::ArenaDtor(void* object) {
  SSDSDCUpdateRsp* _this = reinterpret_cast< SSDSDCUpdateRsp* >(object);
  (void)_this;
}
void SSDSDCUpdateRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SSDSDCUpdateRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SSDSDCUpdateRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:SSDSDCUpdateRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SSDSDCUpdateRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SSDSDCUpdateRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSDSDCUpdateRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSDSDCUpdateRsp)
  return target;
}

size_t SSDSDCUpdateRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SSDSDCUpdateRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool result = 1;
  if (this->_internal_result() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SSDSDCUpdateRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SSDSDCUpdateRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SSDSDCUpdateRsp::GetClassData() const { return &_class_data_; }

void SSDSDCUpdateRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SSDSDCUpdateRsp *>(to)->MergeFrom(
      static_cast<const SSDSDCUpdateRsp &>(from));
}


void SSDSDCUpdateRsp::MergeFrom(const SSDSDCUpdateRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SSDSDCUpdateRsp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_result() != 0) {
    _internal_set_result(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SSDSDCUpdateRsp::CopyFrom(const SSDSDCUpdateRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SSDSDCUpdateRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSDSDCUpdateRsp::IsInitialized() const {
  return true;
}

void SSDSDCUpdateRsp::InternalSwap(SSDSDCUpdateRsp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SSDSDCUpdateRsp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssdcds_2eproto_getter, &descriptor_table_ssdcds_2eproto_once,
      file_level_metadata_ssdcds_2eproto[10]);
}

// ===================================================================

SSDCDSDeleteReq_WhereEntry_DoNotUse::SSDCDSDeleteReq_WhereEntry_DoNotUse() {}
SSDCDSDeleteReq_WhereEntry_DoNotUse::SSDCDSDeleteReq_WhereEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SSDCDSDeleteReq_WhereEntry_DoNotUse::MergeFrom(const SSDCDSDeleteReq_WhereEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SSDCDSDeleteReq_WhereEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssdcds_2eproto_getter, &descriptor_table_ssdcds_2eproto_once,
      file_level_metadata_ssdcds_2eproto[11]);
}

// ===================================================================

class SSDCDSDeleteReq::_Internal {
 public:
};

void SSDCDSDeleteReq::clear_where() {
  where_.Clear();
}
SSDCDSDeleteReq::SSDCDSDeleteReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  where_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:SSDCDSDeleteReq)
}
SSDCDSDeleteReq::SSDCDSDeleteReq(const SSDCDSDeleteReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  where_.MergeFrom(from.where_);
  tb_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    tb_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tb_name().empty()) {
    tb_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tb_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:SSDCDSDeleteReq)
}

inline void SSDCDSDeleteReq::SharedCtor() {
tb_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  tb_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SSDCDSDeleteReq::~SSDCDSDeleteReq() {
  // @@protoc_insertion_point(destructor:SSDCDSDeleteReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SSDCDSDeleteReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  tb_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SSDCDSDeleteReq::ArenaDtor(void* object) {
  SSDCDSDeleteReq* _this = reinterpret_cast< SSDCDSDeleteReq* >(object);
  (void)_this;
  _this->where_. ~MapField();
}
inline void SSDCDSDeleteReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &SSDCDSDeleteReq::ArenaDtor);
  }
}
void SSDCDSDeleteReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SSDCDSDeleteReq::Clear() {
// @@protoc_insertion_point(message_clear_start:SSDCDSDeleteReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  where_.Clear();
  tb_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SSDCDSDeleteReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string tb_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_tb_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SSDCDSDeleteReq.tb_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, .Variant> where = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&where_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SSDCDSDeleteReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSDCDSDeleteReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string tb_name = 1;
  if (!this->_internal_tb_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tb_name().data(), static_cast<int>(this->_internal_tb_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SSDCDSDeleteReq.tb_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tb_name(), target);
  }

  // map<string, .Variant> where = 2;
  if (!this->_internal_where().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Variant >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "SSDCDSDeleteReq.WhereEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_where().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_where().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Variant >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Variant >::const_iterator
          it = this->_internal_where().begin();
          it != this->_internal_where().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = SSDCDSDeleteReq_WhereEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Variant >::const_iterator
          it = this->_internal_where().begin();
          it != this->_internal_where().end(); ++it) {
        target = SSDCDSDeleteReq_WhereEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSDCDSDeleteReq)
  return target;
}

size_t SSDCDSDeleteReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SSDCDSDeleteReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .Variant> where = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_where_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Variant >::const_iterator
      it = this->_internal_where().begin();
      it != this->_internal_where().end(); ++it) {
    total_size += SSDCDSDeleteReq_WhereEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string tb_name = 1;
  if (!this->_internal_tb_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tb_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SSDCDSDeleteReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SSDCDSDeleteReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SSDCDSDeleteReq::GetClassData() const { return &_class_data_; }

void SSDCDSDeleteReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SSDCDSDeleteReq *>(to)->MergeFrom(
      static_cast<const SSDCDSDeleteReq &>(from));
}


void SSDCDSDeleteReq::MergeFrom(const SSDCDSDeleteReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SSDCDSDeleteReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  where_.MergeFrom(from.where_);
  if (!from._internal_tb_name().empty()) {
    _internal_set_tb_name(from._internal_tb_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SSDCDSDeleteReq::CopyFrom(const SSDCDSDeleteReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SSDCDSDeleteReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSDCDSDeleteReq::IsInitialized() const {
  return true;
}

void SSDCDSDeleteReq::InternalSwap(SSDCDSDeleteReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  where_.InternalSwap(&other->where_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &tb_name_, lhs_arena,
      &other->tb_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SSDCDSDeleteReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssdcds_2eproto_getter, &descriptor_table_ssdcds_2eproto_once,
      file_level_metadata_ssdcds_2eproto[12]);
}

// ===================================================================

class SSDSDCDeleteRsp::_Internal {
 public:
};

SSDSDCDeleteRsp::SSDSDCDeleteRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:SSDSDCDeleteRsp)
}
SSDSDCDeleteRsp::SSDSDCDeleteRsp(const SSDSDCDeleteRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:SSDSDCDeleteRsp)
}

inline void SSDSDCDeleteRsp::SharedCtor() {
result_ = false;
}

SSDSDCDeleteRsp::~SSDSDCDeleteRsp() {
  // @@protoc_insertion_point(destructor:SSDSDCDeleteRsp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SSDSDCDeleteRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SSDSDCDeleteRsp::ArenaDtor(void* object) {
  SSDSDCDeleteRsp* _this = reinterpret_cast< SSDSDCDeleteRsp* >(object);
  (void)_this;
}
void SSDSDCDeleteRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SSDSDCDeleteRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SSDSDCDeleteRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:SSDSDCDeleteRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SSDSDCDeleteRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SSDSDCDeleteRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSDSDCDeleteRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSDSDCDeleteRsp)
  return target;
}

size_t SSDSDCDeleteRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SSDSDCDeleteRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool result = 1;
  if (this->_internal_result() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SSDSDCDeleteRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SSDSDCDeleteRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SSDSDCDeleteRsp::GetClassData() const { return &_class_data_; }

void SSDSDCDeleteRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SSDSDCDeleteRsp *>(to)->MergeFrom(
      static_cast<const SSDSDCDeleteRsp &>(from));
}


void SSDSDCDeleteRsp::MergeFrom(const SSDSDCDeleteRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SSDSDCDeleteRsp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_result() != 0) {
    _internal_set_result(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SSDSDCDeleteRsp::CopyFrom(const SSDSDCDeleteRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SSDSDCDeleteRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSDSDCDeleteRsp::IsInitialized() const {
  return true;
}

void SSDSDCDeleteRsp::InternalSwap(SSDSDCDeleteRsp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SSDSDCDeleteRsp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssdcds_2eproto_getter, &descriptor_table_ssdcds_2eproto_once,
      file_level_metadata_ssdcds_2eproto[13]);
}

// ===================================================================

class SSDCDSPkgBody::_Internal {
 public:
  static const ::SSDCDSSelectReq& select_req(const SSDCDSPkgBody* msg);
  static const ::SSDSDCSelectRsp& select_rsp(const SSDCDSPkgBody* msg);
  static const ::SSDCDSInsertReq& insert_req(const SSDCDSPkgBody* msg);
  static const ::SSDSDCInsertRsp& insert_rsp(const SSDCDSPkgBody* msg);
  static const ::SSDCDSUpdateReq& update_req(const SSDCDSPkgBody* msg);
  static const ::SSDSDCUpdateRsp& update_rsp(const SSDCDSPkgBody* msg);
  static const ::SSDCDSDeleteReq& delete_req(const SSDCDSPkgBody* msg);
  static const ::SSDSDCDeleteRsp& delete_rsp(const SSDCDSPkgBody* msg);
};

const ::SSDCDSSelectReq&
SSDCDSPkgBody::_Internal::select_req(const SSDCDSPkgBody* msg) {
  return *msg->body_.select_req_;
}
const ::SSDSDCSelectRsp&
SSDCDSPkgBody::_Internal::select_rsp(const SSDCDSPkgBody* msg) {
  return *msg->body_.select_rsp_;
}
const ::SSDCDSInsertReq&
SSDCDSPkgBody::_Internal::insert_req(const SSDCDSPkgBody* msg) {
  return *msg->body_.insert_req_;
}
const ::SSDSDCInsertRsp&
SSDCDSPkgBody::_Internal::insert_rsp(const SSDCDSPkgBody* msg) {
  return *msg->body_.insert_rsp_;
}
const ::SSDCDSUpdateReq&
SSDCDSPkgBody::_Internal::update_req(const SSDCDSPkgBody* msg) {
  return *msg->body_.update_req_;
}
const ::SSDSDCUpdateRsp&
SSDCDSPkgBody::_Internal::update_rsp(const SSDCDSPkgBody* msg) {
  return *msg->body_.update_rsp_;
}
const ::SSDCDSDeleteReq&
SSDCDSPkgBody::_Internal::delete_req(const SSDCDSPkgBody* msg) {
  return *msg->body_.delete_req_;
}
const ::SSDSDCDeleteRsp&
SSDCDSPkgBody::_Internal::delete_rsp(const SSDCDSPkgBody* msg) {
  return *msg->body_.delete_rsp_;
}
void SSDCDSPkgBody::set_allocated_select_req(::SSDCDSSelectReq* select_req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_body();
  if (select_req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::SSDCDSSelectReq>::GetOwningArena(select_req);
    if (message_arena != submessage_arena) {
      select_req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, select_req, submessage_arena);
    }
    set_has_select_req();
    body_.select_req_ = select_req;
  }
  // @@protoc_insertion_point(field_set_allocated:SSDCDSPkgBody.select_req)
}
void SSDCDSPkgBody::set_allocated_select_rsp(::SSDSDCSelectRsp* select_rsp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_body();
  if (select_rsp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::SSDSDCSelectRsp>::GetOwningArena(select_rsp);
    if (message_arena != submessage_arena) {
      select_rsp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, select_rsp, submessage_arena);
    }
    set_has_select_rsp();
    body_.select_rsp_ = select_rsp;
  }
  // @@protoc_insertion_point(field_set_allocated:SSDCDSPkgBody.select_rsp)
}
void SSDCDSPkgBody::set_allocated_insert_req(::SSDCDSInsertReq* insert_req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_body();
  if (insert_req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::SSDCDSInsertReq>::GetOwningArena(insert_req);
    if (message_arena != submessage_arena) {
      insert_req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, insert_req, submessage_arena);
    }
    set_has_insert_req();
    body_.insert_req_ = insert_req;
  }
  // @@protoc_insertion_point(field_set_allocated:SSDCDSPkgBody.insert_req)
}
void SSDCDSPkgBody::set_allocated_insert_rsp(::SSDSDCInsertRsp* insert_rsp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_body();
  if (insert_rsp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::SSDSDCInsertRsp>::GetOwningArena(insert_rsp);
    if (message_arena != submessage_arena) {
      insert_rsp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, insert_rsp, submessage_arena);
    }
    set_has_insert_rsp();
    body_.insert_rsp_ = insert_rsp;
  }
  // @@protoc_insertion_point(field_set_allocated:SSDCDSPkgBody.insert_rsp)
}
void SSDCDSPkgBody::set_allocated_update_req(::SSDCDSUpdateReq* update_req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_body();
  if (update_req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::SSDCDSUpdateReq>::GetOwningArena(update_req);
    if (message_arena != submessage_arena) {
      update_req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_req, submessage_arena);
    }
    set_has_update_req();
    body_.update_req_ = update_req;
  }
  // @@protoc_insertion_point(field_set_allocated:SSDCDSPkgBody.update_req)
}
void SSDCDSPkgBody::set_allocated_update_rsp(::SSDSDCUpdateRsp* update_rsp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_body();
  if (update_rsp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::SSDSDCUpdateRsp>::GetOwningArena(update_rsp);
    if (message_arena != submessage_arena) {
      update_rsp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_rsp, submessage_arena);
    }
    set_has_update_rsp();
    body_.update_rsp_ = update_rsp;
  }
  // @@protoc_insertion_point(field_set_allocated:SSDCDSPkgBody.update_rsp)
}
void SSDCDSPkgBody::set_allocated_delete_req(::SSDCDSDeleteReq* delete_req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_body();
  if (delete_req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::SSDCDSDeleteReq>::GetOwningArena(delete_req);
    if (message_arena != submessage_arena) {
      delete_req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, delete_req, submessage_arena);
    }
    set_has_delete_req();
    body_.delete_req_ = delete_req;
  }
  // @@protoc_insertion_point(field_set_allocated:SSDCDSPkgBody.delete_req)
}
void SSDCDSPkgBody::set_allocated_delete_rsp(::SSDSDCDeleteRsp* delete_rsp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_body();
  if (delete_rsp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::SSDSDCDeleteRsp>::GetOwningArena(delete_rsp);
    if (message_arena != submessage_arena) {
      delete_rsp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, delete_rsp, submessage_arena);
    }
    set_has_delete_rsp();
    body_.delete_rsp_ = delete_rsp;
  }
  // @@protoc_insertion_point(field_set_allocated:SSDCDSPkgBody.delete_rsp)
}
SSDCDSPkgBody::SSDCDSPkgBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:SSDCDSPkgBody)
}
SSDCDSPkgBody::SSDCDSPkgBody(const SSDCDSPkgBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_body();
  switch (from.body_case()) {
    case kSelectReq: {
      _internal_mutable_select_req()->::SSDCDSSelectReq::MergeFrom(from._internal_select_req());
      break;
    }
    case kSelectRsp: {
      _internal_mutable_select_rsp()->::SSDSDCSelectRsp::MergeFrom(from._internal_select_rsp());
      break;
    }
    case kInsertReq: {
      _internal_mutable_insert_req()->::SSDCDSInsertReq::MergeFrom(from._internal_insert_req());
      break;
    }
    case kInsertRsp: {
      _internal_mutable_insert_rsp()->::SSDSDCInsertRsp::MergeFrom(from._internal_insert_rsp());
      break;
    }
    case kUpdateReq: {
      _internal_mutable_update_req()->::SSDCDSUpdateReq::MergeFrom(from._internal_update_req());
      break;
    }
    case kUpdateRsp: {
      _internal_mutable_update_rsp()->::SSDSDCUpdateRsp::MergeFrom(from._internal_update_rsp());
      break;
    }
    case kDeleteReq: {
      _internal_mutable_delete_req()->::SSDCDSDeleteReq::MergeFrom(from._internal_delete_req());
      break;
    }
    case kDeleteRsp: {
      _internal_mutable_delete_rsp()->::SSDSDCDeleteRsp::MergeFrom(from._internal_delete_rsp());
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:SSDCDSPkgBody)
}

inline void SSDCDSPkgBody::SharedCtor() {
clear_has_body();
}

SSDCDSPkgBody::~SSDCDSPkgBody() {
  // @@protoc_insertion_point(destructor:SSDCDSPkgBody)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SSDCDSPkgBody::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_body()) {
    clear_body();
  }
}

void SSDCDSPkgBody::ArenaDtor(void* object) {
  SSDCDSPkgBody* _this = reinterpret_cast< SSDCDSPkgBody* >(object);
  (void)_this;
}
void SSDCDSPkgBody::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SSDCDSPkgBody::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SSDCDSPkgBody::clear_body() {
// @@protoc_insertion_point(one_of_clear_start:SSDCDSPkgBody)
  switch (body_case()) {
    case kSelectReq: {
      if (GetArenaForAllocation() == nullptr) {
        delete body_.select_req_;
      }
      break;
    }
    case kSelectRsp: {
      if (GetArenaForAllocation() == nullptr) {
        delete body_.select_rsp_;
      }
      break;
    }
    case kInsertReq: {
      if (GetArenaForAllocation() == nullptr) {
        delete body_.insert_req_;
      }
      break;
    }
    case kInsertRsp: {
      if (GetArenaForAllocation() == nullptr) {
        delete body_.insert_rsp_;
      }
      break;
    }
    case kUpdateReq: {
      if (GetArenaForAllocation() == nullptr) {
        delete body_.update_req_;
      }
      break;
    }
    case kUpdateRsp: {
      if (GetArenaForAllocation() == nullptr) {
        delete body_.update_rsp_;
      }
      break;
    }
    case kDeleteReq: {
      if (GetArenaForAllocation() == nullptr) {
        delete body_.delete_req_;
      }
      break;
    }
    case kDeleteRsp: {
      if (GetArenaForAllocation() == nullptr) {
        delete body_.delete_rsp_;
      }
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = BODY_NOT_SET;
}


void SSDCDSPkgBody::Clear() {
// @@protoc_insertion_point(message_clear_start:SSDCDSPkgBody)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_body();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SSDCDSPkgBody::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .SSDCDSSelectReq select_req = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_select_req(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SSDSDCSelectRsp select_rsp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_select_rsp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SSDCDSInsertReq insert_req = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_insert_req(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SSDSDCInsertRsp insert_rsp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_insert_rsp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SSDCDSUpdateReq update_req = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_req(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SSDSDCUpdateRsp update_rsp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_rsp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SSDCDSDeleteReq delete_req = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_delete_req(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SSDSDCDeleteRsp delete_rsp = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_delete_rsp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SSDCDSPkgBody::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSDCDSPkgBody)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .SSDCDSSelectReq select_req = 1;
  if (_internal_has_select_req()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::select_req(this), target, stream);
  }

  // .SSDSDCSelectRsp select_rsp = 2;
  if (_internal_has_select_rsp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::select_rsp(this), target, stream);
  }

  // .SSDCDSInsertReq insert_req = 3;
  if (_internal_has_insert_req()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::insert_req(this), target, stream);
  }

  // .SSDSDCInsertRsp insert_rsp = 4;
  if (_internal_has_insert_rsp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::insert_rsp(this), target, stream);
  }

  // .SSDCDSUpdateReq update_req = 5;
  if (_internal_has_update_req()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::update_req(this), target, stream);
  }

  // .SSDSDCUpdateRsp update_rsp = 6;
  if (_internal_has_update_rsp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::update_rsp(this), target, stream);
  }

  // .SSDCDSDeleteReq delete_req = 7;
  if (_internal_has_delete_req()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::delete_req(this), target, stream);
  }

  // .SSDSDCDeleteRsp delete_rsp = 8;
  if (_internal_has_delete_rsp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::delete_rsp(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSDCDSPkgBody)
  return target;
}

size_t SSDCDSPkgBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SSDCDSPkgBody)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (body_case()) {
    // .SSDCDSSelectReq select_req = 1;
    case kSelectReq: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *body_.select_req_);
      break;
    }
    // .SSDSDCSelectRsp select_rsp = 2;
    case kSelectRsp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *body_.select_rsp_);
      break;
    }
    // .SSDCDSInsertReq insert_req = 3;
    case kInsertReq: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *body_.insert_req_);
      break;
    }
    // .SSDSDCInsertRsp insert_rsp = 4;
    case kInsertRsp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *body_.insert_rsp_);
      break;
    }
    // .SSDCDSUpdateReq update_req = 5;
    case kUpdateReq: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *body_.update_req_);
      break;
    }
    // .SSDSDCUpdateRsp update_rsp = 6;
    case kUpdateRsp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *body_.update_rsp_);
      break;
    }
    // .SSDCDSDeleteReq delete_req = 7;
    case kDeleteReq: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *body_.delete_req_);
      break;
    }
    // .SSDSDCDeleteRsp delete_rsp = 8;
    case kDeleteRsp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *body_.delete_rsp_);
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SSDCDSPkgBody::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SSDCDSPkgBody::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SSDCDSPkgBody::GetClassData() const { return &_class_data_; }

void SSDCDSPkgBody::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SSDCDSPkgBody *>(to)->MergeFrom(
      static_cast<const SSDCDSPkgBody &>(from));
}


void SSDCDSPkgBody::MergeFrom(const SSDCDSPkgBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SSDCDSPkgBody)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.body_case()) {
    case kSelectReq: {
      _internal_mutable_select_req()->::SSDCDSSelectReq::MergeFrom(from._internal_select_req());
      break;
    }
    case kSelectRsp: {
      _internal_mutable_select_rsp()->::SSDSDCSelectRsp::MergeFrom(from._internal_select_rsp());
      break;
    }
    case kInsertReq: {
      _internal_mutable_insert_req()->::SSDCDSInsertReq::MergeFrom(from._internal_insert_req());
      break;
    }
    case kInsertRsp: {
      _internal_mutable_insert_rsp()->::SSDSDCInsertRsp::MergeFrom(from._internal_insert_rsp());
      break;
    }
    case kUpdateReq: {
      _internal_mutable_update_req()->::SSDCDSUpdateReq::MergeFrom(from._internal_update_req());
      break;
    }
    case kUpdateRsp: {
      _internal_mutable_update_rsp()->::SSDSDCUpdateRsp::MergeFrom(from._internal_update_rsp());
      break;
    }
    case kDeleteReq: {
      _internal_mutable_delete_req()->::SSDCDSDeleteReq::MergeFrom(from._internal_delete_req());
      break;
    }
    case kDeleteRsp: {
      _internal_mutable_delete_rsp()->::SSDSDCDeleteRsp::MergeFrom(from._internal_delete_rsp());
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SSDCDSPkgBody::CopyFrom(const SSDCDSPkgBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SSDCDSPkgBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSDCDSPkgBody::IsInitialized() const {
  return true;
}

void SSDCDSPkgBody::InternalSwap(SSDCDSPkgBody* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(body_, other->body_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SSDCDSPkgBody::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ssdcds_2eproto_getter, &descriptor_table_ssdcds_2eproto_once,
      file_level_metadata_ssdcds_2eproto[14]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::SSDCDSSelectReq_WhereEntry_DoNotUse* Arena::CreateMaybeMessage< ::SSDCDSSelectReq_WhereEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SSDCDSSelectReq_WhereEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::SSDCDSSelectReq* Arena::CreateMaybeMessage< ::SSDCDSSelectReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SSDCDSSelectReq >(arena);
}
template<> PROTOBUF_NOINLINE ::SSDSDCSelectRsp_VariantMap_ValueEntry_DoNotUse* Arena::CreateMaybeMessage< ::SSDSDCSelectRsp_VariantMap_ValueEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SSDSDCSelectRsp_VariantMap_ValueEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::SSDSDCSelectRsp_VariantMap* Arena::CreateMaybeMessage< ::SSDSDCSelectRsp_VariantMap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SSDSDCSelectRsp_VariantMap >(arena);
}
template<> PROTOBUF_NOINLINE ::SSDSDCSelectRsp* Arena::CreateMaybeMessage< ::SSDSDCSelectRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SSDSDCSelectRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::SSDCDSInsertReq* Arena::CreateMaybeMessage< ::SSDCDSInsertReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SSDCDSInsertReq >(arena);
}
template<> PROTOBUF_NOINLINE ::SSDSDCInsertRsp* Arena::CreateMaybeMessage< ::SSDSDCInsertRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SSDSDCInsertRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::SSDCDSUpdateReq_ValueEntry_DoNotUse* Arena::CreateMaybeMessage< ::SSDCDSUpdateReq_ValueEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SSDCDSUpdateReq_ValueEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::SSDCDSUpdateReq_WhereEntry_DoNotUse* Arena::CreateMaybeMessage< ::SSDCDSUpdateReq_WhereEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SSDCDSUpdateReq_WhereEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::SSDCDSUpdateReq* Arena::CreateMaybeMessage< ::SSDCDSUpdateReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SSDCDSUpdateReq >(arena);
}
template<> PROTOBUF_NOINLINE ::SSDSDCUpdateRsp* Arena::CreateMaybeMessage< ::SSDSDCUpdateRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SSDSDCUpdateRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::SSDCDSDeleteReq_WhereEntry_DoNotUse* Arena::CreateMaybeMessage< ::SSDCDSDeleteReq_WhereEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SSDCDSDeleteReq_WhereEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::SSDCDSDeleteReq* Arena::CreateMaybeMessage< ::SSDCDSDeleteReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SSDCDSDeleteReq >(arena);
}
template<> PROTOBUF_NOINLINE ::SSDSDCDeleteRsp* Arena::CreateMaybeMessage< ::SSDSDCDeleteRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SSDSDCDeleteRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::SSDCDSPkgBody* Arena::CreateMaybeMessage< ::SSDCDSPkgBody >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SSDCDSPkgBody >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
