// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sspcpx.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sspcpx_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sspcpx_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sspcpx_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sspcpx_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sspcpx_2eproto;
class SSPCPXHeartBeatReq;
struct SSPCPXHeartBeatReqDefaultTypeInternal;
extern SSPCPXHeartBeatReqDefaultTypeInternal _SSPCPXHeartBeatReq_default_instance_;
class SSPCPXNodeRegister;
struct SSPCPXNodeRegisterDefaultTypeInternal;
extern SSPCPXNodeRegisterDefaultTypeInternal _SSPCPXNodeRegister_default_instance_;
class SSPCPXNodeUnregister;
struct SSPCPXNodeUnregisterDefaultTypeInternal;
extern SSPCPXNodeUnregisterDefaultTypeInternal _SSPCPXNodeUnregister_default_instance_;
class SSPCPXPkgBody;
struct SSPCPXPkgBodyDefaultTypeInternal;
extern SSPCPXPkgBodyDefaultTypeInternal _SSPCPXPkgBody_default_instance_;
class SSPXPCHeartBeatRsp;
struct SSPXPCHeartBeatRspDefaultTypeInternal;
extern SSPXPCHeartBeatRspDefaultTypeInternal _SSPXPCHeartBeatRsp_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::SSPCPXHeartBeatReq* Arena::CreateMaybeMessage<::SSPCPXHeartBeatReq>(Arena*);
template<> ::SSPCPXNodeRegister* Arena::CreateMaybeMessage<::SSPCPXNodeRegister>(Arena*);
template<> ::SSPCPXNodeUnregister* Arena::CreateMaybeMessage<::SSPCPXNodeUnregister>(Arena*);
template<> ::SSPCPXPkgBody* Arena::CreateMaybeMessage<::SSPCPXPkgBody>(Arena*);
template<> ::SSPXPCHeartBeatRsp* Arena::CreateMaybeMessage<::SSPXPCHeartBeatRsp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class SSPCPXNodeRegister final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:SSPCPXNodeRegister) */ {
 public:
  inline SSPCPXNodeRegister() : SSPCPXNodeRegister(nullptr) {}
  explicit constexpr SSPCPXNodeRegister(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SSPCPXNodeRegister(const SSPCPXNodeRegister& from);
  SSPCPXNodeRegister(SSPCPXNodeRegister&& from) noexcept
    : SSPCPXNodeRegister() {
    *this = ::std::move(from);
  }

  inline SSPCPXNodeRegister& operator=(const SSPCPXNodeRegister& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSPCPXNodeRegister& operator=(SSPCPXNodeRegister&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SSPCPXNodeRegister& default_instance() {
    return *internal_default_instance();
  }
  static inline const SSPCPXNodeRegister* internal_default_instance() {
    return reinterpret_cast<const SSPCPXNodeRegister*>(
               &_SSPCPXNodeRegister_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SSPCPXNodeRegister& a, SSPCPXNodeRegister& b) {
    a.Swap(&b);
  }
  inline void Swap(SSPCPXNodeRegister* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SSPCPXNodeRegister* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SSPCPXNodeRegister* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SSPCPXNodeRegister>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SSPCPXNodeRegister& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SSPCPXNodeRegister& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SSPCPXNodeRegister";
  }
  protected:
  explicit SSPCPXNodeRegister(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:SSPCPXNodeRegister)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sspcpx_2eproto;
};
// -------------------------------------------------------------------

class SSPCPXNodeUnregister final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:SSPCPXNodeUnregister) */ {
 public:
  inline SSPCPXNodeUnregister() : SSPCPXNodeUnregister(nullptr) {}
  explicit constexpr SSPCPXNodeUnregister(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SSPCPXNodeUnregister(const SSPCPXNodeUnregister& from);
  SSPCPXNodeUnregister(SSPCPXNodeUnregister&& from) noexcept
    : SSPCPXNodeUnregister() {
    *this = ::std::move(from);
  }

  inline SSPCPXNodeUnregister& operator=(const SSPCPXNodeUnregister& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSPCPXNodeUnregister& operator=(SSPCPXNodeUnregister&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SSPCPXNodeUnregister& default_instance() {
    return *internal_default_instance();
  }
  static inline const SSPCPXNodeUnregister* internal_default_instance() {
    return reinterpret_cast<const SSPCPXNodeUnregister*>(
               &_SSPCPXNodeUnregister_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SSPCPXNodeUnregister& a, SSPCPXNodeUnregister& b) {
    a.Swap(&b);
  }
  inline void Swap(SSPCPXNodeUnregister* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SSPCPXNodeUnregister* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SSPCPXNodeUnregister* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SSPCPXNodeUnregister>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SSPCPXNodeUnregister& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SSPCPXNodeUnregister& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SSPCPXNodeUnregister";
  }
  protected:
  explicit SSPCPXNodeUnregister(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:SSPCPXNodeUnregister)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sspcpx_2eproto;
};
// -------------------------------------------------------------------

class SSPCPXHeartBeatReq final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:SSPCPXHeartBeatReq) */ {
 public:
  inline SSPCPXHeartBeatReq() : SSPCPXHeartBeatReq(nullptr) {}
  explicit constexpr SSPCPXHeartBeatReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SSPCPXHeartBeatReq(const SSPCPXHeartBeatReq& from);
  SSPCPXHeartBeatReq(SSPCPXHeartBeatReq&& from) noexcept
    : SSPCPXHeartBeatReq() {
    *this = ::std::move(from);
  }

  inline SSPCPXHeartBeatReq& operator=(const SSPCPXHeartBeatReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSPCPXHeartBeatReq& operator=(SSPCPXHeartBeatReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SSPCPXHeartBeatReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const SSPCPXHeartBeatReq* internal_default_instance() {
    return reinterpret_cast<const SSPCPXHeartBeatReq*>(
               &_SSPCPXHeartBeatReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SSPCPXHeartBeatReq& a, SSPCPXHeartBeatReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SSPCPXHeartBeatReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SSPCPXHeartBeatReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SSPCPXHeartBeatReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SSPCPXHeartBeatReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SSPCPXHeartBeatReq& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SSPCPXHeartBeatReq& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SSPCPXHeartBeatReq";
  }
  protected:
  explicit SSPCPXHeartBeatReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:SSPCPXHeartBeatReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sspcpx_2eproto;
};
// -------------------------------------------------------------------

class SSPXPCHeartBeatRsp final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:SSPXPCHeartBeatRsp) */ {
 public:
  inline SSPXPCHeartBeatRsp() : SSPXPCHeartBeatRsp(nullptr) {}
  explicit constexpr SSPXPCHeartBeatRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SSPXPCHeartBeatRsp(const SSPXPCHeartBeatRsp& from);
  SSPXPCHeartBeatRsp(SSPXPCHeartBeatRsp&& from) noexcept
    : SSPXPCHeartBeatRsp() {
    *this = ::std::move(from);
  }

  inline SSPXPCHeartBeatRsp& operator=(const SSPXPCHeartBeatRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSPXPCHeartBeatRsp& operator=(SSPXPCHeartBeatRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SSPXPCHeartBeatRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const SSPXPCHeartBeatRsp* internal_default_instance() {
    return reinterpret_cast<const SSPXPCHeartBeatRsp*>(
               &_SSPXPCHeartBeatRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SSPXPCHeartBeatRsp& a, SSPXPCHeartBeatRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(SSPXPCHeartBeatRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SSPXPCHeartBeatRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SSPXPCHeartBeatRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SSPXPCHeartBeatRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SSPXPCHeartBeatRsp& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SSPXPCHeartBeatRsp& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SSPXPCHeartBeatRsp";
  }
  protected:
  explicit SSPXPCHeartBeatRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:SSPXPCHeartBeatRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sspcpx_2eproto;
};
// -------------------------------------------------------------------

class SSPCPXPkgBody final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SSPCPXPkgBody) */ {
 public:
  inline SSPCPXPkgBody() : SSPCPXPkgBody(nullptr) {}
  ~SSPCPXPkgBody() override;
  explicit constexpr SSPCPXPkgBody(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SSPCPXPkgBody(const SSPCPXPkgBody& from);
  SSPCPXPkgBody(SSPCPXPkgBody&& from) noexcept
    : SSPCPXPkgBody() {
    *this = ::std::move(from);
  }

  inline SSPCPXPkgBody& operator=(const SSPCPXPkgBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSPCPXPkgBody& operator=(SSPCPXPkgBody&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SSPCPXPkgBody& default_instance() {
    return *internal_default_instance();
  }
  enum BodyCase {
    kNodeRegister = 1,
    kNodeUnregister = 2,
    kHeartBeatReq = 3,
    kHeartBeatRsp = 4,
    BODY_NOT_SET = 0,
  };

  static inline const SSPCPXPkgBody* internal_default_instance() {
    return reinterpret_cast<const SSPCPXPkgBody*>(
               &_SSPCPXPkgBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SSPCPXPkgBody& a, SSPCPXPkgBody& b) {
    a.Swap(&b);
  }
  inline void Swap(SSPCPXPkgBody* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SSPCPXPkgBody* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SSPCPXPkgBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SSPCPXPkgBody>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SSPCPXPkgBody& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SSPCPXPkgBody& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSPCPXPkgBody* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SSPCPXPkgBody";
  }
  protected:
  explicit SSPCPXPkgBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeRegisterFieldNumber = 1,
    kNodeUnregisterFieldNumber = 2,
    kHeartBeatReqFieldNumber = 3,
    kHeartBeatRspFieldNumber = 4,
  };
  // .SSPCPXNodeRegister node_register = 1;
  bool has_node_register() const;
  private:
  bool _internal_has_node_register() const;
  public:
  void clear_node_register();
  const ::SSPCPXNodeRegister& node_register() const;
  PROTOBUF_NODISCARD ::SSPCPXNodeRegister* release_node_register();
  ::SSPCPXNodeRegister* mutable_node_register();
  void set_allocated_node_register(::SSPCPXNodeRegister* node_register);
  private:
  const ::SSPCPXNodeRegister& _internal_node_register() const;
  ::SSPCPXNodeRegister* _internal_mutable_node_register();
  public:
  void unsafe_arena_set_allocated_node_register(
      ::SSPCPXNodeRegister* node_register);
  ::SSPCPXNodeRegister* unsafe_arena_release_node_register();

  // .SSPCPXNodeUnregister node_unregister = 2;
  bool has_node_unregister() const;
  private:
  bool _internal_has_node_unregister() const;
  public:
  void clear_node_unregister();
  const ::SSPCPXNodeUnregister& node_unregister() const;
  PROTOBUF_NODISCARD ::SSPCPXNodeUnregister* release_node_unregister();
  ::SSPCPXNodeUnregister* mutable_node_unregister();
  void set_allocated_node_unregister(::SSPCPXNodeUnregister* node_unregister);
  private:
  const ::SSPCPXNodeUnregister& _internal_node_unregister() const;
  ::SSPCPXNodeUnregister* _internal_mutable_node_unregister();
  public:
  void unsafe_arena_set_allocated_node_unregister(
      ::SSPCPXNodeUnregister* node_unregister);
  ::SSPCPXNodeUnregister* unsafe_arena_release_node_unregister();

  // .SSPCPXHeartBeatReq heart_beat_req = 3;
  bool has_heart_beat_req() const;
  private:
  bool _internal_has_heart_beat_req() const;
  public:
  void clear_heart_beat_req();
  const ::SSPCPXHeartBeatReq& heart_beat_req() const;
  PROTOBUF_NODISCARD ::SSPCPXHeartBeatReq* release_heart_beat_req();
  ::SSPCPXHeartBeatReq* mutable_heart_beat_req();
  void set_allocated_heart_beat_req(::SSPCPXHeartBeatReq* heart_beat_req);
  private:
  const ::SSPCPXHeartBeatReq& _internal_heart_beat_req() const;
  ::SSPCPXHeartBeatReq* _internal_mutable_heart_beat_req();
  public:
  void unsafe_arena_set_allocated_heart_beat_req(
      ::SSPCPXHeartBeatReq* heart_beat_req);
  ::SSPCPXHeartBeatReq* unsafe_arena_release_heart_beat_req();

  // .SSPXPCHeartBeatRsp heart_beat_rsp = 4;
  bool has_heart_beat_rsp() const;
  private:
  bool _internal_has_heart_beat_rsp() const;
  public:
  void clear_heart_beat_rsp();
  const ::SSPXPCHeartBeatRsp& heart_beat_rsp() const;
  PROTOBUF_NODISCARD ::SSPXPCHeartBeatRsp* release_heart_beat_rsp();
  ::SSPXPCHeartBeatRsp* mutable_heart_beat_rsp();
  void set_allocated_heart_beat_rsp(::SSPXPCHeartBeatRsp* heart_beat_rsp);
  private:
  const ::SSPXPCHeartBeatRsp& _internal_heart_beat_rsp() const;
  ::SSPXPCHeartBeatRsp* _internal_mutable_heart_beat_rsp();
  public:
  void unsafe_arena_set_allocated_heart_beat_rsp(
      ::SSPXPCHeartBeatRsp* heart_beat_rsp);
  ::SSPXPCHeartBeatRsp* unsafe_arena_release_heart_beat_rsp();

  void clear_body();
  BodyCase body_case() const;
  // @@protoc_insertion_point(class_scope:SSPCPXPkgBody)
 private:
  class _Internal;
  void set_has_node_register();
  void set_has_node_unregister();
  void set_has_heart_beat_req();
  void set_has_heart_beat_rsp();

  inline bool has_body() const;
  inline void clear_has_body();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union BodyUnion {
    constexpr BodyUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::SSPCPXNodeRegister* node_register_;
    ::SSPCPXNodeUnregister* node_unregister_;
    ::SSPCPXHeartBeatReq* heart_beat_req_;
    ::SSPXPCHeartBeatRsp* heart_beat_rsp_;
  } body_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_sspcpx_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SSPCPXNodeRegister

// -------------------------------------------------------------------

// SSPCPXNodeUnregister

// -------------------------------------------------------------------

// SSPCPXHeartBeatReq

// -------------------------------------------------------------------

// SSPXPCHeartBeatRsp

// -------------------------------------------------------------------

// SSPCPXPkgBody

// .SSPCPXNodeRegister node_register = 1;
inline bool SSPCPXPkgBody::_internal_has_node_register() const {
  return body_case() == kNodeRegister;
}
inline bool SSPCPXPkgBody::has_node_register() const {
  return _internal_has_node_register();
}
inline void SSPCPXPkgBody::set_has_node_register() {
  _oneof_case_[0] = kNodeRegister;
}
inline void SSPCPXPkgBody::clear_node_register() {
  if (_internal_has_node_register()) {
    if (GetArenaForAllocation() == nullptr) {
      delete body_.node_register_;
    }
    clear_has_body();
  }
}
inline ::SSPCPXNodeRegister* SSPCPXPkgBody::release_node_register() {
  // @@protoc_insertion_point(field_release:SSPCPXPkgBody.node_register)
  if (_internal_has_node_register()) {
    clear_has_body();
      ::SSPCPXNodeRegister* temp = body_.node_register_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    body_.node_register_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::SSPCPXNodeRegister& SSPCPXPkgBody::_internal_node_register() const {
  return _internal_has_node_register()
      ? *body_.node_register_
      : reinterpret_cast< ::SSPCPXNodeRegister&>(::_SSPCPXNodeRegister_default_instance_);
}
inline const ::SSPCPXNodeRegister& SSPCPXPkgBody::node_register() const {
  // @@protoc_insertion_point(field_get:SSPCPXPkgBody.node_register)
  return _internal_node_register();
}
inline ::SSPCPXNodeRegister* SSPCPXPkgBody::unsafe_arena_release_node_register() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SSPCPXPkgBody.node_register)
  if (_internal_has_node_register()) {
    clear_has_body();
    ::SSPCPXNodeRegister* temp = body_.node_register_;
    body_.node_register_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SSPCPXPkgBody::unsafe_arena_set_allocated_node_register(::SSPCPXNodeRegister* node_register) {
  clear_body();
  if (node_register) {
    set_has_node_register();
    body_.node_register_ = node_register;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SSPCPXPkgBody.node_register)
}
inline ::SSPCPXNodeRegister* SSPCPXPkgBody::_internal_mutable_node_register() {
  if (!_internal_has_node_register()) {
    clear_body();
    set_has_node_register();
    body_.node_register_ = CreateMaybeMessage< ::SSPCPXNodeRegister >(GetArenaForAllocation());
  }
  return body_.node_register_;
}
inline ::SSPCPXNodeRegister* SSPCPXPkgBody::mutable_node_register() {
  ::SSPCPXNodeRegister* _msg = _internal_mutable_node_register();
  // @@protoc_insertion_point(field_mutable:SSPCPXPkgBody.node_register)
  return _msg;
}

// .SSPCPXNodeUnregister node_unregister = 2;
inline bool SSPCPXPkgBody::_internal_has_node_unregister() const {
  return body_case() == kNodeUnregister;
}
inline bool SSPCPXPkgBody::has_node_unregister() const {
  return _internal_has_node_unregister();
}
inline void SSPCPXPkgBody::set_has_node_unregister() {
  _oneof_case_[0] = kNodeUnregister;
}
inline void SSPCPXPkgBody::clear_node_unregister() {
  if (_internal_has_node_unregister()) {
    if (GetArenaForAllocation() == nullptr) {
      delete body_.node_unregister_;
    }
    clear_has_body();
  }
}
inline ::SSPCPXNodeUnregister* SSPCPXPkgBody::release_node_unregister() {
  // @@protoc_insertion_point(field_release:SSPCPXPkgBody.node_unregister)
  if (_internal_has_node_unregister()) {
    clear_has_body();
      ::SSPCPXNodeUnregister* temp = body_.node_unregister_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    body_.node_unregister_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::SSPCPXNodeUnregister& SSPCPXPkgBody::_internal_node_unregister() const {
  return _internal_has_node_unregister()
      ? *body_.node_unregister_
      : reinterpret_cast< ::SSPCPXNodeUnregister&>(::_SSPCPXNodeUnregister_default_instance_);
}
inline const ::SSPCPXNodeUnregister& SSPCPXPkgBody::node_unregister() const {
  // @@protoc_insertion_point(field_get:SSPCPXPkgBody.node_unregister)
  return _internal_node_unregister();
}
inline ::SSPCPXNodeUnregister* SSPCPXPkgBody::unsafe_arena_release_node_unregister() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SSPCPXPkgBody.node_unregister)
  if (_internal_has_node_unregister()) {
    clear_has_body();
    ::SSPCPXNodeUnregister* temp = body_.node_unregister_;
    body_.node_unregister_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SSPCPXPkgBody::unsafe_arena_set_allocated_node_unregister(::SSPCPXNodeUnregister* node_unregister) {
  clear_body();
  if (node_unregister) {
    set_has_node_unregister();
    body_.node_unregister_ = node_unregister;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SSPCPXPkgBody.node_unregister)
}
inline ::SSPCPXNodeUnregister* SSPCPXPkgBody::_internal_mutable_node_unregister() {
  if (!_internal_has_node_unregister()) {
    clear_body();
    set_has_node_unregister();
    body_.node_unregister_ = CreateMaybeMessage< ::SSPCPXNodeUnregister >(GetArenaForAllocation());
  }
  return body_.node_unregister_;
}
inline ::SSPCPXNodeUnregister* SSPCPXPkgBody::mutable_node_unregister() {
  ::SSPCPXNodeUnregister* _msg = _internal_mutable_node_unregister();
  // @@protoc_insertion_point(field_mutable:SSPCPXPkgBody.node_unregister)
  return _msg;
}

// .SSPCPXHeartBeatReq heart_beat_req = 3;
inline bool SSPCPXPkgBody::_internal_has_heart_beat_req() const {
  return body_case() == kHeartBeatReq;
}
inline bool SSPCPXPkgBody::has_heart_beat_req() const {
  return _internal_has_heart_beat_req();
}
inline void SSPCPXPkgBody::set_has_heart_beat_req() {
  _oneof_case_[0] = kHeartBeatReq;
}
inline void SSPCPXPkgBody::clear_heart_beat_req() {
  if (_internal_has_heart_beat_req()) {
    if (GetArenaForAllocation() == nullptr) {
      delete body_.heart_beat_req_;
    }
    clear_has_body();
  }
}
inline ::SSPCPXHeartBeatReq* SSPCPXPkgBody::release_heart_beat_req() {
  // @@protoc_insertion_point(field_release:SSPCPXPkgBody.heart_beat_req)
  if (_internal_has_heart_beat_req()) {
    clear_has_body();
      ::SSPCPXHeartBeatReq* temp = body_.heart_beat_req_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    body_.heart_beat_req_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::SSPCPXHeartBeatReq& SSPCPXPkgBody::_internal_heart_beat_req() const {
  return _internal_has_heart_beat_req()
      ? *body_.heart_beat_req_
      : reinterpret_cast< ::SSPCPXHeartBeatReq&>(::_SSPCPXHeartBeatReq_default_instance_);
}
inline const ::SSPCPXHeartBeatReq& SSPCPXPkgBody::heart_beat_req() const {
  // @@protoc_insertion_point(field_get:SSPCPXPkgBody.heart_beat_req)
  return _internal_heart_beat_req();
}
inline ::SSPCPXHeartBeatReq* SSPCPXPkgBody::unsafe_arena_release_heart_beat_req() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SSPCPXPkgBody.heart_beat_req)
  if (_internal_has_heart_beat_req()) {
    clear_has_body();
    ::SSPCPXHeartBeatReq* temp = body_.heart_beat_req_;
    body_.heart_beat_req_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SSPCPXPkgBody::unsafe_arena_set_allocated_heart_beat_req(::SSPCPXHeartBeatReq* heart_beat_req) {
  clear_body();
  if (heart_beat_req) {
    set_has_heart_beat_req();
    body_.heart_beat_req_ = heart_beat_req;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SSPCPXPkgBody.heart_beat_req)
}
inline ::SSPCPXHeartBeatReq* SSPCPXPkgBody::_internal_mutable_heart_beat_req() {
  if (!_internal_has_heart_beat_req()) {
    clear_body();
    set_has_heart_beat_req();
    body_.heart_beat_req_ = CreateMaybeMessage< ::SSPCPXHeartBeatReq >(GetArenaForAllocation());
  }
  return body_.heart_beat_req_;
}
inline ::SSPCPXHeartBeatReq* SSPCPXPkgBody::mutable_heart_beat_req() {
  ::SSPCPXHeartBeatReq* _msg = _internal_mutable_heart_beat_req();
  // @@protoc_insertion_point(field_mutable:SSPCPXPkgBody.heart_beat_req)
  return _msg;
}

// .SSPXPCHeartBeatRsp heart_beat_rsp = 4;
inline bool SSPCPXPkgBody::_internal_has_heart_beat_rsp() const {
  return body_case() == kHeartBeatRsp;
}
inline bool SSPCPXPkgBody::has_heart_beat_rsp() const {
  return _internal_has_heart_beat_rsp();
}
inline void SSPCPXPkgBody::set_has_heart_beat_rsp() {
  _oneof_case_[0] = kHeartBeatRsp;
}
inline void SSPCPXPkgBody::clear_heart_beat_rsp() {
  if (_internal_has_heart_beat_rsp()) {
    if (GetArenaForAllocation() == nullptr) {
      delete body_.heart_beat_rsp_;
    }
    clear_has_body();
  }
}
inline ::SSPXPCHeartBeatRsp* SSPCPXPkgBody::release_heart_beat_rsp() {
  // @@protoc_insertion_point(field_release:SSPCPXPkgBody.heart_beat_rsp)
  if (_internal_has_heart_beat_rsp()) {
    clear_has_body();
      ::SSPXPCHeartBeatRsp* temp = body_.heart_beat_rsp_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    body_.heart_beat_rsp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::SSPXPCHeartBeatRsp& SSPCPXPkgBody::_internal_heart_beat_rsp() const {
  return _internal_has_heart_beat_rsp()
      ? *body_.heart_beat_rsp_
      : reinterpret_cast< ::SSPXPCHeartBeatRsp&>(::_SSPXPCHeartBeatRsp_default_instance_);
}
inline const ::SSPXPCHeartBeatRsp& SSPCPXPkgBody::heart_beat_rsp() const {
  // @@protoc_insertion_point(field_get:SSPCPXPkgBody.heart_beat_rsp)
  return _internal_heart_beat_rsp();
}
inline ::SSPXPCHeartBeatRsp* SSPCPXPkgBody::unsafe_arena_release_heart_beat_rsp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SSPCPXPkgBody.heart_beat_rsp)
  if (_internal_has_heart_beat_rsp()) {
    clear_has_body();
    ::SSPXPCHeartBeatRsp* temp = body_.heart_beat_rsp_;
    body_.heart_beat_rsp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SSPCPXPkgBody::unsafe_arena_set_allocated_heart_beat_rsp(::SSPXPCHeartBeatRsp* heart_beat_rsp) {
  clear_body();
  if (heart_beat_rsp) {
    set_has_heart_beat_rsp();
    body_.heart_beat_rsp_ = heart_beat_rsp;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SSPCPXPkgBody.heart_beat_rsp)
}
inline ::SSPXPCHeartBeatRsp* SSPCPXPkgBody::_internal_mutable_heart_beat_rsp() {
  if (!_internal_has_heart_beat_rsp()) {
    clear_body();
    set_has_heart_beat_rsp();
    body_.heart_beat_rsp_ = CreateMaybeMessage< ::SSPXPCHeartBeatRsp >(GetArenaForAllocation());
  }
  return body_.heart_beat_rsp_;
}
inline ::SSPXPCHeartBeatRsp* SSPCPXPkgBody::mutable_heart_beat_rsp() {
  ::SSPXPCHeartBeatRsp* _msg = _internal_mutable_heart_beat_rsp();
  // @@protoc_insertion_point(field_mutable:SSPCPXPkgBody.heart_beat_rsp)
  return _msg;
}

inline bool SSPCPXPkgBody::has_body() const {
  return body_case() != BODY_NOT_SET;
}
inline void SSPCPXPkgBody::clear_has_body() {
  _oneof_case_[0] = BODY_NOT_SET;
}
inline SSPCPXPkgBody::BodyCase SSPCPXPkgBody::body_case() const {
  return SSPCPXPkgBody::BodyCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sspcpx_2eproto
