// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: io.proto

#include "io.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr IORegisterReq::IORegisterReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct IORegisterReqDefaultTypeInternal {
  constexpr IORegisterReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IORegisterReqDefaultTypeInternal() {}
  union {
    IORegisterReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IORegisterReqDefaultTypeInternal _IORegisterReq_default_instance_;
constexpr IORegisterRsp::IORegisterRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct IORegisterRspDefaultTypeInternal {
  constexpr IORegisterRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IORegisterRspDefaultTypeInternal() {}
  union {
    IORegisterRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IORegisterRspDefaultTypeInternal _IORegisterRsp_default_instance_;
constexpr IOAuthReq::IOAuthReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : role_id_(0u)
  , game_id_(0u){}
struct IOAuthReqDefaultTypeInternal {
  constexpr IOAuthReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IOAuthReqDefaultTypeInternal() {}
  union {
    IOAuthReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IOAuthReqDefaultTypeInternal _IOAuthReq_default_instance_;
constexpr IOAuthRsp::IOAuthRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0)
{}
struct IOAuthRspDefaultTypeInternal {
  constexpr IOAuthRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IOAuthRspDefaultTypeInternal() {}
  union {
    IOAuthRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IOAuthRspDefaultTypeInternal _IOAuthRsp_default_instance_;
constexpr IOPkgHead::IOPkgHead(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(0)
{}
struct IOPkgHeadDefaultTypeInternal {
  constexpr IOPkgHeadDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IOPkgHeadDefaultTypeInternal() {}
  union {
    IOPkgHead _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IOPkgHeadDefaultTypeInternal _IOPkgHead_default_instance_;
constexpr IOPkgBody::IOPkgBody(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct IOPkgBodyDefaultTypeInternal {
  constexpr IOPkgBodyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IOPkgBodyDefaultTypeInternal() {}
  union {
    IOPkgBody _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IOPkgBodyDefaultTypeInternal _IOPkgBody_default_instance_;
constexpr IOPkg::IOPkg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : head_(nullptr)
  , body_(nullptr){}
struct IOPkgDefaultTypeInternal {
  constexpr IOPkgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IOPkgDefaultTypeInternal() {}
  union {
    IOPkg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IOPkgDefaultTypeInternal _IOPkg_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_io_2eproto[7];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_io_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_io_2eproto = nullptr;

const uint32_t TableStruct_io_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IORegisterReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IORegisterRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IOAuthReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::IOAuthReq, role_id_),
  PROTOBUF_FIELD_OFFSET(::IOAuthReq, game_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IOAuthRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::IOAuthRsp, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IOPkgHead, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::IOPkgHead, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IOPkgBody, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::IOPkgBody, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::IOPkgBody, body_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IOPkg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::IOPkg, head_),
  PROTOBUF_FIELD_OFFSET(::IOPkg, body_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::IORegisterReq)},
  { 6, -1, -1, sizeof(::IORegisterRsp)},
  { 12, -1, -1, sizeof(::IOAuthReq)},
  { 20, -1, -1, sizeof(::IOAuthRsp)},
  { 27, -1, -1, sizeof(::IOPkgHead)},
  { 34, -1, -1, sizeof(::IOPkgBody)},
  { 45, -1, -1, sizeof(::IOPkg)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_IORegisterReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_IORegisterRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_IOAuthReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_IOAuthRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_IOPkgHead_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_IOPkgBody_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_IOPkg_default_instance_),
};

const char descriptor_table_protodef_io_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\010io.proto\032\nioid.proto\"\017\n\rIORegisterReq\""
  "\017\n\rIORegisterRsp\"-\n\tIOAuthReq\022\017\n\007role_id"
  "\030\001 \001(\r\022\017\n\007game_id\030\002 \001(\r\"E\n\tIOAuthRsp\022!\n\006"
  "result\030\001 \001(\0162\021.IOAuthRsp.RESULT\"\025\n\006RESUL"
  "T\022\013\n\007SUCCESS\020\000\"\036\n\tIOPkgHead\022\021\n\002id\030\001 \001(\0162"
  "\005.IOID\"\243\001\n\tIOPkgBody\022&\n\014register_req\030\001 \001"
  "(\0132\016.IORegisterReqH\000\022&\n\014register_rsp\030\002 \001"
  "(\0132\016.IORegisterRspH\000\022\036\n\010auth_req\030\003 \001(\0132\n"
  ".IOAuthReqH\000\022\036\n\010auth_rsp\030\004 \001(\0132\n.IOAuthR"
  "spH\000B\006\n\004body\";\n\005IOPkg\022\030\n\004head\030\001 \001(\0132\n.IO"
  "PkgHead\022\030\n\004body\030\002 \001(\0132\n.IOPkgBodyb\006proto"
  "3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_io_2eproto_deps[1] = {
  &::descriptor_table_ioid_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_io_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_io_2eproto = {
  false, false, 441, descriptor_table_protodef_io_2eproto, "io.proto", 
  &descriptor_table_io_2eproto_once, descriptor_table_io_2eproto_deps, 1, 7,
  schemas, file_default_instances, TableStruct_io_2eproto::offsets,
  file_level_metadata_io_2eproto, file_level_enum_descriptors_io_2eproto, file_level_service_descriptors_io_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_io_2eproto_getter() {
  return &descriptor_table_io_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_io_2eproto(&descriptor_table_io_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IOAuthRsp_RESULT_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_io_2eproto);
  return file_level_enum_descriptors_io_2eproto[0];
}
bool IOAuthRsp_RESULT_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr IOAuthRsp_RESULT IOAuthRsp::SUCCESS;
constexpr IOAuthRsp_RESULT IOAuthRsp::RESULT_MIN;
constexpr IOAuthRsp_RESULT IOAuthRsp::RESULT_MAX;
constexpr int IOAuthRsp::RESULT_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class IORegisterReq::_Internal {
 public:
};

IORegisterReq::IORegisterReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:IORegisterReq)
}
IORegisterReq::IORegisterReq(const IORegisterReq& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:IORegisterReq)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IORegisterReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IORegisterReq::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata IORegisterReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_io_2eproto_getter, &descriptor_table_io_2eproto_once,
      file_level_metadata_io_2eproto[0]);
}

// ===================================================================

class IORegisterRsp::_Internal {
 public:
};

IORegisterRsp::IORegisterRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:IORegisterRsp)
}
IORegisterRsp::IORegisterRsp(const IORegisterRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:IORegisterRsp)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IORegisterRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IORegisterRsp::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata IORegisterRsp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_io_2eproto_getter, &descriptor_table_io_2eproto_once,
      file_level_metadata_io_2eproto[1]);
}

// ===================================================================

class IOAuthReq::_Internal {
 public:
};

IOAuthReq::IOAuthReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:IOAuthReq)
}
IOAuthReq::IOAuthReq(const IOAuthReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&role_id_, &from.role_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&game_id_) -
    reinterpret_cast<char*>(&role_id_)) + sizeof(game_id_));
  // @@protoc_insertion_point(copy_constructor:IOAuthReq)
}

inline void IOAuthReq::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&role_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&game_id_) -
    reinterpret_cast<char*>(&role_id_)) + sizeof(game_id_));
}

IOAuthReq::~IOAuthReq() {
  // @@protoc_insertion_point(destructor:IOAuthReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IOAuthReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IOAuthReq::ArenaDtor(void* object) {
  IOAuthReq* _this = reinterpret_cast< IOAuthReq* >(object);
  (void)_this;
}
void IOAuthReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IOAuthReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IOAuthReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IOAuthReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&role_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&game_id_) -
      reinterpret_cast<char*>(&role_id_)) + sizeof(game_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IOAuthReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 role_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          role_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 game_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IOAuthReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IOAuthReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 role_id = 1;
  if (this->_internal_role_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_role_id(), target);
  }

  // uint32 game_id = 2;
  if (this->_internal_game_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_game_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IOAuthReq)
  return target;
}

size_t IOAuthReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IOAuthReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 role_id = 1;
  if (this->_internal_role_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_role_id());
  }

  // uint32 game_id = 2;
  if (this->_internal_game_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_game_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IOAuthReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IOAuthReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IOAuthReq::GetClassData() const { return &_class_data_; }

void IOAuthReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IOAuthReq *>(to)->MergeFrom(
      static_cast<const IOAuthReq &>(from));
}


void IOAuthReq::MergeFrom(const IOAuthReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IOAuthReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_role_id() != 0) {
    _internal_set_role_id(from._internal_role_id());
  }
  if (from._internal_game_id() != 0) {
    _internal_set_game_id(from._internal_game_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IOAuthReq::CopyFrom(const IOAuthReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IOAuthReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IOAuthReq::IsInitialized() const {
  return true;
}

void IOAuthReq::InternalSwap(IOAuthReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IOAuthReq, game_id_)
      + sizeof(IOAuthReq::game_id_)
      - PROTOBUF_FIELD_OFFSET(IOAuthReq, role_id_)>(
          reinterpret_cast<char*>(&role_id_),
          reinterpret_cast<char*>(&other->role_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IOAuthReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_io_2eproto_getter, &descriptor_table_io_2eproto_once,
      file_level_metadata_io_2eproto[2]);
}

// ===================================================================

class IOAuthRsp::_Internal {
 public:
};

IOAuthRsp::IOAuthRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:IOAuthRsp)
}
IOAuthRsp::IOAuthRsp(const IOAuthRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:IOAuthRsp)
}

inline void IOAuthRsp::SharedCtor() {
result_ = 0;
}

IOAuthRsp::~IOAuthRsp() {
  // @@protoc_insertion_point(destructor:IOAuthRsp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IOAuthRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IOAuthRsp::ArenaDtor(void* object) {
  IOAuthRsp* _this = reinterpret_cast< IOAuthRsp* >(object);
  (void)_this;
}
void IOAuthRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IOAuthRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IOAuthRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:IOAuthRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IOAuthRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .IOAuthRsp.RESULT result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::IOAuthRsp_RESULT>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IOAuthRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IOAuthRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .IOAuthRsp.RESULT result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IOAuthRsp)
  return target;
}

size_t IOAuthRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IOAuthRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .IOAuthRsp.RESULT result = 1;
  if (this->_internal_result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IOAuthRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IOAuthRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IOAuthRsp::GetClassData() const { return &_class_data_; }

void IOAuthRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IOAuthRsp *>(to)->MergeFrom(
      static_cast<const IOAuthRsp &>(from));
}


void IOAuthRsp::MergeFrom(const IOAuthRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IOAuthRsp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_result() != 0) {
    _internal_set_result(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IOAuthRsp::CopyFrom(const IOAuthRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IOAuthRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IOAuthRsp::IsInitialized() const {
  return true;
}

void IOAuthRsp::InternalSwap(IOAuthRsp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IOAuthRsp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_io_2eproto_getter, &descriptor_table_io_2eproto_once,
      file_level_metadata_io_2eproto[3]);
}

// ===================================================================

class IOPkgHead::_Internal {
 public:
};

IOPkgHead::IOPkgHead(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:IOPkgHead)
}
IOPkgHead::IOPkgHead(const IOPkgHead& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:IOPkgHead)
}

inline void IOPkgHead::SharedCtor() {
id_ = 0;
}

IOPkgHead::~IOPkgHead() {
  // @@protoc_insertion_point(destructor:IOPkgHead)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IOPkgHead::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IOPkgHead::ArenaDtor(void* object) {
  IOPkgHead* _this = reinterpret_cast< IOPkgHead* >(object);
  (void)_this;
}
void IOPkgHead::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IOPkgHead::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IOPkgHead::Clear() {
// @@protoc_insertion_point(message_clear_start:IOPkgHead)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IOPkgHead::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .IOID id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_id(static_cast<::IOID>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IOPkgHead::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IOPkgHead)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .IOID id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IOPkgHead)
  return target;
}

size_t IOPkgHead::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IOPkgHead)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .IOID id = 1;
  if (this->_internal_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IOPkgHead::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IOPkgHead::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IOPkgHead::GetClassData() const { return &_class_data_; }

void IOPkgHead::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IOPkgHead *>(to)->MergeFrom(
      static_cast<const IOPkgHead &>(from));
}


void IOPkgHead::MergeFrom(const IOPkgHead& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IOPkgHead)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IOPkgHead::CopyFrom(const IOPkgHead& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IOPkgHead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IOPkgHead::IsInitialized() const {
  return true;
}

void IOPkgHead::InternalSwap(IOPkgHead* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IOPkgHead::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_io_2eproto_getter, &descriptor_table_io_2eproto_once,
      file_level_metadata_io_2eproto[4]);
}

// ===================================================================

class IOPkgBody::_Internal {
 public:
  static const ::IORegisterReq& register_req(const IOPkgBody* msg);
  static const ::IORegisterRsp& register_rsp(const IOPkgBody* msg);
  static const ::IOAuthReq& auth_req(const IOPkgBody* msg);
  static const ::IOAuthRsp& auth_rsp(const IOPkgBody* msg);
};

const ::IORegisterReq&
IOPkgBody::_Internal::register_req(const IOPkgBody* msg) {
  return *msg->body_.register_req_;
}
const ::IORegisterRsp&
IOPkgBody::_Internal::register_rsp(const IOPkgBody* msg) {
  return *msg->body_.register_rsp_;
}
const ::IOAuthReq&
IOPkgBody::_Internal::auth_req(const IOPkgBody* msg) {
  return *msg->body_.auth_req_;
}
const ::IOAuthRsp&
IOPkgBody::_Internal::auth_rsp(const IOPkgBody* msg) {
  return *msg->body_.auth_rsp_;
}
void IOPkgBody::set_allocated_register_req(::IORegisterReq* register_req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_body();
  if (register_req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::IORegisterReq>::GetOwningArena(register_req);
    if (message_arena != submessage_arena) {
      register_req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, register_req, submessage_arena);
    }
    set_has_register_req();
    body_.register_req_ = register_req;
  }
  // @@protoc_insertion_point(field_set_allocated:IOPkgBody.register_req)
}
void IOPkgBody::set_allocated_register_rsp(::IORegisterRsp* register_rsp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_body();
  if (register_rsp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::IORegisterRsp>::GetOwningArena(register_rsp);
    if (message_arena != submessage_arena) {
      register_rsp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, register_rsp, submessage_arena);
    }
    set_has_register_rsp();
    body_.register_rsp_ = register_rsp;
  }
  // @@protoc_insertion_point(field_set_allocated:IOPkgBody.register_rsp)
}
void IOPkgBody::set_allocated_auth_req(::IOAuthReq* auth_req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_body();
  if (auth_req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::IOAuthReq>::GetOwningArena(auth_req);
    if (message_arena != submessage_arena) {
      auth_req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, auth_req, submessage_arena);
    }
    set_has_auth_req();
    body_.auth_req_ = auth_req;
  }
  // @@protoc_insertion_point(field_set_allocated:IOPkgBody.auth_req)
}
void IOPkgBody::set_allocated_auth_rsp(::IOAuthRsp* auth_rsp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_body();
  if (auth_rsp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::IOAuthRsp>::GetOwningArena(auth_rsp);
    if (message_arena != submessage_arena) {
      auth_rsp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, auth_rsp, submessage_arena);
    }
    set_has_auth_rsp();
    body_.auth_rsp_ = auth_rsp;
  }
  // @@protoc_insertion_point(field_set_allocated:IOPkgBody.auth_rsp)
}
IOPkgBody::IOPkgBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:IOPkgBody)
}
IOPkgBody::IOPkgBody(const IOPkgBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_body();
  switch (from.body_case()) {
    case kRegisterReq: {
      _internal_mutable_register_req()->::IORegisterReq::MergeFrom(from._internal_register_req());
      break;
    }
    case kRegisterRsp: {
      _internal_mutable_register_rsp()->::IORegisterRsp::MergeFrom(from._internal_register_rsp());
      break;
    }
    case kAuthReq: {
      _internal_mutable_auth_req()->::IOAuthReq::MergeFrom(from._internal_auth_req());
      break;
    }
    case kAuthRsp: {
      _internal_mutable_auth_rsp()->::IOAuthRsp::MergeFrom(from._internal_auth_rsp());
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:IOPkgBody)
}

inline void IOPkgBody::SharedCtor() {
clear_has_body();
}

IOPkgBody::~IOPkgBody() {
  // @@protoc_insertion_point(destructor:IOPkgBody)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IOPkgBody::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_body()) {
    clear_body();
  }
}

void IOPkgBody::ArenaDtor(void* object) {
  IOPkgBody* _this = reinterpret_cast< IOPkgBody* >(object);
  (void)_this;
}
void IOPkgBody::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IOPkgBody::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IOPkgBody::clear_body() {
// @@protoc_insertion_point(one_of_clear_start:IOPkgBody)
  switch (body_case()) {
    case kRegisterReq: {
      if (GetArenaForAllocation() == nullptr) {
        delete body_.register_req_;
      }
      break;
    }
    case kRegisterRsp: {
      if (GetArenaForAllocation() == nullptr) {
        delete body_.register_rsp_;
      }
      break;
    }
    case kAuthReq: {
      if (GetArenaForAllocation() == nullptr) {
        delete body_.auth_req_;
      }
      break;
    }
    case kAuthRsp: {
      if (GetArenaForAllocation() == nullptr) {
        delete body_.auth_rsp_;
      }
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = BODY_NOT_SET;
}


void IOPkgBody::Clear() {
// @@protoc_insertion_point(message_clear_start:IOPkgBody)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_body();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IOPkgBody::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .IORegisterReq register_req = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_register_req(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .IORegisterRsp register_rsp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_register_rsp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .IOAuthReq auth_req = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_auth_req(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .IOAuthRsp auth_rsp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_auth_rsp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IOPkgBody::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IOPkgBody)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .IORegisterReq register_req = 1;
  if (_internal_has_register_req()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::register_req(this), target, stream);
  }

  // .IORegisterRsp register_rsp = 2;
  if (_internal_has_register_rsp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::register_rsp(this), target, stream);
  }

  // .IOAuthReq auth_req = 3;
  if (_internal_has_auth_req()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::auth_req(this), target, stream);
  }

  // .IOAuthRsp auth_rsp = 4;
  if (_internal_has_auth_rsp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::auth_rsp(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IOPkgBody)
  return target;
}

size_t IOPkgBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IOPkgBody)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (body_case()) {
    // .IORegisterReq register_req = 1;
    case kRegisterReq: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *body_.register_req_);
      break;
    }
    // .IORegisterRsp register_rsp = 2;
    case kRegisterRsp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *body_.register_rsp_);
      break;
    }
    // .IOAuthReq auth_req = 3;
    case kAuthReq: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *body_.auth_req_);
      break;
    }
    // .IOAuthRsp auth_rsp = 4;
    case kAuthRsp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *body_.auth_rsp_);
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IOPkgBody::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IOPkgBody::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IOPkgBody::GetClassData() const { return &_class_data_; }

void IOPkgBody::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IOPkgBody *>(to)->MergeFrom(
      static_cast<const IOPkgBody &>(from));
}


void IOPkgBody::MergeFrom(const IOPkgBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IOPkgBody)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.body_case()) {
    case kRegisterReq: {
      _internal_mutable_register_req()->::IORegisterReq::MergeFrom(from._internal_register_req());
      break;
    }
    case kRegisterRsp: {
      _internal_mutable_register_rsp()->::IORegisterRsp::MergeFrom(from._internal_register_rsp());
      break;
    }
    case kAuthReq: {
      _internal_mutable_auth_req()->::IOAuthReq::MergeFrom(from._internal_auth_req());
      break;
    }
    case kAuthRsp: {
      _internal_mutable_auth_rsp()->::IOAuthRsp::MergeFrom(from._internal_auth_rsp());
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IOPkgBody::CopyFrom(const IOPkgBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IOPkgBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IOPkgBody::IsInitialized() const {
  return true;
}

void IOPkgBody::InternalSwap(IOPkgBody* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(body_, other->body_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata IOPkgBody::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_io_2eproto_getter, &descriptor_table_io_2eproto_once,
      file_level_metadata_io_2eproto[5]);
}

// ===================================================================

class IOPkg::_Internal {
 public:
  static const ::IOPkgHead& head(const IOPkg* msg);
  static const ::IOPkgBody& body(const IOPkg* msg);
};

const ::IOPkgHead&
IOPkg::_Internal::head(const IOPkg* msg) {
  return *msg->head_;
}
const ::IOPkgBody&
IOPkg::_Internal::body(const IOPkg* msg) {
  return *msg->body_;
}
IOPkg::IOPkg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:IOPkg)
}
IOPkg::IOPkg(const IOPkg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_head()) {
    head_ = new ::IOPkgHead(*from.head_);
  } else {
    head_ = nullptr;
  }
  if (from._internal_has_body()) {
    body_ = new ::IOPkgBody(*from.body_);
  } else {
    body_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:IOPkg)
}

inline void IOPkg::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&head_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&body_) -
    reinterpret_cast<char*>(&head_)) + sizeof(body_));
}

IOPkg::~IOPkg() {
  // @@protoc_insertion_point(destructor:IOPkg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IOPkg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete head_;
  if (this != internal_default_instance()) delete body_;
}

void IOPkg::ArenaDtor(void* object) {
  IOPkg* _this = reinterpret_cast< IOPkg* >(object);
  (void)_this;
}
void IOPkg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IOPkg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IOPkg::Clear() {
// @@protoc_insertion_point(message_clear_start:IOPkg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && head_ != nullptr) {
    delete head_;
  }
  head_ = nullptr;
  if (GetArenaForAllocation() == nullptr && body_ != nullptr) {
    delete body_;
  }
  body_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IOPkg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .IOPkgHead head = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_head(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .IOPkgBody body = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_body(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IOPkg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IOPkg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .IOPkgHead head = 1;
  if (this->_internal_has_head()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::head(this), target, stream);
  }

  // .IOPkgBody body = 2;
  if (this->_internal_has_body()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::body(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IOPkg)
  return target;
}

size_t IOPkg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IOPkg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .IOPkgHead head = 1;
  if (this->_internal_has_head()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *head_);
  }

  // .IOPkgBody body = 2;
  if (this->_internal_has_body()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *body_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IOPkg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IOPkg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IOPkg::GetClassData() const { return &_class_data_; }

void IOPkg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IOPkg *>(to)->MergeFrom(
      static_cast<const IOPkg &>(from));
}


void IOPkg::MergeFrom(const IOPkg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IOPkg)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_head()) {
    _internal_mutable_head()->::IOPkgHead::MergeFrom(from._internal_head());
  }
  if (from._internal_has_body()) {
    _internal_mutable_body()->::IOPkgBody::MergeFrom(from._internal_body());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IOPkg::CopyFrom(const IOPkg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IOPkg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IOPkg::IsInitialized() const {
  return true;
}

void IOPkg::InternalSwap(IOPkg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IOPkg, body_)
      + sizeof(IOPkg::body_)
      - PROTOBUF_FIELD_OFFSET(IOPkg, head_)>(
          reinterpret_cast<char*>(&head_),
          reinterpret_cast<char*>(&other->head_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IOPkg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_io_2eproto_getter, &descriptor_table_io_2eproto_once,
      file_level_metadata_io_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::IORegisterReq* Arena::CreateMaybeMessage< ::IORegisterReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IORegisterReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IORegisterRsp* Arena::CreateMaybeMessage< ::IORegisterRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IORegisterRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::IOAuthReq* Arena::CreateMaybeMessage< ::IOAuthReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IOAuthReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IOAuthRsp* Arena::CreateMaybeMessage< ::IOAuthRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IOAuthRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::IOPkgHead* Arena::CreateMaybeMessage< ::IOPkgHead >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IOPkgHead >(arena);
}
template<> PROTOBUF_NOINLINE ::IOPkgBody* Arena::CreateMaybeMessage< ::IOPkgBody >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IOPkgBody >(arena);
}
template<> PROTOBUF_NOINLINE ::IOPkg* Arena::CreateMaybeMessage< ::IOPkg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IOPkg >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
