// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cs.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cs_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cs_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "csid.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cs_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cs_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cs_2eproto;
class CSAuthReq;
struct CSAuthReqDefaultTypeInternal;
extern CSAuthReqDefaultTypeInternal _CSAuthReq_default_instance_;
class CSHeartBeatReq;
struct CSHeartBeatReqDefaultTypeInternal;
extern CSHeartBeatReqDefaultTypeInternal _CSHeartBeatReq_default_instance_;
class CSLoginReq;
struct CSLoginReqDefaultTypeInternal;
extern CSLoginReqDefaultTypeInternal _CSLoginReq_default_instance_;
class CSLogoutReq;
struct CSLogoutReqDefaultTypeInternal;
extern CSLogoutReqDefaultTypeInternal _CSLogoutReq_default_instance_;
class CSPkg;
struct CSPkgDefaultTypeInternal;
extern CSPkgDefaultTypeInternal _CSPkg_default_instance_;
class CSPkgBody;
struct CSPkgBodyDefaultTypeInternal;
extern CSPkgBodyDefaultTypeInternal _CSPkgBody_default_instance_;
class CSPkgHead;
struct CSPkgHeadDefaultTypeInternal;
extern CSPkgHeadDefaultTypeInternal _CSPkgHead_default_instance_;
class SCAuthRsp;
struct SCAuthRspDefaultTypeInternal;
extern SCAuthRspDefaultTypeInternal _SCAuthRsp_default_instance_;
class SCHeartBeatRsp;
struct SCHeartBeatRspDefaultTypeInternal;
extern SCHeartBeatRspDefaultTypeInternal _SCHeartBeatRsp_default_instance_;
class SCLoginRsp;
struct SCLoginRspDefaultTypeInternal;
extern SCLoginRspDefaultTypeInternal _SCLoginRsp_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CSAuthReq* Arena::CreateMaybeMessage<::CSAuthReq>(Arena*);
template<> ::CSHeartBeatReq* Arena::CreateMaybeMessage<::CSHeartBeatReq>(Arena*);
template<> ::CSLoginReq* Arena::CreateMaybeMessage<::CSLoginReq>(Arena*);
template<> ::CSLogoutReq* Arena::CreateMaybeMessage<::CSLogoutReq>(Arena*);
template<> ::CSPkg* Arena::CreateMaybeMessage<::CSPkg>(Arena*);
template<> ::CSPkgBody* Arena::CreateMaybeMessage<::CSPkgBody>(Arena*);
template<> ::CSPkgHead* Arena::CreateMaybeMessage<::CSPkgHead>(Arena*);
template<> ::SCAuthRsp* Arena::CreateMaybeMessage<::SCAuthRsp>(Arena*);
template<> ::SCHeartBeatRsp* Arena::CreateMaybeMessage<::SCHeartBeatRsp>(Arena*);
template<> ::SCLoginRsp* Arena::CreateMaybeMessage<::SCLoginRsp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum SCAuthRsp_RESULT : int {
  SCAuthRsp_RESULT_SUCCESS = 0,
  SCAuthRsp_RESULT_SCAuthRsp_RESULT_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SCAuthRsp_RESULT_SCAuthRsp_RESULT_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SCAuthRsp_RESULT_IsValid(int value);
constexpr SCAuthRsp_RESULT SCAuthRsp_RESULT_RESULT_MIN = SCAuthRsp_RESULT_SUCCESS;
constexpr SCAuthRsp_RESULT SCAuthRsp_RESULT_RESULT_MAX = SCAuthRsp_RESULT_SUCCESS;
constexpr int SCAuthRsp_RESULT_RESULT_ARRAYSIZE = SCAuthRsp_RESULT_RESULT_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SCAuthRsp_RESULT_descriptor();
template<typename T>
inline const std::string& SCAuthRsp_RESULT_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SCAuthRsp_RESULT>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SCAuthRsp_RESULT_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SCAuthRsp_RESULT_descriptor(), enum_t_value);
}
inline bool SCAuthRsp_RESULT_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SCAuthRsp_RESULT* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SCAuthRsp_RESULT>(
    SCAuthRsp_RESULT_descriptor(), name, value);
}
enum SCLoginRsp_RESULT : int {
  SCLoginRsp_RESULT_SUCCESS = 0,
  SCLoginRsp_RESULT_SCLoginRsp_RESULT_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SCLoginRsp_RESULT_SCLoginRsp_RESULT_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SCLoginRsp_RESULT_IsValid(int value);
constexpr SCLoginRsp_RESULT SCLoginRsp_RESULT_RESULT_MIN = SCLoginRsp_RESULT_SUCCESS;
constexpr SCLoginRsp_RESULT SCLoginRsp_RESULT_RESULT_MAX = SCLoginRsp_RESULT_SUCCESS;
constexpr int SCLoginRsp_RESULT_RESULT_ARRAYSIZE = SCLoginRsp_RESULT_RESULT_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SCLoginRsp_RESULT_descriptor();
template<typename T>
inline const std::string& SCLoginRsp_RESULT_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SCLoginRsp_RESULT>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SCLoginRsp_RESULT_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SCLoginRsp_RESULT_descriptor(), enum_t_value);
}
inline bool SCLoginRsp_RESULT_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SCLoginRsp_RESULT* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SCLoginRsp_RESULT>(
    SCLoginRsp_RESULT_descriptor(), name, value);
}
// ===================================================================

class CSAuthReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSAuthReq) */ {
 public:
  inline CSAuthReq() : CSAuthReq(nullptr) {}
  ~CSAuthReq() override;
  explicit constexpr CSAuthReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSAuthReq(const CSAuthReq& from);
  CSAuthReq(CSAuthReq&& from) noexcept
    : CSAuthReq() {
    *this = ::std::move(from);
  }

  inline CSAuthReq& operator=(const CSAuthReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSAuthReq& operator=(CSAuthReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSAuthReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSAuthReq* internal_default_instance() {
    return reinterpret_cast<const CSAuthReq*>(
               &_CSAuthReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CSAuthReq& a, CSAuthReq& b) {
    a.Swap(&b);
  }
  inline void Swap(CSAuthReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSAuthReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSAuthReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSAuthReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSAuthReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CSAuthReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSAuthReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSAuthReq";
  }
  protected:
  explicit CSAuthReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleIdFieldNumber = 1,
    kGameIdFieldNumber = 2,
  };
  // uint32 role_id = 1;
  void clear_role_id();
  uint32_t role_id() const;
  void set_role_id(uint32_t value);
  private:
  uint32_t _internal_role_id() const;
  void _internal_set_role_id(uint32_t value);
  public:

  // uint32 game_id = 2;
  void clear_game_id();
  uint32_t game_id() const;
  void set_game_id(uint32_t value);
  private:
  uint32_t _internal_game_id() const;
  void _internal_set_game_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CSAuthReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t role_id_;
  uint32_t game_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cs_2eproto;
};
// -------------------------------------------------------------------

class SCAuthRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SCAuthRsp) */ {
 public:
  inline SCAuthRsp() : SCAuthRsp(nullptr) {}
  ~SCAuthRsp() override;
  explicit constexpr SCAuthRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SCAuthRsp(const SCAuthRsp& from);
  SCAuthRsp(SCAuthRsp&& from) noexcept
    : SCAuthRsp() {
    *this = ::std::move(from);
  }

  inline SCAuthRsp& operator=(const SCAuthRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCAuthRsp& operator=(SCAuthRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SCAuthRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const SCAuthRsp* internal_default_instance() {
    return reinterpret_cast<const SCAuthRsp*>(
               &_SCAuthRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SCAuthRsp& a, SCAuthRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(SCAuthRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCAuthRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SCAuthRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SCAuthRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SCAuthRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SCAuthRsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCAuthRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SCAuthRsp";
  }
  protected:
  explicit SCAuthRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SCAuthRsp_RESULT RESULT;
  static constexpr RESULT SUCCESS =
    SCAuthRsp_RESULT_SUCCESS;
  static inline bool RESULT_IsValid(int value) {
    return SCAuthRsp_RESULT_IsValid(value);
  }
  static constexpr RESULT RESULT_MIN =
    SCAuthRsp_RESULT_RESULT_MIN;
  static constexpr RESULT RESULT_MAX =
    SCAuthRsp_RESULT_RESULT_MAX;
  static constexpr int RESULT_ARRAYSIZE =
    SCAuthRsp_RESULT_RESULT_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  RESULT_descriptor() {
    return SCAuthRsp_RESULT_descriptor();
  }
  template<typename T>
  static inline const std::string& RESULT_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RESULT>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RESULT_Name.");
    return SCAuthRsp_RESULT_Name(enum_t_value);
  }
  static inline bool RESULT_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      RESULT* value) {
    return SCAuthRsp_RESULT_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // .SCAuthRsp.RESULT result = 1;
  void clear_result();
  ::SCAuthRsp_RESULT result() const;
  void set_result(::SCAuthRsp_RESULT value);
  private:
  ::SCAuthRsp_RESULT _internal_result() const;
  void _internal_set_result(::SCAuthRsp_RESULT value);
  public:

  // @@protoc_insertion_point(class_scope:SCAuthRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cs_2eproto;
};
// -------------------------------------------------------------------

class CSLoginReq final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CSLoginReq) */ {
 public:
  inline CSLoginReq() : CSLoginReq(nullptr) {}
  explicit constexpr CSLoginReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSLoginReq(const CSLoginReq& from);
  CSLoginReq(CSLoginReq&& from) noexcept
    : CSLoginReq() {
    *this = ::std::move(from);
  }

  inline CSLoginReq& operator=(const CSLoginReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSLoginReq& operator=(CSLoginReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSLoginReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSLoginReq* internal_default_instance() {
    return reinterpret_cast<const CSLoginReq*>(
               &_CSLoginReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CSLoginReq& a, CSLoginReq& b) {
    a.Swap(&b);
  }
  inline void Swap(CSLoginReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSLoginReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSLoginReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSLoginReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CSLoginReq& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CSLoginReq& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSLoginReq";
  }
  protected:
  explicit CSLoginReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CSLoginReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cs_2eproto;
};
// -------------------------------------------------------------------

class SCLoginRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SCLoginRsp) */ {
 public:
  inline SCLoginRsp() : SCLoginRsp(nullptr) {}
  ~SCLoginRsp() override;
  explicit constexpr SCLoginRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SCLoginRsp(const SCLoginRsp& from);
  SCLoginRsp(SCLoginRsp&& from) noexcept
    : SCLoginRsp() {
    *this = ::std::move(from);
  }

  inline SCLoginRsp& operator=(const SCLoginRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCLoginRsp& operator=(SCLoginRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SCLoginRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const SCLoginRsp* internal_default_instance() {
    return reinterpret_cast<const SCLoginRsp*>(
               &_SCLoginRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SCLoginRsp& a, SCLoginRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(SCLoginRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCLoginRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SCLoginRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SCLoginRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SCLoginRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SCLoginRsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCLoginRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SCLoginRsp";
  }
  protected:
  explicit SCLoginRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SCLoginRsp_RESULT RESULT;
  static constexpr RESULT SUCCESS =
    SCLoginRsp_RESULT_SUCCESS;
  static inline bool RESULT_IsValid(int value) {
    return SCLoginRsp_RESULT_IsValid(value);
  }
  static constexpr RESULT RESULT_MIN =
    SCLoginRsp_RESULT_RESULT_MIN;
  static constexpr RESULT RESULT_MAX =
    SCLoginRsp_RESULT_RESULT_MAX;
  static constexpr int RESULT_ARRAYSIZE =
    SCLoginRsp_RESULT_RESULT_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  RESULT_descriptor() {
    return SCLoginRsp_RESULT_descriptor();
  }
  template<typename T>
  static inline const std::string& RESULT_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RESULT>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RESULT_Name.");
    return SCLoginRsp_RESULT_Name(enum_t_value);
  }
  static inline bool RESULT_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      RESULT* value) {
    return SCLoginRsp_RESULT_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // .SCLoginRsp.RESULT result = 1;
  void clear_result();
  ::SCLoginRsp_RESULT result() const;
  void set_result(::SCLoginRsp_RESULT value);
  private:
  ::SCLoginRsp_RESULT _internal_result() const;
  void _internal_set_result(::SCLoginRsp_RESULT value);
  public:

  // @@protoc_insertion_point(class_scope:SCLoginRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cs_2eproto;
};
// -------------------------------------------------------------------

class CSLogoutReq final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CSLogoutReq) */ {
 public:
  inline CSLogoutReq() : CSLogoutReq(nullptr) {}
  explicit constexpr CSLogoutReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSLogoutReq(const CSLogoutReq& from);
  CSLogoutReq(CSLogoutReq&& from) noexcept
    : CSLogoutReq() {
    *this = ::std::move(from);
  }

  inline CSLogoutReq& operator=(const CSLogoutReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSLogoutReq& operator=(CSLogoutReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSLogoutReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSLogoutReq* internal_default_instance() {
    return reinterpret_cast<const CSLogoutReq*>(
               &_CSLogoutReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CSLogoutReq& a, CSLogoutReq& b) {
    a.Swap(&b);
  }
  inline void Swap(CSLogoutReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSLogoutReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSLogoutReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSLogoutReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CSLogoutReq& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CSLogoutReq& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSLogoutReq";
  }
  protected:
  explicit CSLogoutReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CSLogoutReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cs_2eproto;
};
// -------------------------------------------------------------------

class CSHeartBeatReq final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CSHeartBeatReq) */ {
 public:
  inline CSHeartBeatReq() : CSHeartBeatReq(nullptr) {}
  explicit constexpr CSHeartBeatReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSHeartBeatReq(const CSHeartBeatReq& from);
  CSHeartBeatReq(CSHeartBeatReq&& from) noexcept
    : CSHeartBeatReq() {
    *this = ::std::move(from);
  }

  inline CSHeartBeatReq& operator=(const CSHeartBeatReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSHeartBeatReq& operator=(CSHeartBeatReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSHeartBeatReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSHeartBeatReq* internal_default_instance() {
    return reinterpret_cast<const CSHeartBeatReq*>(
               &_CSHeartBeatReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CSHeartBeatReq& a, CSHeartBeatReq& b) {
    a.Swap(&b);
  }
  inline void Swap(CSHeartBeatReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSHeartBeatReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSHeartBeatReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSHeartBeatReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CSHeartBeatReq& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CSHeartBeatReq& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSHeartBeatReq";
  }
  protected:
  explicit CSHeartBeatReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CSHeartBeatReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cs_2eproto;
};
// -------------------------------------------------------------------

class SCHeartBeatRsp final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:SCHeartBeatRsp) */ {
 public:
  inline SCHeartBeatRsp() : SCHeartBeatRsp(nullptr) {}
  explicit constexpr SCHeartBeatRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SCHeartBeatRsp(const SCHeartBeatRsp& from);
  SCHeartBeatRsp(SCHeartBeatRsp&& from) noexcept
    : SCHeartBeatRsp() {
    *this = ::std::move(from);
  }

  inline SCHeartBeatRsp& operator=(const SCHeartBeatRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCHeartBeatRsp& operator=(SCHeartBeatRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SCHeartBeatRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const SCHeartBeatRsp* internal_default_instance() {
    return reinterpret_cast<const SCHeartBeatRsp*>(
               &_SCHeartBeatRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SCHeartBeatRsp& a, SCHeartBeatRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(SCHeartBeatRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCHeartBeatRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SCHeartBeatRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SCHeartBeatRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SCHeartBeatRsp& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SCHeartBeatRsp& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SCHeartBeatRsp";
  }
  protected:
  explicit SCHeartBeatRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:SCHeartBeatRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cs_2eproto;
};
// -------------------------------------------------------------------

class CSPkgHead final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSPkgHead) */ {
 public:
  inline CSPkgHead() : CSPkgHead(nullptr) {}
  ~CSPkgHead() override;
  explicit constexpr CSPkgHead(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSPkgHead(const CSPkgHead& from);
  CSPkgHead(CSPkgHead&& from) noexcept
    : CSPkgHead() {
    *this = ::std::move(from);
  }

  inline CSPkgHead& operator=(const CSPkgHead& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSPkgHead& operator=(CSPkgHead&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSPkgHead& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSPkgHead* internal_default_instance() {
    return reinterpret_cast<const CSPkgHead*>(
               &_CSPkgHead_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CSPkgHead& a, CSPkgHead& b) {
    a.Swap(&b);
  }
  inline void Swap(CSPkgHead* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSPkgHead* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSPkgHead* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSPkgHead>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSPkgHead& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CSPkgHead& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSPkgHead* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSPkgHead";
  }
  protected:
  explicit CSPkgHead(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // .CSID id = 1;
  void clear_id();
  ::CSID id() const;
  void set_id(::CSID value);
  private:
  ::CSID _internal_id() const;
  void _internal_set_id(::CSID value);
  public:

  // @@protoc_insertion_point(class_scope:CSPkgHead)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cs_2eproto;
};
// -------------------------------------------------------------------

class CSPkgBody final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSPkgBody) */ {
 public:
  inline CSPkgBody() : CSPkgBody(nullptr) {}
  ~CSPkgBody() override;
  explicit constexpr CSPkgBody(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSPkgBody(const CSPkgBody& from);
  CSPkgBody(CSPkgBody&& from) noexcept
    : CSPkgBody() {
    *this = ::std::move(from);
  }

  inline CSPkgBody& operator=(const CSPkgBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSPkgBody& operator=(CSPkgBody&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSPkgBody& default_instance() {
    return *internal_default_instance();
  }
  enum BodyCase {
    kAuthReq = 1,
    kAuthRsp = 2,
    kLoginReq = 3,
    kLoginRsp = 4,
    kLogoutReq = 5,
    kHeartBeatReq = 6,
    kHeartBeatRsp = 7,
    BODY_NOT_SET = 0,
  };

  static inline const CSPkgBody* internal_default_instance() {
    return reinterpret_cast<const CSPkgBody*>(
               &_CSPkgBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CSPkgBody& a, CSPkgBody& b) {
    a.Swap(&b);
  }
  inline void Swap(CSPkgBody* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSPkgBody* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSPkgBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSPkgBody>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSPkgBody& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CSPkgBody& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSPkgBody* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSPkgBody";
  }
  protected:
  explicit CSPkgBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuthReqFieldNumber = 1,
    kAuthRspFieldNumber = 2,
    kLoginReqFieldNumber = 3,
    kLoginRspFieldNumber = 4,
    kLogoutReqFieldNumber = 5,
    kHeartBeatReqFieldNumber = 6,
    kHeartBeatRspFieldNumber = 7,
  };
  // .CSAuthReq auth_req = 1;
  bool has_auth_req() const;
  private:
  bool _internal_has_auth_req() const;
  public:
  void clear_auth_req();
  const ::CSAuthReq& auth_req() const;
  PROTOBUF_NODISCARD ::CSAuthReq* release_auth_req();
  ::CSAuthReq* mutable_auth_req();
  void set_allocated_auth_req(::CSAuthReq* auth_req);
  private:
  const ::CSAuthReq& _internal_auth_req() const;
  ::CSAuthReq* _internal_mutable_auth_req();
  public:
  void unsafe_arena_set_allocated_auth_req(
      ::CSAuthReq* auth_req);
  ::CSAuthReq* unsafe_arena_release_auth_req();

  // .SCAuthRsp auth_rsp = 2;
  bool has_auth_rsp() const;
  private:
  bool _internal_has_auth_rsp() const;
  public:
  void clear_auth_rsp();
  const ::SCAuthRsp& auth_rsp() const;
  PROTOBUF_NODISCARD ::SCAuthRsp* release_auth_rsp();
  ::SCAuthRsp* mutable_auth_rsp();
  void set_allocated_auth_rsp(::SCAuthRsp* auth_rsp);
  private:
  const ::SCAuthRsp& _internal_auth_rsp() const;
  ::SCAuthRsp* _internal_mutable_auth_rsp();
  public:
  void unsafe_arena_set_allocated_auth_rsp(
      ::SCAuthRsp* auth_rsp);
  ::SCAuthRsp* unsafe_arena_release_auth_rsp();

  // .CSLoginReq login_req = 3;
  bool has_login_req() const;
  private:
  bool _internal_has_login_req() const;
  public:
  void clear_login_req();
  const ::CSLoginReq& login_req() const;
  PROTOBUF_NODISCARD ::CSLoginReq* release_login_req();
  ::CSLoginReq* mutable_login_req();
  void set_allocated_login_req(::CSLoginReq* login_req);
  private:
  const ::CSLoginReq& _internal_login_req() const;
  ::CSLoginReq* _internal_mutable_login_req();
  public:
  void unsafe_arena_set_allocated_login_req(
      ::CSLoginReq* login_req);
  ::CSLoginReq* unsafe_arena_release_login_req();

  // .SCLoginRsp login_rsp = 4;
  bool has_login_rsp() const;
  private:
  bool _internal_has_login_rsp() const;
  public:
  void clear_login_rsp();
  const ::SCLoginRsp& login_rsp() const;
  PROTOBUF_NODISCARD ::SCLoginRsp* release_login_rsp();
  ::SCLoginRsp* mutable_login_rsp();
  void set_allocated_login_rsp(::SCLoginRsp* login_rsp);
  private:
  const ::SCLoginRsp& _internal_login_rsp() const;
  ::SCLoginRsp* _internal_mutable_login_rsp();
  public:
  void unsafe_arena_set_allocated_login_rsp(
      ::SCLoginRsp* login_rsp);
  ::SCLoginRsp* unsafe_arena_release_login_rsp();

  // .CSLogoutReq logout_req = 5;
  bool has_logout_req() const;
  private:
  bool _internal_has_logout_req() const;
  public:
  void clear_logout_req();
  const ::CSLogoutReq& logout_req() const;
  PROTOBUF_NODISCARD ::CSLogoutReq* release_logout_req();
  ::CSLogoutReq* mutable_logout_req();
  void set_allocated_logout_req(::CSLogoutReq* logout_req);
  private:
  const ::CSLogoutReq& _internal_logout_req() const;
  ::CSLogoutReq* _internal_mutable_logout_req();
  public:
  void unsafe_arena_set_allocated_logout_req(
      ::CSLogoutReq* logout_req);
  ::CSLogoutReq* unsafe_arena_release_logout_req();

  // .CSHeartBeatReq heart_beat_req = 6;
  bool has_heart_beat_req() const;
  private:
  bool _internal_has_heart_beat_req() const;
  public:
  void clear_heart_beat_req();
  const ::CSHeartBeatReq& heart_beat_req() const;
  PROTOBUF_NODISCARD ::CSHeartBeatReq* release_heart_beat_req();
  ::CSHeartBeatReq* mutable_heart_beat_req();
  void set_allocated_heart_beat_req(::CSHeartBeatReq* heart_beat_req);
  private:
  const ::CSHeartBeatReq& _internal_heart_beat_req() const;
  ::CSHeartBeatReq* _internal_mutable_heart_beat_req();
  public:
  void unsafe_arena_set_allocated_heart_beat_req(
      ::CSHeartBeatReq* heart_beat_req);
  ::CSHeartBeatReq* unsafe_arena_release_heart_beat_req();

  // .SCHeartBeatRsp heart_beat_rsp = 7;
  bool has_heart_beat_rsp() const;
  private:
  bool _internal_has_heart_beat_rsp() const;
  public:
  void clear_heart_beat_rsp();
  const ::SCHeartBeatRsp& heart_beat_rsp() const;
  PROTOBUF_NODISCARD ::SCHeartBeatRsp* release_heart_beat_rsp();
  ::SCHeartBeatRsp* mutable_heart_beat_rsp();
  void set_allocated_heart_beat_rsp(::SCHeartBeatRsp* heart_beat_rsp);
  private:
  const ::SCHeartBeatRsp& _internal_heart_beat_rsp() const;
  ::SCHeartBeatRsp* _internal_mutable_heart_beat_rsp();
  public:
  void unsafe_arena_set_allocated_heart_beat_rsp(
      ::SCHeartBeatRsp* heart_beat_rsp);
  ::SCHeartBeatRsp* unsafe_arena_release_heart_beat_rsp();

  void clear_body();
  BodyCase body_case() const;
  // @@protoc_insertion_point(class_scope:CSPkgBody)
 private:
  class _Internal;
  void set_has_auth_req();
  void set_has_auth_rsp();
  void set_has_login_req();
  void set_has_login_rsp();
  void set_has_logout_req();
  void set_has_heart_beat_req();
  void set_has_heart_beat_rsp();

  inline bool has_body() const;
  inline void clear_has_body();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union BodyUnion {
    constexpr BodyUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::CSAuthReq* auth_req_;
    ::SCAuthRsp* auth_rsp_;
    ::CSLoginReq* login_req_;
    ::SCLoginRsp* login_rsp_;
    ::CSLogoutReq* logout_req_;
    ::CSHeartBeatReq* heart_beat_req_;
    ::SCHeartBeatRsp* heart_beat_rsp_;
  } body_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_cs_2eproto;
};
// -------------------------------------------------------------------

class CSPkg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSPkg) */ {
 public:
  inline CSPkg() : CSPkg(nullptr) {}
  ~CSPkg() override;
  explicit constexpr CSPkg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSPkg(const CSPkg& from);
  CSPkg(CSPkg&& from) noexcept
    : CSPkg() {
    *this = ::std::move(from);
  }

  inline CSPkg& operator=(const CSPkg& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSPkg& operator=(CSPkg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSPkg& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSPkg* internal_default_instance() {
    return reinterpret_cast<const CSPkg*>(
               &_CSPkg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CSPkg& a, CSPkg& b) {
    a.Swap(&b);
  }
  inline void Swap(CSPkg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSPkg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSPkg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSPkg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSPkg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CSPkg& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSPkg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSPkg";
  }
  protected:
  explicit CSPkg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeadFieldNumber = 1,
    kBodyFieldNumber = 2,
  };
  // .CSPkgHead head = 1;
  bool has_head() const;
  private:
  bool _internal_has_head() const;
  public:
  void clear_head();
  const ::CSPkgHead& head() const;
  PROTOBUF_NODISCARD ::CSPkgHead* release_head();
  ::CSPkgHead* mutable_head();
  void set_allocated_head(::CSPkgHead* head);
  private:
  const ::CSPkgHead& _internal_head() const;
  ::CSPkgHead* _internal_mutable_head();
  public:
  void unsafe_arena_set_allocated_head(
      ::CSPkgHead* head);
  ::CSPkgHead* unsafe_arena_release_head();

  // .CSPkgBody body = 2;
  bool has_body() const;
  private:
  bool _internal_has_body() const;
  public:
  void clear_body();
  const ::CSPkgBody& body() const;
  PROTOBUF_NODISCARD ::CSPkgBody* release_body();
  ::CSPkgBody* mutable_body();
  void set_allocated_body(::CSPkgBody* body);
  private:
  const ::CSPkgBody& _internal_body() const;
  ::CSPkgBody* _internal_mutable_body();
  public:
  void unsafe_arena_set_allocated_body(
      ::CSPkgBody* body);
  ::CSPkgBody* unsafe_arena_release_body();

  // @@protoc_insertion_point(class_scope:CSPkg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::CSPkgHead* head_;
  ::CSPkgBody* body_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cs_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CSAuthReq

// uint32 role_id = 1;
inline void CSAuthReq::clear_role_id() {
  role_id_ = 0u;
}
inline uint32_t CSAuthReq::_internal_role_id() const {
  return role_id_;
}
inline uint32_t CSAuthReq::role_id() const {
  // @@protoc_insertion_point(field_get:CSAuthReq.role_id)
  return _internal_role_id();
}
inline void CSAuthReq::_internal_set_role_id(uint32_t value) {
  
  role_id_ = value;
}
inline void CSAuthReq::set_role_id(uint32_t value) {
  _internal_set_role_id(value);
  // @@protoc_insertion_point(field_set:CSAuthReq.role_id)
}

// uint32 game_id = 2;
inline void CSAuthReq::clear_game_id() {
  game_id_ = 0u;
}
inline uint32_t CSAuthReq::_internal_game_id() const {
  return game_id_;
}
inline uint32_t CSAuthReq::game_id() const {
  // @@protoc_insertion_point(field_get:CSAuthReq.game_id)
  return _internal_game_id();
}
inline void CSAuthReq::_internal_set_game_id(uint32_t value) {
  
  game_id_ = value;
}
inline void CSAuthReq::set_game_id(uint32_t value) {
  _internal_set_game_id(value);
  // @@protoc_insertion_point(field_set:CSAuthReq.game_id)
}

// -------------------------------------------------------------------

// SCAuthRsp

// .SCAuthRsp.RESULT result = 1;
inline void SCAuthRsp::clear_result() {
  result_ = 0;
}
inline ::SCAuthRsp_RESULT SCAuthRsp::_internal_result() const {
  return static_cast< ::SCAuthRsp_RESULT >(result_);
}
inline ::SCAuthRsp_RESULT SCAuthRsp::result() const {
  // @@protoc_insertion_point(field_get:SCAuthRsp.result)
  return _internal_result();
}
inline void SCAuthRsp::_internal_set_result(::SCAuthRsp_RESULT value) {
  
  result_ = value;
}
inline void SCAuthRsp::set_result(::SCAuthRsp_RESULT value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:SCAuthRsp.result)
}

// -------------------------------------------------------------------

// CSLoginReq

// -------------------------------------------------------------------

// SCLoginRsp

// .SCLoginRsp.RESULT result = 1;
inline void SCLoginRsp::clear_result() {
  result_ = 0;
}
inline ::SCLoginRsp_RESULT SCLoginRsp::_internal_result() const {
  return static_cast< ::SCLoginRsp_RESULT >(result_);
}
inline ::SCLoginRsp_RESULT SCLoginRsp::result() const {
  // @@protoc_insertion_point(field_get:SCLoginRsp.result)
  return _internal_result();
}
inline void SCLoginRsp::_internal_set_result(::SCLoginRsp_RESULT value) {
  
  result_ = value;
}
inline void SCLoginRsp::set_result(::SCLoginRsp_RESULT value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:SCLoginRsp.result)
}

// -------------------------------------------------------------------

// CSLogoutReq

// -------------------------------------------------------------------

// CSHeartBeatReq

// -------------------------------------------------------------------

// SCHeartBeatRsp

// -------------------------------------------------------------------

// CSPkgHead

// .CSID id = 1;
inline void CSPkgHead::clear_id() {
  id_ = 0;
}
inline ::CSID CSPkgHead::_internal_id() const {
  return static_cast< ::CSID >(id_);
}
inline ::CSID CSPkgHead::id() const {
  // @@protoc_insertion_point(field_get:CSPkgHead.id)
  return _internal_id();
}
inline void CSPkgHead::_internal_set_id(::CSID value) {
  
  id_ = value;
}
inline void CSPkgHead::set_id(::CSID value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:CSPkgHead.id)
}

// -------------------------------------------------------------------

// CSPkgBody

// .CSAuthReq auth_req = 1;
inline bool CSPkgBody::_internal_has_auth_req() const {
  return body_case() == kAuthReq;
}
inline bool CSPkgBody::has_auth_req() const {
  return _internal_has_auth_req();
}
inline void CSPkgBody::set_has_auth_req() {
  _oneof_case_[0] = kAuthReq;
}
inline void CSPkgBody::clear_auth_req() {
  if (_internal_has_auth_req()) {
    if (GetArenaForAllocation() == nullptr) {
      delete body_.auth_req_;
    }
    clear_has_body();
  }
}
inline ::CSAuthReq* CSPkgBody::release_auth_req() {
  // @@protoc_insertion_point(field_release:CSPkgBody.auth_req)
  if (_internal_has_auth_req()) {
    clear_has_body();
      ::CSAuthReq* temp = body_.auth_req_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    body_.auth_req_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CSAuthReq& CSPkgBody::_internal_auth_req() const {
  return _internal_has_auth_req()
      ? *body_.auth_req_
      : reinterpret_cast< ::CSAuthReq&>(::_CSAuthReq_default_instance_);
}
inline const ::CSAuthReq& CSPkgBody::auth_req() const {
  // @@protoc_insertion_point(field_get:CSPkgBody.auth_req)
  return _internal_auth_req();
}
inline ::CSAuthReq* CSPkgBody::unsafe_arena_release_auth_req() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CSPkgBody.auth_req)
  if (_internal_has_auth_req()) {
    clear_has_body();
    ::CSAuthReq* temp = body_.auth_req_;
    body_.auth_req_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CSPkgBody::unsafe_arena_set_allocated_auth_req(::CSAuthReq* auth_req) {
  clear_body();
  if (auth_req) {
    set_has_auth_req();
    body_.auth_req_ = auth_req;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CSPkgBody.auth_req)
}
inline ::CSAuthReq* CSPkgBody::_internal_mutable_auth_req() {
  if (!_internal_has_auth_req()) {
    clear_body();
    set_has_auth_req();
    body_.auth_req_ = CreateMaybeMessage< ::CSAuthReq >(GetArenaForAllocation());
  }
  return body_.auth_req_;
}
inline ::CSAuthReq* CSPkgBody::mutable_auth_req() {
  ::CSAuthReq* _msg = _internal_mutable_auth_req();
  // @@protoc_insertion_point(field_mutable:CSPkgBody.auth_req)
  return _msg;
}

// .SCAuthRsp auth_rsp = 2;
inline bool CSPkgBody::_internal_has_auth_rsp() const {
  return body_case() == kAuthRsp;
}
inline bool CSPkgBody::has_auth_rsp() const {
  return _internal_has_auth_rsp();
}
inline void CSPkgBody::set_has_auth_rsp() {
  _oneof_case_[0] = kAuthRsp;
}
inline void CSPkgBody::clear_auth_rsp() {
  if (_internal_has_auth_rsp()) {
    if (GetArenaForAllocation() == nullptr) {
      delete body_.auth_rsp_;
    }
    clear_has_body();
  }
}
inline ::SCAuthRsp* CSPkgBody::release_auth_rsp() {
  // @@protoc_insertion_point(field_release:CSPkgBody.auth_rsp)
  if (_internal_has_auth_rsp()) {
    clear_has_body();
      ::SCAuthRsp* temp = body_.auth_rsp_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    body_.auth_rsp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::SCAuthRsp& CSPkgBody::_internal_auth_rsp() const {
  return _internal_has_auth_rsp()
      ? *body_.auth_rsp_
      : reinterpret_cast< ::SCAuthRsp&>(::_SCAuthRsp_default_instance_);
}
inline const ::SCAuthRsp& CSPkgBody::auth_rsp() const {
  // @@protoc_insertion_point(field_get:CSPkgBody.auth_rsp)
  return _internal_auth_rsp();
}
inline ::SCAuthRsp* CSPkgBody::unsafe_arena_release_auth_rsp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CSPkgBody.auth_rsp)
  if (_internal_has_auth_rsp()) {
    clear_has_body();
    ::SCAuthRsp* temp = body_.auth_rsp_;
    body_.auth_rsp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CSPkgBody::unsafe_arena_set_allocated_auth_rsp(::SCAuthRsp* auth_rsp) {
  clear_body();
  if (auth_rsp) {
    set_has_auth_rsp();
    body_.auth_rsp_ = auth_rsp;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CSPkgBody.auth_rsp)
}
inline ::SCAuthRsp* CSPkgBody::_internal_mutable_auth_rsp() {
  if (!_internal_has_auth_rsp()) {
    clear_body();
    set_has_auth_rsp();
    body_.auth_rsp_ = CreateMaybeMessage< ::SCAuthRsp >(GetArenaForAllocation());
  }
  return body_.auth_rsp_;
}
inline ::SCAuthRsp* CSPkgBody::mutable_auth_rsp() {
  ::SCAuthRsp* _msg = _internal_mutable_auth_rsp();
  // @@protoc_insertion_point(field_mutable:CSPkgBody.auth_rsp)
  return _msg;
}

// .CSLoginReq login_req = 3;
inline bool CSPkgBody::_internal_has_login_req() const {
  return body_case() == kLoginReq;
}
inline bool CSPkgBody::has_login_req() const {
  return _internal_has_login_req();
}
inline void CSPkgBody::set_has_login_req() {
  _oneof_case_[0] = kLoginReq;
}
inline void CSPkgBody::clear_login_req() {
  if (_internal_has_login_req()) {
    if (GetArenaForAllocation() == nullptr) {
      delete body_.login_req_;
    }
    clear_has_body();
  }
}
inline ::CSLoginReq* CSPkgBody::release_login_req() {
  // @@protoc_insertion_point(field_release:CSPkgBody.login_req)
  if (_internal_has_login_req()) {
    clear_has_body();
      ::CSLoginReq* temp = body_.login_req_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    body_.login_req_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CSLoginReq& CSPkgBody::_internal_login_req() const {
  return _internal_has_login_req()
      ? *body_.login_req_
      : reinterpret_cast< ::CSLoginReq&>(::_CSLoginReq_default_instance_);
}
inline const ::CSLoginReq& CSPkgBody::login_req() const {
  // @@protoc_insertion_point(field_get:CSPkgBody.login_req)
  return _internal_login_req();
}
inline ::CSLoginReq* CSPkgBody::unsafe_arena_release_login_req() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CSPkgBody.login_req)
  if (_internal_has_login_req()) {
    clear_has_body();
    ::CSLoginReq* temp = body_.login_req_;
    body_.login_req_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CSPkgBody::unsafe_arena_set_allocated_login_req(::CSLoginReq* login_req) {
  clear_body();
  if (login_req) {
    set_has_login_req();
    body_.login_req_ = login_req;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CSPkgBody.login_req)
}
inline ::CSLoginReq* CSPkgBody::_internal_mutable_login_req() {
  if (!_internal_has_login_req()) {
    clear_body();
    set_has_login_req();
    body_.login_req_ = CreateMaybeMessage< ::CSLoginReq >(GetArenaForAllocation());
  }
  return body_.login_req_;
}
inline ::CSLoginReq* CSPkgBody::mutable_login_req() {
  ::CSLoginReq* _msg = _internal_mutable_login_req();
  // @@protoc_insertion_point(field_mutable:CSPkgBody.login_req)
  return _msg;
}

// .SCLoginRsp login_rsp = 4;
inline bool CSPkgBody::_internal_has_login_rsp() const {
  return body_case() == kLoginRsp;
}
inline bool CSPkgBody::has_login_rsp() const {
  return _internal_has_login_rsp();
}
inline void CSPkgBody::set_has_login_rsp() {
  _oneof_case_[0] = kLoginRsp;
}
inline void CSPkgBody::clear_login_rsp() {
  if (_internal_has_login_rsp()) {
    if (GetArenaForAllocation() == nullptr) {
      delete body_.login_rsp_;
    }
    clear_has_body();
  }
}
inline ::SCLoginRsp* CSPkgBody::release_login_rsp() {
  // @@protoc_insertion_point(field_release:CSPkgBody.login_rsp)
  if (_internal_has_login_rsp()) {
    clear_has_body();
      ::SCLoginRsp* temp = body_.login_rsp_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    body_.login_rsp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::SCLoginRsp& CSPkgBody::_internal_login_rsp() const {
  return _internal_has_login_rsp()
      ? *body_.login_rsp_
      : reinterpret_cast< ::SCLoginRsp&>(::_SCLoginRsp_default_instance_);
}
inline const ::SCLoginRsp& CSPkgBody::login_rsp() const {
  // @@protoc_insertion_point(field_get:CSPkgBody.login_rsp)
  return _internal_login_rsp();
}
inline ::SCLoginRsp* CSPkgBody::unsafe_arena_release_login_rsp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CSPkgBody.login_rsp)
  if (_internal_has_login_rsp()) {
    clear_has_body();
    ::SCLoginRsp* temp = body_.login_rsp_;
    body_.login_rsp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CSPkgBody::unsafe_arena_set_allocated_login_rsp(::SCLoginRsp* login_rsp) {
  clear_body();
  if (login_rsp) {
    set_has_login_rsp();
    body_.login_rsp_ = login_rsp;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CSPkgBody.login_rsp)
}
inline ::SCLoginRsp* CSPkgBody::_internal_mutable_login_rsp() {
  if (!_internal_has_login_rsp()) {
    clear_body();
    set_has_login_rsp();
    body_.login_rsp_ = CreateMaybeMessage< ::SCLoginRsp >(GetArenaForAllocation());
  }
  return body_.login_rsp_;
}
inline ::SCLoginRsp* CSPkgBody::mutable_login_rsp() {
  ::SCLoginRsp* _msg = _internal_mutable_login_rsp();
  // @@protoc_insertion_point(field_mutable:CSPkgBody.login_rsp)
  return _msg;
}

// .CSLogoutReq logout_req = 5;
inline bool CSPkgBody::_internal_has_logout_req() const {
  return body_case() == kLogoutReq;
}
inline bool CSPkgBody::has_logout_req() const {
  return _internal_has_logout_req();
}
inline void CSPkgBody::set_has_logout_req() {
  _oneof_case_[0] = kLogoutReq;
}
inline void CSPkgBody::clear_logout_req() {
  if (_internal_has_logout_req()) {
    if (GetArenaForAllocation() == nullptr) {
      delete body_.logout_req_;
    }
    clear_has_body();
  }
}
inline ::CSLogoutReq* CSPkgBody::release_logout_req() {
  // @@protoc_insertion_point(field_release:CSPkgBody.logout_req)
  if (_internal_has_logout_req()) {
    clear_has_body();
      ::CSLogoutReq* temp = body_.logout_req_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    body_.logout_req_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CSLogoutReq& CSPkgBody::_internal_logout_req() const {
  return _internal_has_logout_req()
      ? *body_.logout_req_
      : reinterpret_cast< ::CSLogoutReq&>(::_CSLogoutReq_default_instance_);
}
inline const ::CSLogoutReq& CSPkgBody::logout_req() const {
  // @@protoc_insertion_point(field_get:CSPkgBody.logout_req)
  return _internal_logout_req();
}
inline ::CSLogoutReq* CSPkgBody::unsafe_arena_release_logout_req() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CSPkgBody.logout_req)
  if (_internal_has_logout_req()) {
    clear_has_body();
    ::CSLogoutReq* temp = body_.logout_req_;
    body_.logout_req_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CSPkgBody::unsafe_arena_set_allocated_logout_req(::CSLogoutReq* logout_req) {
  clear_body();
  if (logout_req) {
    set_has_logout_req();
    body_.logout_req_ = logout_req;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CSPkgBody.logout_req)
}
inline ::CSLogoutReq* CSPkgBody::_internal_mutable_logout_req() {
  if (!_internal_has_logout_req()) {
    clear_body();
    set_has_logout_req();
    body_.logout_req_ = CreateMaybeMessage< ::CSLogoutReq >(GetArenaForAllocation());
  }
  return body_.logout_req_;
}
inline ::CSLogoutReq* CSPkgBody::mutable_logout_req() {
  ::CSLogoutReq* _msg = _internal_mutable_logout_req();
  // @@protoc_insertion_point(field_mutable:CSPkgBody.logout_req)
  return _msg;
}

// .CSHeartBeatReq heart_beat_req = 6;
inline bool CSPkgBody::_internal_has_heart_beat_req() const {
  return body_case() == kHeartBeatReq;
}
inline bool CSPkgBody::has_heart_beat_req() const {
  return _internal_has_heart_beat_req();
}
inline void CSPkgBody::set_has_heart_beat_req() {
  _oneof_case_[0] = kHeartBeatReq;
}
inline void CSPkgBody::clear_heart_beat_req() {
  if (_internal_has_heart_beat_req()) {
    if (GetArenaForAllocation() == nullptr) {
      delete body_.heart_beat_req_;
    }
    clear_has_body();
  }
}
inline ::CSHeartBeatReq* CSPkgBody::release_heart_beat_req() {
  // @@protoc_insertion_point(field_release:CSPkgBody.heart_beat_req)
  if (_internal_has_heart_beat_req()) {
    clear_has_body();
      ::CSHeartBeatReq* temp = body_.heart_beat_req_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    body_.heart_beat_req_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CSHeartBeatReq& CSPkgBody::_internal_heart_beat_req() const {
  return _internal_has_heart_beat_req()
      ? *body_.heart_beat_req_
      : reinterpret_cast< ::CSHeartBeatReq&>(::_CSHeartBeatReq_default_instance_);
}
inline const ::CSHeartBeatReq& CSPkgBody::heart_beat_req() const {
  // @@protoc_insertion_point(field_get:CSPkgBody.heart_beat_req)
  return _internal_heart_beat_req();
}
inline ::CSHeartBeatReq* CSPkgBody::unsafe_arena_release_heart_beat_req() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CSPkgBody.heart_beat_req)
  if (_internal_has_heart_beat_req()) {
    clear_has_body();
    ::CSHeartBeatReq* temp = body_.heart_beat_req_;
    body_.heart_beat_req_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CSPkgBody::unsafe_arena_set_allocated_heart_beat_req(::CSHeartBeatReq* heart_beat_req) {
  clear_body();
  if (heart_beat_req) {
    set_has_heart_beat_req();
    body_.heart_beat_req_ = heart_beat_req;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CSPkgBody.heart_beat_req)
}
inline ::CSHeartBeatReq* CSPkgBody::_internal_mutable_heart_beat_req() {
  if (!_internal_has_heart_beat_req()) {
    clear_body();
    set_has_heart_beat_req();
    body_.heart_beat_req_ = CreateMaybeMessage< ::CSHeartBeatReq >(GetArenaForAllocation());
  }
  return body_.heart_beat_req_;
}
inline ::CSHeartBeatReq* CSPkgBody::mutable_heart_beat_req() {
  ::CSHeartBeatReq* _msg = _internal_mutable_heart_beat_req();
  // @@protoc_insertion_point(field_mutable:CSPkgBody.heart_beat_req)
  return _msg;
}

// .SCHeartBeatRsp heart_beat_rsp = 7;
inline bool CSPkgBody::_internal_has_heart_beat_rsp() const {
  return body_case() == kHeartBeatRsp;
}
inline bool CSPkgBody::has_heart_beat_rsp() const {
  return _internal_has_heart_beat_rsp();
}
inline void CSPkgBody::set_has_heart_beat_rsp() {
  _oneof_case_[0] = kHeartBeatRsp;
}
inline void CSPkgBody::clear_heart_beat_rsp() {
  if (_internal_has_heart_beat_rsp()) {
    if (GetArenaForAllocation() == nullptr) {
      delete body_.heart_beat_rsp_;
    }
    clear_has_body();
  }
}
inline ::SCHeartBeatRsp* CSPkgBody::release_heart_beat_rsp() {
  // @@protoc_insertion_point(field_release:CSPkgBody.heart_beat_rsp)
  if (_internal_has_heart_beat_rsp()) {
    clear_has_body();
      ::SCHeartBeatRsp* temp = body_.heart_beat_rsp_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    body_.heart_beat_rsp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::SCHeartBeatRsp& CSPkgBody::_internal_heart_beat_rsp() const {
  return _internal_has_heart_beat_rsp()
      ? *body_.heart_beat_rsp_
      : reinterpret_cast< ::SCHeartBeatRsp&>(::_SCHeartBeatRsp_default_instance_);
}
inline const ::SCHeartBeatRsp& CSPkgBody::heart_beat_rsp() const {
  // @@protoc_insertion_point(field_get:CSPkgBody.heart_beat_rsp)
  return _internal_heart_beat_rsp();
}
inline ::SCHeartBeatRsp* CSPkgBody::unsafe_arena_release_heart_beat_rsp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CSPkgBody.heart_beat_rsp)
  if (_internal_has_heart_beat_rsp()) {
    clear_has_body();
    ::SCHeartBeatRsp* temp = body_.heart_beat_rsp_;
    body_.heart_beat_rsp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CSPkgBody::unsafe_arena_set_allocated_heart_beat_rsp(::SCHeartBeatRsp* heart_beat_rsp) {
  clear_body();
  if (heart_beat_rsp) {
    set_has_heart_beat_rsp();
    body_.heart_beat_rsp_ = heart_beat_rsp;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CSPkgBody.heart_beat_rsp)
}
inline ::SCHeartBeatRsp* CSPkgBody::_internal_mutable_heart_beat_rsp() {
  if (!_internal_has_heart_beat_rsp()) {
    clear_body();
    set_has_heart_beat_rsp();
    body_.heart_beat_rsp_ = CreateMaybeMessage< ::SCHeartBeatRsp >(GetArenaForAllocation());
  }
  return body_.heart_beat_rsp_;
}
inline ::SCHeartBeatRsp* CSPkgBody::mutable_heart_beat_rsp() {
  ::SCHeartBeatRsp* _msg = _internal_mutable_heart_beat_rsp();
  // @@protoc_insertion_point(field_mutable:CSPkgBody.heart_beat_rsp)
  return _msg;
}

inline bool CSPkgBody::has_body() const {
  return body_case() != BODY_NOT_SET;
}
inline void CSPkgBody::clear_has_body() {
  _oneof_case_[0] = BODY_NOT_SET;
}
inline CSPkgBody::BodyCase CSPkgBody::body_case() const {
  return CSPkgBody::BodyCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CSPkg

// .CSPkgHead head = 1;
inline bool CSPkg::_internal_has_head() const {
  return this != internal_default_instance() && head_ != nullptr;
}
inline bool CSPkg::has_head() const {
  return _internal_has_head();
}
inline void CSPkg::clear_head() {
  if (GetArenaForAllocation() == nullptr && head_ != nullptr) {
    delete head_;
  }
  head_ = nullptr;
}
inline const ::CSPkgHead& CSPkg::_internal_head() const {
  const ::CSPkgHead* p = head_;
  return p != nullptr ? *p : reinterpret_cast<const ::CSPkgHead&>(
      ::_CSPkgHead_default_instance_);
}
inline const ::CSPkgHead& CSPkg::head() const {
  // @@protoc_insertion_point(field_get:CSPkg.head)
  return _internal_head();
}
inline void CSPkg::unsafe_arena_set_allocated_head(
    ::CSPkgHead* head) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(head_);
  }
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CSPkg.head)
}
inline ::CSPkgHead* CSPkg::release_head() {
  
  ::CSPkgHead* temp = head_;
  head_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CSPkgHead* CSPkg::unsafe_arena_release_head() {
  // @@protoc_insertion_point(field_release:CSPkg.head)
  
  ::CSPkgHead* temp = head_;
  head_ = nullptr;
  return temp;
}
inline ::CSPkgHead* CSPkg::_internal_mutable_head() {
  
  if (head_ == nullptr) {
    auto* p = CreateMaybeMessage<::CSPkgHead>(GetArenaForAllocation());
    head_ = p;
  }
  return head_;
}
inline ::CSPkgHead* CSPkg::mutable_head() {
  ::CSPkgHead* _msg = _internal_mutable_head();
  // @@protoc_insertion_point(field_mutable:CSPkg.head)
  return _msg;
}
inline void CSPkg::set_allocated_head(::CSPkgHead* head) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete head_;
  }
  if (head) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CSPkgHead>::GetOwningArena(head);
    if (message_arena != submessage_arena) {
      head = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, head, submessage_arena);
    }
    
  } else {
    
  }
  head_ = head;
  // @@protoc_insertion_point(field_set_allocated:CSPkg.head)
}

// .CSPkgBody body = 2;
inline bool CSPkg::_internal_has_body() const {
  return this != internal_default_instance() && body_ != nullptr;
}
inline bool CSPkg::has_body() const {
  return _internal_has_body();
}
inline void CSPkg::clear_body() {
  if (GetArenaForAllocation() == nullptr && body_ != nullptr) {
    delete body_;
  }
  body_ = nullptr;
}
inline const ::CSPkgBody& CSPkg::_internal_body() const {
  const ::CSPkgBody* p = body_;
  return p != nullptr ? *p : reinterpret_cast<const ::CSPkgBody&>(
      ::_CSPkgBody_default_instance_);
}
inline const ::CSPkgBody& CSPkg::body() const {
  // @@protoc_insertion_point(field_get:CSPkg.body)
  return _internal_body();
}
inline void CSPkg::unsafe_arena_set_allocated_body(
    ::CSPkgBody* body) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(body_);
  }
  body_ = body;
  if (body) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CSPkg.body)
}
inline ::CSPkgBody* CSPkg::release_body() {
  
  ::CSPkgBody* temp = body_;
  body_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CSPkgBody* CSPkg::unsafe_arena_release_body() {
  // @@protoc_insertion_point(field_release:CSPkg.body)
  
  ::CSPkgBody* temp = body_;
  body_ = nullptr;
  return temp;
}
inline ::CSPkgBody* CSPkg::_internal_mutable_body() {
  
  if (body_ == nullptr) {
    auto* p = CreateMaybeMessage<::CSPkgBody>(GetArenaForAllocation());
    body_ = p;
  }
  return body_;
}
inline ::CSPkgBody* CSPkg::mutable_body() {
  ::CSPkgBody* _msg = _internal_mutable_body();
  // @@protoc_insertion_point(field_mutable:CSPkg.body)
  return _msg;
}
inline void CSPkg::set_allocated_body(::CSPkgBody* body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete body_;
  }
  if (body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CSPkgBody>::GetOwningArena(body);
    if (message_arena != submessage_arena) {
      body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, body, submessage_arena);
    }
    
  } else {
    
  }
  body_ = body;
  // @@protoc_insertion_point(field_set_allocated:CSPkg.body)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::SCAuthRsp_RESULT> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SCAuthRsp_RESULT>() {
  return ::SCAuthRsp_RESULT_descriptor();
}
template <> struct is_proto_enum< ::SCLoginRsp_RESULT> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SCLoginRsp_RESULT>() {
  return ::SCLoginRsp_RESULT_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cs_2eproto
