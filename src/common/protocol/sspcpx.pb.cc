// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sspcpx.proto

#include "sspcpx.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr SSPCPXNodeRegister::SSPCPXNodeRegister(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SSPCPXNodeRegisterDefaultTypeInternal {
  constexpr SSPCPXNodeRegisterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SSPCPXNodeRegisterDefaultTypeInternal() {}
  union {
    SSPCPXNodeRegister _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SSPCPXNodeRegisterDefaultTypeInternal _SSPCPXNodeRegister_default_instance_;
constexpr SSPCPXNodeUnregister::SSPCPXNodeUnregister(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SSPCPXNodeUnregisterDefaultTypeInternal {
  constexpr SSPCPXNodeUnregisterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SSPCPXNodeUnregisterDefaultTypeInternal() {}
  union {
    SSPCPXNodeUnregister _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SSPCPXNodeUnregisterDefaultTypeInternal _SSPCPXNodeUnregister_default_instance_;
constexpr SSPCPXHeartBeatReq::SSPCPXHeartBeatReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SSPCPXHeartBeatReqDefaultTypeInternal {
  constexpr SSPCPXHeartBeatReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SSPCPXHeartBeatReqDefaultTypeInternal() {}
  union {
    SSPCPXHeartBeatReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SSPCPXHeartBeatReqDefaultTypeInternal _SSPCPXHeartBeatReq_default_instance_;
constexpr SSPXPCHeartBeatRsp::SSPXPCHeartBeatRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SSPXPCHeartBeatRspDefaultTypeInternal {
  constexpr SSPXPCHeartBeatRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SSPXPCHeartBeatRspDefaultTypeInternal() {}
  union {
    SSPXPCHeartBeatRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SSPXPCHeartBeatRspDefaultTypeInternal _SSPXPCHeartBeatRsp_default_instance_;
constexpr SSPCPXPkgBody::SSPCPXPkgBody(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct SSPCPXPkgBodyDefaultTypeInternal {
  constexpr SSPCPXPkgBodyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SSPCPXPkgBodyDefaultTypeInternal() {}
  union {
    SSPCPXPkgBody _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SSPCPXPkgBodyDefaultTypeInternal _SSPCPXPkgBody_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_sspcpx_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_sspcpx_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_sspcpx_2eproto = nullptr;

const uint32_t TableStruct_sspcpx_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SSPCPXNodeRegister, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SSPCPXNodeUnregister, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SSPCPXHeartBeatReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SSPXPCHeartBeatRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SSPCPXPkgBody, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::SSPCPXPkgBody, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::SSPCPXPkgBody, body_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::SSPCPXNodeRegister)},
  { 6, -1, -1, sizeof(::SSPCPXNodeUnregister)},
  { 12, -1, -1, sizeof(::SSPCPXHeartBeatReq)},
  { 18, -1, -1, sizeof(::SSPXPCHeartBeatRsp)},
  { 24, -1, -1, sizeof(::SSPCPXPkgBody)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SSPCPXNodeRegister_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SSPCPXNodeUnregister_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SSPCPXHeartBeatReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SSPXPCHeartBeatRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SSPCPXPkgBody_default_instance_),
};

const char descriptor_table_protodef_sspcpx_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014sspcpx.proto\"\024\n\022SSPCPXNodeRegister\"\026\n\024"
  "SSPCPXNodeUnregister\"\024\n\022SSPCPXHeartBeatR"
  "eq\"\024\n\022SSPXPCHeartBeatRsp\"\325\001\n\rSSPCPXPkgBo"
  "dy\022,\n\rnode_register\030\001 \001(\0132\023.SSPCPXNodeRe"
  "gisterH\000\0220\n\017node_unregister\030\002 \001(\0132\025.SSPC"
  "PXNodeUnregisterH\000\022-\n\016heart_beat_req\030\003 \001"
  "(\0132\023.SSPCPXHeartBeatReqH\000\022-\n\016heart_beat_"
  "rsp\030\004 \001(\0132\023.SSPXPCHeartBeatRspH\000B\006\n\004body"
  "b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_sspcpx_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sspcpx_2eproto = {
  false, false, 328, descriptor_table_protodef_sspcpx_2eproto, "sspcpx.proto", 
  &descriptor_table_sspcpx_2eproto_once, nullptr, 0, 5,
  schemas, file_default_instances, TableStruct_sspcpx_2eproto::offsets,
  file_level_metadata_sspcpx_2eproto, file_level_enum_descriptors_sspcpx_2eproto, file_level_service_descriptors_sspcpx_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_sspcpx_2eproto_getter() {
  return &descriptor_table_sspcpx_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_sspcpx_2eproto(&descriptor_table_sspcpx_2eproto);

// ===================================================================

class SSPCPXNodeRegister::_Internal {
 public:
};

SSPCPXNodeRegister::SSPCPXNodeRegister(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:SSPCPXNodeRegister)
}
SSPCPXNodeRegister::SSPCPXNodeRegister(const SSPCPXNodeRegister& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SSPCPXNodeRegister)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SSPCPXNodeRegister::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SSPCPXNodeRegister::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SSPCPXNodeRegister::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sspcpx_2eproto_getter, &descriptor_table_sspcpx_2eproto_once,
      file_level_metadata_sspcpx_2eproto[0]);
}

// ===================================================================

class SSPCPXNodeUnregister::_Internal {
 public:
};

SSPCPXNodeUnregister::SSPCPXNodeUnregister(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:SSPCPXNodeUnregister)
}
SSPCPXNodeUnregister::SSPCPXNodeUnregister(const SSPCPXNodeUnregister& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SSPCPXNodeUnregister)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SSPCPXNodeUnregister::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SSPCPXNodeUnregister::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SSPCPXNodeUnregister::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sspcpx_2eproto_getter, &descriptor_table_sspcpx_2eproto_once,
      file_level_metadata_sspcpx_2eproto[1]);
}

// ===================================================================

class SSPCPXHeartBeatReq::_Internal {
 public:
};

SSPCPXHeartBeatReq::SSPCPXHeartBeatReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:SSPCPXHeartBeatReq)
}
SSPCPXHeartBeatReq::SSPCPXHeartBeatReq(const SSPCPXHeartBeatReq& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SSPCPXHeartBeatReq)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SSPCPXHeartBeatReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SSPCPXHeartBeatReq::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SSPCPXHeartBeatReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sspcpx_2eproto_getter, &descriptor_table_sspcpx_2eproto_once,
      file_level_metadata_sspcpx_2eproto[2]);
}

// ===================================================================

class SSPXPCHeartBeatRsp::_Internal {
 public:
};

SSPXPCHeartBeatRsp::SSPXPCHeartBeatRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:SSPXPCHeartBeatRsp)
}
SSPXPCHeartBeatRsp::SSPXPCHeartBeatRsp(const SSPXPCHeartBeatRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SSPXPCHeartBeatRsp)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SSPXPCHeartBeatRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SSPXPCHeartBeatRsp::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SSPXPCHeartBeatRsp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sspcpx_2eproto_getter, &descriptor_table_sspcpx_2eproto_once,
      file_level_metadata_sspcpx_2eproto[3]);
}

// ===================================================================

class SSPCPXPkgBody::_Internal {
 public:
  static const ::SSPCPXNodeRegister& node_register(const SSPCPXPkgBody* msg);
  static const ::SSPCPXNodeUnregister& node_unregister(const SSPCPXPkgBody* msg);
  static const ::SSPCPXHeartBeatReq& heart_beat_req(const SSPCPXPkgBody* msg);
  static const ::SSPXPCHeartBeatRsp& heart_beat_rsp(const SSPCPXPkgBody* msg);
};

const ::SSPCPXNodeRegister&
SSPCPXPkgBody::_Internal::node_register(const SSPCPXPkgBody* msg) {
  return *msg->body_.node_register_;
}
const ::SSPCPXNodeUnregister&
SSPCPXPkgBody::_Internal::node_unregister(const SSPCPXPkgBody* msg) {
  return *msg->body_.node_unregister_;
}
const ::SSPCPXHeartBeatReq&
SSPCPXPkgBody::_Internal::heart_beat_req(const SSPCPXPkgBody* msg) {
  return *msg->body_.heart_beat_req_;
}
const ::SSPXPCHeartBeatRsp&
SSPCPXPkgBody::_Internal::heart_beat_rsp(const SSPCPXPkgBody* msg) {
  return *msg->body_.heart_beat_rsp_;
}
void SSPCPXPkgBody::set_allocated_node_register(::SSPCPXNodeRegister* node_register) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_body();
  if (node_register) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::SSPCPXNodeRegister>::GetOwningArena(node_register);
    if (message_arena != submessage_arena) {
      node_register = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, node_register, submessage_arena);
    }
    set_has_node_register();
    body_.node_register_ = node_register;
  }
  // @@protoc_insertion_point(field_set_allocated:SSPCPXPkgBody.node_register)
}
void SSPCPXPkgBody::set_allocated_node_unregister(::SSPCPXNodeUnregister* node_unregister) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_body();
  if (node_unregister) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::SSPCPXNodeUnregister>::GetOwningArena(node_unregister);
    if (message_arena != submessage_arena) {
      node_unregister = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, node_unregister, submessage_arena);
    }
    set_has_node_unregister();
    body_.node_unregister_ = node_unregister;
  }
  // @@protoc_insertion_point(field_set_allocated:SSPCPXPkgBody.node_unregister)
}
void SSPCPXPkgBody::set_allocated_heart_beat_req(::SSPCPXHeartBeatReq* heart_beat_req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_body();
  if (heart_beat_req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::SSPCPXHeartBeatReq>::GetOwningArena(heart_beat_req);
    if (message_arena != submessage_arena) {
      heart_beat_req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, heart_beat_req, submessage_arena);
    }
    set_has_heart_beat_req();
    body_.heart_beat_req_ = heart_beat_req;
  }
  // @@protoc_insertion_point(field_set_allocated:SSPCPXPkgBody.heart_beat_req)
}
void SSPCPXPkgBody::set_allocated_heart_beat_rsp(::SSPXPCHeartBeatRsp* heart_beat_rsp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_body();
  if (heart_beat_rsp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::SSPXPCHeartBeatRsp>::GetOwningArena(heart_beat_rsp);
    if (message_arena != submessage_arena) {
      heart_beat_rsp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, heart_beat_rsp, submessage_arena);
    }
    set_has_heart_beat_rsp();
    body_.heart_beat_rsp_ = heart_beat_rsp;
  }
  // @@protoc_insertion_point(field_set_allocated:SSPCPXPkgBody.heart_beat_rsp)
}
SSPCPXPkgBody::SSPCPXPkgBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:SSPCPXPkgBody)
}
SSPCPXPkgBody::SSPCPXPkgBody(const SSPCPXPkgBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_body();
  switch (from.body_case()) {
    case kNodeRegister: {
      _internal_mutable_node_register()->::SSPCPXNodeRegister::MergeFrom(from._internal_node_register());
      break;
    }
    case kNodeUnregister: {
      _internal_mutable_node_unregister()->::SSPCPXNodeUnregister::MergeFrom(from._internal_node_unregister());
      break;
    }
    case kHeartBeatReq: {
      _internal_mutable_heart_beat_req()->::SSPCPXHeartBeatReq::MergeFrom(from._internal_heart_beat_req());
      break;
    }
    case kHeartBeatRsp: {
      _internal_mutable_heart_beat_rsp()->::SSPXPCHeartBeatRsp::MergeFrom(from._internal_heart_beat_rsp());
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:SSPCPXPkgBody)
}

inline void SSPCPXPkgBody::SharedCtor() {
clear_has_body();
}

SSPCPXPkgBody::~SSPCPXPkgBody() {
  // @@protoc_insertion_point(destructor:SSPCPXPkgBody)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SSPCPXPkgBody::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_body()) {
    clear_body();
  }
}

void SSPCPXPkgBody::ArenaDtor(void* object) {
  SSPCPXPkgBody* _this = reinterpret_cast< SSPCPXPkgBody* >(object);
  (void)_this;
}
void SSPCPXPkgBody::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SSPCPXPkgBody::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SSPCPXPkgBody::clear_body() {
// @@protoc_insertion_point(one_of_clear_start:SSPCPXPkgBody)
  switch (body_case()) {
    case kNodeRegister: {
      if (GetArenaForAllocation() == nullptr) {
        delete body_.node_register_;
      }
      break;
    }
    case kNodeUnregister: {
      if (GetArenaForAllocation() == nullptr) {
        delete body_.node_unregister_;
      }
      break;
    }
    case kHeartBeatReq: {
      if (GetArenaForAllocation() == nullptr) {
        delete body_.heart_beat_req_;
      }
      break;
    }
    case kHeartBeatRsp: {
      if (GetArenaForAllocation() == nullptr) {
        delete body_.heart_beat_rsp_;
      }
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = BODY_NOT_SET;
}


void SSPCPXPkgBody::Clear() {
// @@protoc_insertion_point(message_clear_start:SSPCPXPkgBody)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_body();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SSPCPXPkgBody::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .SSPCPXNodeRegister node_register = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_node_register(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SSPCPXNodeUnregister node_unregister = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_node_unregister(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SSPCPXHeartBeatReq heart_beat_req = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_heart_beat_req(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SSPXPCHeartBeatRsp heart_beat_rsp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_heart_beat_rsp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SSPCPXPkgBody::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSPCPXPkgBody)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .SSPCPXNodeRegister node_register = 1;
  if (_internal_has_node_register()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::node_register(this), target, stream);
  }

  // .SSPCPXNodeUnregister node_unregister = 2;
  if (_internal_has_node_unregister()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::node_unregister(this), target, stream);
  }

  // .SSPCPXHeartBeatReq heart_beat_req = 3;
  if (_internal_has_heart_beat_req()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::heart_beat_req(this), target, stream);
  }

  // .SSPXPCHeartBeatRsp heart_beat_rsp = 4;
  if (_internal_has_heart_beat_rsp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::heart_beat_rsp(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSPCPXPkgBody)
  return target;
}

size_t SSPCPXPkgBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SSPCPXPkgBody)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (body_case()) {
    // .SSPCPXNodeRegister node_register = 1;
    case kNodeRegister: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *body_.node_register_);
      break;
    }
    // .SSPCPXNodeUnregister node_unregister = 2;
    case kNodeUnregister: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *body_.node_unregister_);
      break;
    }
    // .SSPCPXHeartBeatReq heart_beat_req = 3;
    case kHeartBeatReq: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *body_.heart_beat_req_);
      break;
    }
    // .SSPXPCHeartBeatRsp heart_beat_rsp = 4;
    case kHeartBeatRsp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *body_.heart_beat_rsp_);
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SSPCPXPkgBody::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SSPCPXPkgBody::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SSPCPXPkgBody::GetClassData() const { return &_class_data_; }

void SSPCPXPkgBody::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SSPCPXPkgBody *>(to)->MergeFrom(
      static_cast<const SSPCPXPkgBody &>(from));
}


void SSPCPXPkgBody::MergeFrom(const SSPCPXPkgBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SSPCPXPkgBody)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.body_case()) {
    case kNodeRegister: {
      _internal_mutable_node_register()->::SSPCPXNodeRegister::MergeFrom(from._internal_node_register());
      break;
    }
    case kNodeUnregister: {
      _internal_mutable_node_unregister()->::SSPCPXNodeUnregister::MergeFrom(from._internal_node_unregister());
      break;
    }
    case kHeartBeatReq: {
      _internal_mutable_heart_beat_req()->::SSPCPXHeartBeatReq::MergeFrom(from._internal_heart_beat_req());
      break;
    }
    case kHeartBeatRsp: {
      _internal_mutable_heart_beat_rsp()->::SSPXPCHeartBeatRsp::MergeFrom(from._internal_heart_beat_rsp());
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SSPCPXPkgBody::CopyFrom(const SSPCPXPkgBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SSPCPXPkgBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSPCPXPkgBody::IsInitialized() const {
  return true;
}

void SSPCPXPkgBody::InternalSwap(SSPCPXPkgBody* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(body_, other->body_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SSPCPXPkgBody::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sspcpx_2eproto_getter, &descriptor_table_sspcpx_2eproto_once,
      file_level_metadata_sspcpx_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::SSPCPXNodeRegister* Arena::CreateMaybeMessage< ::SSPCPXNodeRegister >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SSPCPXNodeRegister >(arena);
}
template<> PROTOBUF_NOINLINE ::SSPCPXNodeUnregister* Arena::CreateMaybeMessage< ::SSPCPXNodeUnregister >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SSPCPXNodeUnregister >(arena);
}
template<> PROTOBUF_NOINLINE ::SSPCPXHeartBeatReq* Arena::CreateMaybeMessage< ::SSPCPXHeartBeatReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SSPCPXHeartBeatReq >(arena);
}
template<> PROTOBUF_NOINLINE ::SSPXPCHeartBeatRsp* Arena::CreateMaybeMessage< ::SSPXPCHeartBeatRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SSPXPCHeartBeatRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::SSPCPXPkgBody* Arena::CreateMaybeMessage< ::SSPCPXPkgBody >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SSPCPXPkgBody >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
