// ss protocol lbclt to lbsrv

syntax = "proto3";

import "common.proto";

enum SSLCLSID
{
	SSID_LC_LS_NODE_REGISTER = 0;
	SSID_LC_LS_NODE_UNREGISTER = 1;
	SSID_LC_LS_HEART_BEAT_REQ = 2;
	SSID_LS_LC_HEART_BEAT_RSP = 3;
	SSID_LC_LS_SUBSCRIBE = 4;
	SSID_LS_LC_PUBLISH = 5;
	SSID_LC_LS_GET_ALL_NODES_REQ = 6;
	SSID_LS_LC_GET_ALL_NODES_RSP = 7;
	SSID_LC_LS_GET_LEAST_LOAD_NODE_REQ = 8;
	SSID_LS_LC_GET_LEAST_LOAD_NODE_RSP = 9;
}

message SSLCLSNode
{
	NODETYPE node_type = 1;
	uint32 node_id = 2;
	string ip = 3;
	uint32 port = 4;
}

message SSLCLSNodeRegister
{
	SSLCLSNode node = 1;
}

message SSLCLSNodeUnregister
{
	NODETYPE node_type = 1;
	uint32 node_id = 2;
}

message SSLCLSHeartBeatReq
{
	uint32 load = 1;
}

message SSLSLCHeartBeatRsp
{
}

message SSLCLSSubscribe
{
	NODETYPE node_type = 1;
}

message SSLSLCPublish
{
	enum CHANGETYPE
	{
		REGISTER = 0;
		UNREGISTER = 1;
		CHANGE = 2;
	}
	CHANGETYPE change_type = 1;
	SSLCLSNode node = 2;
}

message SSLCLSGetAllNodesReq
{
	NODETYPE node_type = 1;
}

message SSLSLCGetAllNodesRsp
{
	repeated SSLCLSNode nodes = 1;
}

message SSLCLSGetLeastLoadNodeReq
{
	NODETYPE node_type = 1;
}

message SSLSLCGetLeastLoadNodeRsp
{
	SSLCLSNode node = 1;
}

message SSLCLSPkgBody
{
	oneof body
	{
		SSLCLSNodeRegister node_register = 1;
		SSLCLSNodeUnregister node_unregister = 2;
		SSLCLSHeartBeatReq heart_beat_req = 3;
		SSLSLCHeartBeatRsp heart_beat_rsp = 4;
		SSLCLSSubscribe subscribe = 5;
		SSLSLCPublish publish = 6;
		SSLCLSGetAllNodesReq get_all_nodes_req = 7;
		SSLSLCGetAllNodesRsp get_all_nodes_rsp = 8;
		SSLCLSGetLeastLoadNodeReq get_least_load_node_req = 9;
		SSLSLCGetLeastLoadNodeRsp get_least_load_node_rsp = 10;
	}
}