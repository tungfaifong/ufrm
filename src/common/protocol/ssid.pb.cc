// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ssid.proto

#include "ssid.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_ssid_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ssid_2eproto = nullptr;
const uint32_t TableStruct_ssid_2eproto::offsets[1] = {};
static constexpr ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema* schemas = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::Message* const* file_default_instances = nullptr;

const char descriptor_table_protodef_ssid_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nssid.proto*\310\006\n\004SSID\022\034\n\030SSID_LC_LS_NODE"
  "_REGISTER\020\000\022\036\n\032SSID_LC_LS_NODE_UNREGISTE"
  "R\020\001\022\035\n\031SSID_LC_LS_HEART_BEAT_REQ\020\002\022\035\n\031SS"
  "ID_LS_LC_HEART_BEAT_RSP\020\003\022\030\n\024SSID_LC_LS_"
  "SUBSCRIBE\020\004\022\026\n\022SSID_LS_LC_PUBLISH\020\005\022 \n\034S"
  "SID_LC_LS_GET_ALL_NODES_REQ\020\006\022 \n\034SSID_LS"
  "_LC_GET_ALL_NODES_RSP\020\007\022&\n\"SSID_LC_LS_GE"
  "T_LEAST_LOAD_NODE_REQ\020\010\022&\n\"SSID_LS_LC_GE"
  "T_LEAST_LOAD_NODE_RSP\020\t\022\024\n\017SSID_GW_GS_IN"
  "IT\020\220N\022\036\n\031SSID_GW_GS_HEART_BEAT_REQ\020\221N\022\036\n"
  "\031SSID_GS_GW_HEART_BEAT_RSP\020\222N\022\035\n\030SSID_GW"
  "_GS_FORWAR_CS_PKG\020\223N\022\035\n\030SSID_GS_GW_FORWA"
  "R_SC_PKG\020\224N\022\036\n\030SSID_PC_PX_NODE_REGISTER\020"
  "\240\234\001\022 \n\032SSID_PC_PX_NODE_UNREGISTER\020\241\234\001\022\037\n"
  "\031SSID_PC_PX_HEART_BEAT_REQ\020\242\234\001\022\037\n\031SSID_P"
  "X_PC_HEART_BEAT_RSP\020\243\234\001\022\033\n\025SSID_DC_DS_SE"
  "LECT_REQ\020\260\352\001\022\033\n\025SSID_DS_DC_SELECT_RSP\020\261\352"
  "\001\022\033\n\025SSID_DC_DS_INSERT_REQ\020\262\352\001\022\033\n\025SSID_D"
  "S_DC_INSERT_RSP\020\263\352\001\022\033\n\025SSID_DC_DS_UPDATE"
  "_REQ\020\264\352\001\022\033\n\025SSID_DS_DC_UPDATE_RSP\020\265\352\001\022\033\n"
  "\025SSID_DC_DS_DELETE_REQ\020\266\352\001\022\033\n\025SSID_DS_DC"
  "_DELETE_RSP\020\267\352\001b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ssid_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ssid_2eproto = {
  false, false, 863, descriptor_table_protodef_ssid_2eproto, "ssid.proto", 
  &descriptor_table_ssid_2eproto_once, nullptr, 0, 0,
  schemas, file_default_instances, TableStruct_ssid_2eproto::offsets,
  nullptr, file_level_enum_descriptors_ssid_2eproto, file_level_service_descriptors_ssid_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_ssid_2eproto_getter() {
  return &descriptor_table_ssid_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_ssid_2eproto(&descriptor_table_ssid_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SSID_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ssid_2eproto);
  return file_level_enum_descriptors_ssid_2eproto[0];
}
bool SSID_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10000:
    case 10001:
    case 10002:
    case 10003:
    case 10004:
    case 20000:
    case 20001:
    case 20002:
    case 20003:
    case 30000:
    case 30001:
    case 30002:
    case 30003:
    case 30004:
    case 30005:
    case 30006:
    case 30007:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
