// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sslcls.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sslcls_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sslcls_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sslcls_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sslcls_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sslcls_2eproto;
class SSLCLSGetAllNodesReq;
struct SSLCLSGetAllNodesReqDefaultTypeInternal;
extern SSLCLSGetAllNodesReqDefaultTypeInternal _SSLCLSGetAllNodesReq_default_instance_;
class SSLCLSGetLeastLoadNodeReq;
struct SSLCLSGetLeastLoadNodeReqDefaultTypeInternal;
extern SSLCLSGetLeastLoadNodeReqDefaultTypeInternal _SSLCLSGetLeastLoadNodeReq_default_instance_;
class SSLCLSHeartBeatReq;
struct SSLCLSHeartBeatReqDefaultTypeInternal;
extern SSLCLSHeartBeatReqDefaultTypeInternal _SSLCLSHeartBeatReq_default_instance_;
class SSLCLSNode;
struct SSLCLSNodeDefaultTypeInternal;
extern SSLCLSNodeDefaultTypeInternal _SSLCLSNode_default_instance_;
class SSLCLSNodeRegister;
struct SSLCLSNodeRegisterDefaultTypeInternal;
extern SSLCLSNodeRegisterDefaultTypeInternal _SSLCLSNodeRegister_default_instance_;
class SSLCLSNodeUnregister;
struct SSLCLSNodeUnregisterDefaultTypeInternal;
extern SSLCLSNodeUnregisterDefaultTypeInternal _SSLCLSNodeUnregister_default_instance_;
class SSLCLSPkgBody;
struct SSLCLSPkgBodyDefaultTypeInternal;
extern SSLCLSPkgBodyDefaultTypeInternal _SSLCLSPkgBody_default_instance_;
class SSLCLSSubscribe;
struct SSLCLSSubscribeDefaultTypeInternal;
extern SSLCLSSubscribeDefaultTypeInternal _SSLCLSSubscribe_default_instance_;
class SSLSLCGetAllNodesRsp;
struct SSLSLCGetAllNodesRspDefaultTypeInternal;
extern SSLSLCGetAllNodesRspDefaultTypeInternal _SSLSLCGetAllNodesRsp_default_instance_;
class SSLSLCGetLeastLoadNodeRsp;
struct SSLSLCGetLeastLoadNodeRspDefaultTypeInternal;
extern SSLSLCGetLeastLoadNodeRspDefaultTypeInternal _SSLSLCGetLeastLoadNodeRsp_default_instance_;
class SSLSLCHeartBeatRsp;
struct SSLSLCHeartBeatRspDefaultTypeInternal;
extern SSLSLCHeartBeatRspDefaultTypeInternal _SSLSLCHeartBeatRsp_default_instance_;
class SSLSLCPublish;
struct SSLSLCPublishDefaultTypeInternal;
extern SSLSLCPublishDefaultTypeInternal _SSLSLCPublish_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::SSLCLSGetAllNodesReq* Arena::CreateMaybeMessage<::SSLCLSGetAllNodesReq>(Arena*);
template<> ::SSLCLSGetLeastLoadNodeReq* Arena::CreateMaybeMessage<::SSLCLSGetLeastLoadNodeReq>(Arena*);
template<> ::SSLCLSHeartBeatReq* Arena::CreateMaybeMessage<::SSLCLSHeartBeatReq>(Arena*);
template<> ::SSLCLSNode* Arena::CreateMaybeMessage<::SSLCLSNode>(Arena*);
template<> ::SSLCLSNodeRegister* Arena::CreateMaybeMessage<::SSLCLSNodeRegister>(Arena*);
template<> ::SSLCLSNodeUnregister* Arena::CreateMaybeMessage<::SSLCLSNodeUnregister>(Arena*);
template<> ::SSLCLSPkgBody* Arena::CreateMaybeMessage<::SSLCLSPkgBody>(Arena*);
template<> ::SSLCLSSubscribe* Arena::CreateMaybeMessage<::SSLCLSSubscribe>(Arena*);
template<> ::SSLSLCGetAllNodesRsp* Arena::CreateMaybeMessage<::SSLSLCGetAllNodesRsp>(Arena*);
template<> ::SSLSLCGetLeastLoadNodeRsp* Arena::CreateMaybeMessage<::SSLSLCGetLeastLoadNodeRsp>(Arena*);
template<> ::SSLSLCHeartBeatRsp* Arena::CreateMaybeMessage<::SSLSLCHeartBeatRsp>(Arena*);
template<> ::SSLSLCPublish* Arena::CreateMaybeMessage<::SSLSLCPublish>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum SSLSLCPublish_PUBLISHTYPE : int {
  SSLSLCPublish_PUBLISHTYPE_REGISTER = 0,
  SSLSLCPublish_PUBLISHTYPE_UNREGISTER = 1,
  SSLSLCPublish_PUBLISHTYPE_CHANGE = 2,
  SSLSLCPublish_PUBLISHTYPE_SSLSLCPublish_PUBLISHTYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SSLSLCPublish_PUBLISHTYPE_SSLSLCPublish_PUBLISHTYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SSLSLCPublish_PUBLISHTYPE_IsValid(int value);
constexpr SSLSLCPublish_PUBLISHTYPE SSLSLCPublish_PUBLISHTYPE_PUBLISHTYPE_MIN = SSLSLCPublish_PUBLISHTYPE_REGISTER;
constexpr SSLSLCPublish_PUBLISHTYPE SSLSLCPublish_PUBLISHTYPE_PUBLISHTYPE_MAX = SSLSLCPublish_PUBLISHTYPE_CHANGE;
constexpr int SSLSLCPublish_PUBLISHTYPE_PUBLISHTYPE_ARRAYSIZE = SSLSLCPublish_PUBLISHTYPE_PUBLISHTYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SSLSLCPublish_PUBLISHTYPE_descriptor();
template<typename T>
inline const std::string& SSLSLCPublish_PUBLISHTYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SSLSLCPublish_PUBLISHTYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SSLSLCPublish_PUBLISHTYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SSLSLCPublish_PUBLISHTYPE_descriptor(), enum_t_value);
}
inline bool SSLSLCPublish_PUBLISHTYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SSLSLCPublish_PUBLISHTYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SSLSLCPublish_PUBLISHTYPE>(
    SSLSLCPublish_PUBLISHTYPE_descriptor(), name, value);
}
// ===================================================================

class SSLCLSNode final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SSLCLSNode) */ {
 public:
  inline SSLCLSNode() : SSLCLSNode(nullptr) {}
  ~SSLCLSNode() override;
  explicit constexpr SSLCLSNode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SSLCLSNode(const SSLCLSNode& from);
  SSLCLSNode(SSLCLSNode&& from) noexcept
    : SSLCLSNode() {
    *this = ::std::move(from);
  }

  inline SSLCLSNode& operator=(const SSLCLSNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSLCLSNode& operator=(SSLCLSNode&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SSLCLSNode& default_instance() {
    return *internal_default_instance();
  }
  static inline const SSLCLSNode* internal_default_instance() {
    return reinterpret_cast<const SSLCLSNode*>(
               &_SSLCLSNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SSLCLSNode& a, SSLCLSNode& b) {
    a.Swap(&b);
  }
  inline void Swap(SSLCLSNode* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SSLCLSNode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SSLCLSNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SSLCLSNode>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SSLCLSNode& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SSLCLSNode& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSLCLSNode* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SSLCLSNode";
  }
  protected:
  explicit SSLCLSNode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 3,
    kNodeTypeFieldNumber = 1,
    kNodeIdFieldNumber = 2,
    kPortFieldNumber = 4,
  };
  // string ip = 3;
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // .NODETYPE node_type = 1;
  void clear_node_type();
  ::NODETYPE node_type() const;
  void set_node_type(::NODETYPE value);
  private:
  ::NODETYPE _internal_node_type() const;
  void _internal_set_node_type(::NODETYPE value);
  public:

  // uint32 node_id = 2;
  void clear_node_id();
  uint32_t node_id() const;
  void set_node_id(uint32_t value);
  private:
  uint32_t _internal_node_id() const;
  void _internal_set_node_id(uint32_t value);
  public:

  // uint32 port = 4;
  void clear_port();
  uint32_t port() const;
  void set_port(uint32_t value);
  private:
  uint32_t _internal_port() const;
  void _internal_set_port(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:SSLCLSNode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  int node_type_;
  uint32_t node_id_;
  uint32_t port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sslcls_2eproto;
};
// -------------------------------------------------------------------

class SSLCLSNodeRegister final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SSLCLSNodeRegister) */ {
 public:
  inline SSLCLSNodeRegister() : SSLCLSNodeRegister(nullptr) {}
  ~SSLCLSNodeRegister() override;
  explicit constexpr SSLCLSNodeRegister(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SSLCLSNodeRegister(const SSLCLSNodeRegister& from);
  SSLCLSNodeRegister(SSLCLSNodeRegister&& from) noexcept
    : SSLCLSNodeRegister() {
    *this = ::std::move(from);
  }

  inline SSLCLSNodeRegister& operator=(const SSLCLSNodeRegister& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSLCLSNodeRegister& operator=(SSLCLSNodeRegister&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SSLCLSNodeRegister& default_instance() {
    return *internal_default_instance();
  }
  static inline const SSLCLSNodeRegister* internal_default_instance() {
    return reinterpret_cast<const SSLCLSNodeRegister*>(
               &_SSLCLSNodeRegister_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SSLCLSNodeRegister& a, SSLCLSNodeRegister& b) {
    a.Swap(&b);
  }
  inline void Swap(SSLCLSNodeRegister* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SSLCLSNodeRegister* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SSLCLSNodeRegister* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SSLCLSNodeRegister>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SSLCLSNodeRegister& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SSLCLSNodeRegister& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSLCLSNodeRegister* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SSLCLSNodeRegister";
  }
  protected:
  explicit SSLCLSNodeRegister(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeFieldNumber = 1,
  };
  // .SSLCLSNode node = 1;
  bool has_node() const;
  private:
  bool _internal_has_node() const;
  public:
  void clear_node();
  const ::SSLCLSNode& node() const;
  PROTOBUF_NODISCARD ::SSLCLSNode* release_node();
  ::SSLCLSNode* mutable_node();
  void set_allocated_node(::SSLCLSNode* node);
  private:
  const ::SSLCLSNode& _internal_node() const;
  ::SSLCLSNode* _internal_mutable_node();
  public:
  void unsafe_arena_set_allocated_node(
      ::SSLCLSNode* node);
  ::SSLCLSNode* unsafe_arena_release_node();

  // @@protoc_insertion_point(class_scope:SSLCLSNodeRegister)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::SSLCLSNode* node_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sslcls_2eproto;
};
// -------------------------------------------------------------------

class SSLCLSNodeUnregister final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SSLCLSNodeUnregister) */ {
 public:
  inline SSLCLSNodeUnregister() : SSLCLSNodeUnregister(nullptr) {}
  ~SSLCLSNodeUnregister() override;
  explicit constexpr SSLCLSNodeUnregister(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SSLCLSNodeUnregister(const SSLCLSNodeUnregister& from);
  SSLCLSNodeUnregister(SSLCLSNodeUnregister&& from) noexcept
    : SSLCLSNodeUnregister() {
    *this = ::std::move(from);
  }

  inline SSLCLSNodeUnregister& operator=(const SSLCLSNodeUnregister& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSLCLSNodeUnregister& operator=(SSLCLSNodeUnregister&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SSLCLSNodeUnregister& default_instance() {
    return *internal_default_instance();
  }
  static inline const SSLCLSNodeUnregister* internal_default_instance() {
    return reinterpret_cast<const SSLCLSNodeUnregister*>(
               &_SSLCLSNodeUnregister_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SSLCLSNodeUnregister& a, SSLCLSNodeUnregister& b) {
    a.Swap(&b);
  }
  inline void Swap(SSLCLSNodeUnregister* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SSLCLSNodeUnregister* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SSLCLSNodeUnregister* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SSLCLSNodeUnregister>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SSLCLSNodeUnregister& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SSLCLSNodeUnregister& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSLCLSNodeUnregister* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SSLCLSNodeUnregister";
  }
  protected:
  explicit SSLCLSNodeUnregister(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeTypeFieldNumber = 1,
    kNodeIdFieldNumber = 2,
  };
  // .NODETYPE node_type = 1;
  void clear_node_type();
  ::NODETYPE node_type() const;
  void set_node_type(::NODETYPE value);
  private:
  ::NODETYPE _internal_node_type() const;
  void _internal_set_node_type(::NODETYPE value);
  public:

  // uint32 node_id = 2;
  void clear_node_id();
  uint32_t node_id() const;
  void set_node_id(uint32_t value);
  private:
  uint32_t _internal_node_id() const;
  void _internal_set_node_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:SSLCLSNodeUnregister)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int node_type_;
  uint32_t node_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sslcls_2eproto;
};
// -------------------------------------------------------------------

class SSLCLSHeartBeatReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SSLCLSHeartBeatReq) */ {
 public:
  inline SSLCLSHeartBeatReq() : SSLCLSHeartBeatReq(nullptr) {}
  ~SSLCLSHeartBeatReq() override;
  explicit constexpr SSLCLSHeartBeatReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SSLCLSHeartBeatReq(const SSLCLSHeartBeatReq& from);
  SSLCLSHeartBeatReq(SSLCLSHeartBeatReq&& from) noexcept
    : SSLCLSHeartBeatReq() {
    *this = ::std::move(from);
  }

  inline SSLCLSHeartBeatReq& operator=(const SSLCLSHeartBeatReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSLCLSHeartBeatReq& operator=(SSLCLSHeartBeatReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SSLCLSHeartBeatReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const SSLCLSHeartBeatReq* internal_default_instance() {
    return reinterpret_cast<const SSLCLSHeartBeatReq*>(
               &_SSLCLSHeartBeatReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SSLCLSHeartBeatReq& a, SSLCLSHeartBeatReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SSLCLSHeartBeatReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SSLCLSHeartBeatReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SSLCLSHeartBeatReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SSLCLSHeartBeatReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SSLCLSHeartBeatReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SSLCLSHeartBeatReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSLCLSHeartBeatReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SSLCLSHeartBeatReq";
  }
  protected:
  explicit SSLCLSHeartBeatReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoadFieldNumber = 1,
  };
  // uint32 load = 1;
  void clear_load();
  uint32_t load() const;
  void set_load(uint32_t value);
  private:
  uint32_t _internal_load() const;
  void _internal_set_load(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:SSLCLSHeartBeatReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t load_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sslcls_2eproto;
};
// -------------------------------------------------------------------

class SSLSLCHeartBeatRsp final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:SSLSLCHeartBeatRsp) */ {
 public:
  inline SSLSLCHeartBeatRsp() : SSLSLCHeartBeatRsp(nullptr) {}
  explicit constexpr SSLSLCHeartBeatRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SSLSLCHeartBeatRsp(const SSLSLCHeartBeatRsp& from);
  SSLSLCHeartBeatRsp(SSLSLCHeartBeatRsp&& from) noexcept
    : SSLSLCHeartBeatRsp() {
    *this = ::std::move(from);
  }

  inline SSLSLCHeartBeatRsp& operator=(const SSLSLCHeartBeatRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSLSLCHeartBeatRsp& operator=(SSLSLCHeartBeatRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SSLSLCHeartBeatRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const SSLSLCHeartBeatRsp* internal_default_instance() {
    return reinterpret_cast<const SSLSLCHeartBeatRsp*>(
               &_SSLSLCHeartBeatRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SSLSLCHeartBeatRsp& a, SSLSLCHeartBeatRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(SSLSLCHeartBeatRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SSLSLCHeartBeatRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SSLSLCHeartBeatRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SSLSLCHeartBeatRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SSLSLCHeartBeatRsp& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SSLSLCHeartBeatRsp& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SSLSLCHeartBeatRsp";
  }
  protected:
  explicit SSLSLCHeartBeatRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:SSLSLCHeartBeatRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sslcls_2eproto;
};
// -------------------------------------------------------------------

class SSLCLSSubscribe final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SSLCLSSubscribe) */ {
 public:
  inline SSLCLSSubscribe() : SSLCLSSubscribe(nullptr) {}
  ~SSLCLSSubscribe() override;
  explicit constexpr SSLCLSSubscribe(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SSLCLSSubscribe(const SSLCLSSubscribe& from);
  SSLCLSSubscribe(SSLCLSSubscribe&& from) noexcept
    : SSLCLSSubscribe() {
    *this = ::std::move(from);
  }

  inline SSLCLSSubscribe& operator=(const SSLCLSSubscribe& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSLCLSSubscribe& operator=(SSLCLSSubscribe&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SSLCLSSubscribe& default_instance() {
    return *internal_default_instance();
  }
  static inline const SSLCLSSubscribe* internal_default_instance() {
    return reinterpret_cast<const SSLCLSSubscribe*>(
               &_SSLCLSSubscribe_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SSLCLSSubscribe& a, SSLCLSSubscribe& b) {
    a.Swap(&b);
  }
  inline void Swap(SSLCLSSubscribe* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SSLCLSSubscribe* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SSLCLSSubscribe* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SSLCLSSubscribe>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SSLCLSSubscribe& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SSLCLSSubscribe& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSLCLSSubscribe* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SSLCLSSubscribe";
  }
  protected:
  explicit SSLCLSSubscribe(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeTypeFieldNumber = 1,
  };
  // .NODETYPE node_type = 1;
  void clear_node_type();
  ::NODETYPE node_type() const;
  void set_node_type(::NODETYPE value);
  private:
  ::NODETYPE _internal_node_type() const;
  void _internal_set_node_type(::NODETYPE value);
  public:

  // @@protoc_insertion_point(class_scope:SSLCLSSubscribe)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int node_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sslcls_2eproto;
};
// -------------------------------------------------------------------

class SSLSLCPublish final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SSLSLCPublish) */ {
 public:
  inline SSLSLCPublish() : SSLSLCPublish(nullptr) {}
  ~SSLSLCPublish() override;
  explicit constexpr SSLSLCPublish(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SSLSLCPublish(const SSLSLCPublish& from);
  SSLSLCPublish(SSLSLCPublish&& from) noexcept
    : SSLSLCPublish() {
    *this = ::std::move(from);
  }

  inline SSLSLCPublish& operator=(const SSLSLCPublish& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSLSLCPublish& operator=(SSLSLCPublish&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SSLSLCPublish& default_instance() {
    return *internal_default_instance();
  }
  static inline const SSLSLCPublish* internal_default_instance() {
    return reinterpret_cast<const SSLSLCPublish*>(
               &_SSLSLCPublish_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SSLSLCPublish& a, SSLSLCPublish& b) {
    a.Swap(&b);
  }
  inline void Swap(SSLSLCPublish* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SSLSLCPublish* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SSLSLCPublish* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SSLSLCPublish>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SSLSLCPublish& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SSLSLCPublish& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSLSLCPublish* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SSLSLCPublish";
  }
  protected:
  explicit SSLSLCPublish(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SSLSLCPublish_PUBLISHTYPE PUBLISHTYPE;
  static constexpr PUBLISHTYPE REGISTER =
    SSLSLCPublish_PUBLISHTYPE_REGISTER;
  static constexpr PUBLISHTYPE UNREGISTER =
    SSLSLCPublish_PUBLISHTYPE_UNREGISTER;
  static constexpr PUBLISHTYPE CHANGE =
    SSLSLCPublish_PUBLISHTYPE_CHANGE;
  static inline bool PUBLISHTYPE_IsValid(int value) {
    return SSLSLCPublish_PUBLISHTYPE_IsValid(value);
  }
  static constexpr PUBLISHTYPE PUBLISHTYPE_MIN =
    SSLSLCPublish_PUBLISHTYPE_PUBLISHTYPE_MIN;
  static constexpr PUBLISHTYPE PUBLISHTYPE_MAX =
    SSLSLCPublish_PUBLISHTYPE_PUBLISHTYPE_MAX;
  static constexpr int PUBLISHTYPE_ARRAYSIZE =
    SSLSLCPublish_PUBLISHTYPE_PUBLISHTYPE_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PUBLISHTYPE_descriptor() {
    return SSLSLCPublish_PUBLISHTYPE_descriptor();
  }
  template<typename T>
  static inline const std::string& PUBLISHTYPE_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PUBLISHTYPE>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PUBLISHTYPE_Name.");
    return SSLSLCPublish_PUBLISHTYPE_Name(enum_t_value);
  }
  static inline bool PUBLISHTYPE_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      PUBLISHTYPE* value) {
    return SSLSLCPublish_PUBLISHTYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNodeFieldNumber = 2,
    kPublishTypeFieldNumber = 1,
  };
  // .SSLCLSNode node = 2;
  bool has_node() const;
  private:
  bool _internal_has_node() const;
  public:
  void clear_node();
  const ::SSLCLSNode& node() const;
  PROTOBUF_NODISCARD ::SSLCLSNode* release_node();
  ::SSLCLSNode* mutable_node();
  void set_allocated_node(::SSLCLSNode* node);
  private:
  const ::SSLCLSNode& _internal_node() const;
  ::SSLCLSNode* _internal_mutable_node();
  public:
  void unsafe_arena_set_allocated_node(
      ::SSLCLSNode* node);
  ::SSLCLSNode* unsafe_arena_release_node();

  // .SSLSLCPublish.PUBLISHTYPE publish_type = 1;
  void clear_publish_type();
  ::SSLSLCPublish_PUBLISHTYPE publish_type() const;
  void set_publish_type(::SSLSLCPublish_PUBLISHTYPE value);
  private:
  ::SSLSLCPublish_PUBLISHTYPE _internal_publish_type() const;
  void _internal_set_publish_type(::SSLSLCPublish_PUBLISHTYPE value);
  public:

  // @@protoc_insertion_point(class_scope:SSLSLCPublish)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::SSLCLSNode* node_;
  int publish_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sslcls_2eproto;
};
// -------------------------------------------------------------------

class SSLCLSGetAllNodesReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SSLCLSGetAllNodesReq) */ {
 public:
  inline SSLCLSGetAllNodesReq() : SSLCLSGetAllNodesReq(nullptr) {}
  ~SSLCLSGetAllNodesReq() override;
  explicit constexpr SSLCLSGetAllNodesReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SSLCLSGetAllNodesReq(const SSLCLSGetAllNodesReq& from);
  SSLCLSGetAllNodesReq(SSLCLSGetAllNodesReq&& from) noexcept
    : SSLCLSGetAllNodesReq() {
    *this = ::std::move(from);
  }

  inline SSLCLSGetAllNodesReq& operator=(const SSLCLSGetAllNodesReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSLCLSGetAllNodesReq& operator=(SSLCLSGetAllNodesReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SSLCLSGetAllNodesReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const SSLCLSGetAllNodesReq* internal_default_instance() {
    return reinterpret_cast<const SSLCLSGetAllNodesReq*>(
               &_SSLCLSGetAllNodesReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SSLCLSGetAllNodesReq& a, SSLCLSGetAllNodesReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SSLCLSGetAllNodesReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SSLCLSGetAllNodesReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SSLCLSGetAllNodesReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SSLCLSGetAllNodesReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SSLCLSGetAllNodesReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SSLCLSGetAllNodesReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSLCLSGetAllNodesReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SSLCLSGetAllNodesReq";
  }
  protected:
  explicit SSLCLSGetAllNodesReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeTypeFieldNumber = 1,
  };
  // .NODETYPE node_type = 1;
  void clear_node_type();
  ::NODETYPE node_type() const;
  void set_node_type(::NODETYPE value);
  private:
  ::NODETYPE _internal_node_type() const;
  void _internal_set_node_type(::NODETYPE value);
  public:

  // @@protoc_insertion_point(class_scope:SSLCLSGetAllNodesReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int node_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sslcls_2eproto;
};
// -------------------------------------------------------------------

class SSLSLCGetAllNodesRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SSLSLCGetAllNodesRsp) */ {
 public:
  inline SSLSLCGetAllNodesRsp() : SSLSLCGetAllNodesRsp(nullptr) {}
  ~SSLSLCGetAllNodesRsp() override;
  explicit constexpr SSLSLCGetAllNodesRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SSLSLCGetAllNodesRsp(const SSLSLCGetAllNodesRsp& from);
  SSLSLCGetAllNodesRsp(SSLSLCGetAllNodesRsp&& from) noexcept
    : SSLSLCGetAllNodesRsp() {
    *this = ::std::move(from);
  }

  inline SSLSLCGetAllNodesRsp& operator=(const SSLSLCGetAllNodesRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSLSLCGetAllNodesRsp& operator=(SSLSLCGetAllNodesRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SSLSLCGetAllNodesRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const SSLSLCGetAllNodesRsp* internal_default_instance() {
    return reinterpret_cast<const SSLSLCGetAllNodesRsp*>(
               &_SSLSLCGetAllNodesRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SSLSLCGetAllNodesRsp& a, SSLSLCGetAllNodesRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(SSLSLCGetAllNodesRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SSLSLCGetAllNodesRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SSLSLCGetAllNodesRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SSLSLCGetAllNodesRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SSLSLCGetAllNodesRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SSLSLCGetAllNodesRsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSLSLCGetAllNodesRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SSLSLCGetAllNodesRsp";
  }
  protected:
  explicit SSLSLCGetAllNodesRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodesFieldNumber = 1,
  };
  // repeated .SSLCLSNode nodes = 1;
  int nodes_size() const;
  private:
  int _internal_nodes_size() const;
  public:
  void clear_nodes();
  ::SSLCLSNode* mutable_nodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SSLCLSNode >*
      mutable_nodes();
  private:
  const ::SSLCLSNode& _internal_nodes(int index) const;
  ::SSLCLSNode* _internal_add_nodes();
  public:
  const ::SSLCLSNode& nodes(int index) const;
  ::SSLCLSNode* add_nodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SSLCLSNode >&
      nodes() const;

  // @@protoc_insertion_point(class_scope:SSLSLCGetAllNodesRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SSLCLSNode > nodes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sslcls_2eproto;
};
// -------------------------------------------------------------------

class SSLCLSGetLeastLoadNodeReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SSLCLSGetLeastLoadNodeReq) */ {
 public:
  inline SSLCLSGetLeastLoadNodeReq() : SSLCLSGetLeastLoadNodeReq(nullptr) {}
  ~SSLCLSGetLeastLoadNodeReq() override;
  explicit constexpr SSLCLSGetLeastLoadNodeReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SSLCLSGetLeastLoadNodeReq(const SSLCLSGetLeastLoadNodeReq& from);
  SSLCLSGetLeastLoadNodeReq(SSLCLSGetLeastLoadNodeReq&& from) noexcept
    : SSLCLSGetLeastLoadNodeReq() {
    *this = ::std::move(from);
  }

  inline SSLCLSGetLeastLoadNodeReq& operator=(const SSLCLSGetLeastLoadNodeReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSLCLSGetLeastLoadNodeReq& operator=(SSLCLSGetLeastLoadNodeReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SSLCLSGetLeastLoadNodeReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const SSLCLSGetLeastLoadNodeReq* internal_default_instance() {
    return reinterpret_cast<const SSLCLSGetLeastLoadNodeReq*>(
               &_SSLCLSGetLeastLoadNodeReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SSLCLSGetLeastLoadNodeReq& a, SSLCLSGetLeastLoadNodeReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SSLCLSGetLeastLoadNodeReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SSLCLSGetLeastLoadNodeReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SSLCLSGetLeastLoadNodeReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SSLCLSGetLeastLoadNodeReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SSLCLSGetLeastLoadNodeReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SSLCLSGetLeastLoadNodeReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSLCLSGetLeastLoadNodeReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SSLCLSGetLeastLoadNodeReq";
  }
  protected:
  explicit SSLCLSGetLeastLoadNodeReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeTypeFieldNumber = 1,
  };
  // .NODETYPE node_type = 1;
  void clear_node_type();
  ::NODETYPE node_type() const;
  void set_node_type(::NODETYPE value);
  private:
  ::NODETYPE _internal_node_type() const;
  void _internal_set_node_type(::NODETYPE value);
  public:

  // @@protoc_insertion_point(class_scope:SSLCLSGetLeastLoadNodeReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int node_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sslcls_2eproto;
};
// -------------------------------------------------------------------

class SSLSLCGetLeastLoadNodeRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SSLSLCGetLeastLoadNodeRsp) */ {
 public:
  inline SSLSLCGetLeastLoadNodeRsp() : SSLSLCGetLeastLoadNodeRsp(nullptr) {}
  ~SSLSLCGetLeastLoadNodeRsp() override;
  explicit constexpr SSLSLCGetLeastLoadNodeRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SSLSLCGetLeastLoadNodeRsp(const SSLSLCGetLeastLoadNodeRsp& from);
  SSLSLCGetLeastLoadNodeRsp(SSLSLCGetLeastLoadNodeRsp&& from) noexcept
    : SSLSLCGetLeastLoadNodeRsp() {
    *this = ::std::move(from);
  }

  inline SSLSLCGetLeastLoadNodeRsp& operator=(const SSLSLCGetLeastLoadNodeRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSLSLCGetLeastLoadNodeRsp& operator=(SSLSLCGetLeastLoadNodeRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SSLSLCGetLeastLoadNodeRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const SSLSLCGetLeastLoadNodeRsp* internal_default_instance() {
    return reinterpret_cast<const SSLSLCGetLeastLoadNodeRsp*>(
               &_SSLSLCGetLeastLoadNodeRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SSLSLCGetLeastLoadNodeRsp& a, SSLSLCGetLeastLoadNodeRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(SSLSLCGetLeastLoadNodeRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SSLSLCGetLeastLoadNodeRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SSLSLCGetLeastLoadNodeRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SSLSLCGetLeastLoadNodeRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SSLSLCGetLeastLoadNodeRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SSLSLCGetLeastLoadNodeRsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSLSLCGetLeastLoadNodeRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SSLSLCGetLeastLoadNodeRsp";
  }
  protected:
  explicit SSLSLCGetLeastLoadNodeRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeFieldNumber = 1,
  };
  // .SSLCLSNode node = 1;
  bool has_node() const;
  private:
  bool _internal_has_node() const;
  public:
  void clear_node();
  const ::SSLCLSNode& node() const;
  PROTOBUF_NODISCARD ::SSLCLSNode* release_node();
  ::SSLCLSNode* mutable_node();
  void set_allocated_node(::SSLCLSNode* node);
  private:
  const ::SSLCLSNode& _internal_node() const;
  ::SSLCLSNode* _internal_mutable_node();
  public:
  void unsafe_arena_set_allocated_node(
      ::SSLCLSNode* node);
  ::SSLCLSNode* unsafe_arena_release_node();

  // @@protoc_insertion_point(class_scope:SSLSLCGetLeastLoadNodeRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::SSLCLSNode* node_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sslcls_2eproto;
};
// -------------------------------------------------------------------

class SSLCLSPkgBody final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SSLCLSPkgBody) */ {
 public:
  inline SSLCLSPkgBody() : SSLCLSPkgBody(nullptr) {}
  ~SSLCLSPkgBody() override;
  explicit constexpr SSLCLSPkgBody(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SSLCLSPkgBody(const SSLCLSPkgBody& from);
  SSLCLSPkgBody(SSLCLSPkgBody&& from) noexcept
    : SSLCLSPkgBody() {
    *this = ::std::move(from);
  }

  inline SSLCLSPkgBody& operator=(const SSLCLSPkgBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSLCLSPkgBody& operator=(SSLCLSPkgBody&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SSLCLSPkgBody& default_instance() {
    return *internal_default_instance();
  }
  enum BodyCase {
    kNodeRegister = 1,
    kNodeUnregister = 2,
    kHeartBeatReq = 3,
    kHeartBeatRsp = 4,
    kSubscribe = 5,
    kPublish = 6,
    kGetAllNodesReq = 7,
    kGetAllNodesRsp = 8,
    kGetLeastLoadNodeReq = 9,
    kGetLeastLoadNodeRsp = 10,
    BODY_NOT_SET = 0,
  };

  static inline const SSLCLSPkgBody* internal_default_instance() {
    return reinterpret_cast<const SSLCLSPkgBody*>(
               &_SSLCLSPkgBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(SSLCLSPkgBody& a, SSLCLSPkgBody& b) {
    a.Swap(&b);
  }
  inline void Swap(SSLCLSPkgBody* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SSLCLSPkgBody* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SSLCLSPkgBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SSLCLSPkgBody>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SSLCLSPkgBody& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SSLCLSPkgBody& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSLCLSPkgBody* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SSLCLSPkgBody";
  }
  protected:
  explicit SSLCLSPkgBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeRegisterFieldNumber = 1,
    kNodeUnregisterFieldNumber = 2,
    kHeartBeatReqFieldNumber = 3,
    kHeartBeatRspFieldNumber = 4,
    kSubscribeFieldNumber = 5,
    kPublishFieldNumber = 6,
    kGetAllNodesReqFieldNumber = 7,
    kGetAllNodesRspFieldNumber = 8,
    kGetLeastLoadNodeReqFieldNumber = 9,
    kGetLeastLoadNodeRspFieldNumber = 10,
  };
  // .SSLCLSNodeRegister node_register = 1;
  bool has_node_register() const;
  private:
  bool _internal_has_node_register() const;
  public:
  void clear_node_register();
  const ::SSLCLSNodeRegister& node_register() const;
  PROTOBUF_NODISCARD ::SSLCLSNodeRegister* release_node_register();
  ::SSLCLSNodeRegister* mutable_node_register();
  void set_allocated_node_register(::SSLCLSNodeRegister* node_register);
  private:
  const ::SSLCLSNodeRegister& _internal_node_register() const;
  ::SSLCLSNodeRegister* _internal_mutable_node_register();
  public:
  void unsafe_arena_set_allocated_node_register(
      ::SSLCLSNodeRegister* node_register);
  ::SSLCLSNodeRegister* unsafe_arena_release_node_register();

  // .SSLCLSNodeUnregister node_unregister = 2;
  bool has_node_unregister() const;
  private:
  bool _internal_has_node_unregister() const;
  public:
  void clear_node_unregister();
  const ::SSLCLSNodeUnregister& node_unregister() const;
  PROTOBUF_NODISCARD ::SSLCLSNodeUnregister* release_node_unregister();
  ::SSLCLSNodeUnregister* mutable_node_unregister();
  void set_allocated_node_unregister(::SSLCLSNodeUnregister* node_unregister);
  private:
  const ::SSLCLSNodeUnregister& _internal_node_unregister() const;
  ::SSLCLSNodeUnregister* _internal_mutable_node_unregister();
  public:
  void unsafe_arena_set_allocated_node_unregister(
      ::SSLCLSNodeUnregister* node_unregister);
  ::SSLCLSNodeUnregister* unsafe_arena_release_node_unregister();

  // .SSLCLSHeartBeatReq heart_beat_req = 3;
  bool has_heart_beat_req() const;
  private:
  bool _internal_has_heart_beat_req() const;
  public:
  void clear_heart_beat_req();
  const ::SSLCLSHeartBeatReq& heart_beat_req() const;
  PROTOBUF_NODISCARD ::SSLCLSHeartBeatReq* release_heart_beat_req();
  ::SSLCLSHeartBeatReq* mutable_heart_beat_req();
  void set_allocated_heart_beat_req(::SSLCLSHeartBeatReq* heart_beat_req);
  private:
  const ::SSLCLSHeartBeatReq& _internal_heart_beat_req() const;
  ::SSLCLSHeartBeatReq* _internal_mutable_heart_beat_req();
  public:
  void unsafe_arena_set_allocated_heart_beat_req(
      ::SSLCLSHeartBeatReq* heart_beat_req);
  ::SSLCLSHeartBeatReq* unsafe_arena_release_heart_beat_req();

  // .SSLSLCHeartBeatRsp heart_beat_rsp = 4;
  bool has_heart_beat_rsp() const;
  private:
  bool _internal_has_heart_beat_rsp() const;
  public:
  void clear_heart_beat_rsp();
  const ::SSLSLCHeartBeatRsp& heart_beat_rsp() const;
  PROTOBUF_NODISCARD ::SSLSLCHeartBeatRsp* release_heart_beat_rsp();
  ::SSLSLCHeartBeatRsp* mutable_heart_beat_rsp();
  void set_allocated_heart_beat_rsp(::SSLSLCHeartBeatRsp* heart_beat_rsp);
  private:
  const ::SSLSLCHeartBeatRsp& _internal_heart_beat_rsp() const;
  ::SSLSLCHeartBeatRsp* _internal_mutable_heart_beat_rsp();
  public:
  void unsafe_arena_set_allocated_heart_beat_rsp(
      ::SSLSLCHeartBeatRsp* heart_beat_rsp);
  ::SSLSLCHeartBeatRsp* unsafe_arena_release_heart_beat_rsp();

  // .SSLCLSSubscribe subscribe = 5;
  bool has_subscribe() const;
  private:
  bool _internal_has_subscribe() const;
  public:
  void clear_subscribe();
  const ::SSLCLSSubscribe& subscribe() const;
  PROTOBUF_NODISCARD ::SSLCLSSubscribe* release_subscribe();
  ::SSLCLSSubscribe* mutable_subscribe();
  void set_allocated_subscribe(::SSLCLSSubscribe* subscribe);
  private:
  const ::SSLCLSSubscribe& _internal_subscribe() const;
  ::SSLCLSSubscribe* _internal_mutable_subscribe();
  public:
  void unsafe_arena_set_allocated_subscribe(
      ::SSLCLSSubscribe* subscribe);
  ::SSLCLSSubscribe* unsafe_arena_release_subscribe();

  // .SSLSLCPublish publish = 6;
  bool has_publish() const;
  private:
  bool _internal_has_publish() const;
  public:
  void clear_publish();
  const ::SSLSLCPublish& publish() const;
  PROTOBUF_NODISCARD ::SSLSLCPublish* release_publish();
  ::SSLSLCPublish* mutable_publish();
  void set_allocated_publish(::SSLSLCPublish* publish);
  private:
  const ::SSLSLCPublish& _internal_publish() const;
  ::SSLSLCPublish* _internal_mutable_publish();
  public:
  void unsafe_arena_set_allocated_publish(
      ::SSLSLCPublish* publish);
  ::SSLSLCPublish* unsafe_arena_release_publish();

  // .SSLCLSGetAllNodesReq get_all_nodes_req = 7;
  bool has_get_all_nodes_req() const;
  private:
  bool _internal_has_get_all_nodes_req() const;
  public:
  void clear_get_all_nodes_req();
  const ::SSLCLSGetAllNodesReq& get_all_nodes_req() const;
  PROTOBUF_NODISCARD ::SSLCLSGetAllNodesReq* release_get_all_nodes_req();
  ::SSLCLSGetAllNodesReq* mutable_get_all_nodes_req();
  void set_allocated_get_all_nodes_req(::SSLCLSGetAllNodesReq* get_all_nodes_req);
  private:
  const ::SSLCLSGetAllNodesReq& _internal_get_all_nodes_req() const;
  ::SSLCLSGetAllNodesReq* _internal_mutable_get_all_nodes_req();
  public:
  void unsafe_arena_set_allocated_get_all_nodes_req(
      ::SSLCLSGetAllNodesReq* get_all_nodes_req);
  ::SSLCLSGetAllNodesReq* unsafe_arena_release_get_all_nodes_req();

  // .SSLSLCGetAllNodesRsp get_all_nodes_rsp = 8;
  bool has_get_all_nodes_rsp() const;
  private:
  bool _internal_has_get_all_nodes_rsp() const;
  public:
  void clear_get_all_nodes_rsp();
  const ::SSLSLCGetAllNodesRsp& get_all_nodes_rsp() const;
  PROTOBUF_NODISCARD ::SSLSLCGetAllNodesRsp* release_get_all_nodes_rsp();
  ::SSLSLCGetAllNodesRsp* mutable_get_all_nodes_rsp();
  void set_allocated_get_all_nodes_rsp(::SSLSLCGetAllNodesRsp* get_all_nodes_rsp);
  private:
  const ::SSLSLCGetAllNodesRsp& _internal_get_all_nodes_rsp() const;
  ::SSLSLCGetAllNodesRsp* _internal_mutable_get_all_nodes_rsp();
  public:
  void unsafe_arena_set_allocated_get_all_nodes_rsp(
      ::SSLSLCGetAllNodesRsp* get_all_nodes_rsp);
  ::SSLSLCGetAllNodesRsp* unsafe_arena_release_get_all_nodes_rsp();

  // .SSLCLSGetLeastLoadNodeReq get_least_load_node_req = 9;
  bool has_get_least_load_node_req() const;
  private:
  bool _internal_has_get_least_load_node_req() const;
  public:
  void clear_get_least_load_node_req();
  const ::SSLCLSGetLeastLoadNodeReq& get_least_load_node_req() const;
  PROTOBUF_NODISCARD ::SSLCLSGetLeastLoadNodeReq* release_get_least_load_node_req();
  ::SSLCLSGetLeastLoadNodeReq* mutable_get_least_load_node_req();
  void set_allocated_get_least_load_node_req(::SSLCLSGetLeastLoadNodeReq* get_least_load_node_req);
  private:
  const ::SSLCLSGetLeastLoadNodeReq& _internal_get_least_load_node_req() const;
  ::SSLCLSGetLeastLoadNodeReq* _internal_mutable_get_least_load_node_req();
  public:
  void unsafe_arena_set_allocated_get_least_load_node_req(
      ::SSLCLSGetLeastLoadNodeReq* get_least_load_node_req);
  ::SSLCLSGetLeastLoadNodeReq* unsafe_arena_release_get_least_load_node_req();

  // .SSLSLCGetLeastLoadNodeRsp get_least_load_node_rsp = 10;
  bool has_get_least_load_node_rsp() const;
  private:
  bool _internal_has_get_least_load_node_rsp() const;
  public:
  void clear_get_least_load_node_rsp();
  const ::SSLSLCGetLeastLoadNodeRsp& get_least_load_node_rsp() const;
  PROTOBUF_NODISCARD ::SSLSLCGetLeastLoadNodeRsp* release_get_least_load_node_rsp();
  ::SSLSLCGetLeastLoadNodeRsp* mutable_get_least_load_node_rsp();
  void set_allocated_get_least_load_node_rsp(::SSLSLCGetLeastLoadNodeRsp* get_least_load_node_rsp);
  private:
  const ::SSLSLCGetLeastLoadNodeRsp& _internal_get_least_load_node_rsp() const;
  ::SSLSLCGetLeastLoadNodeRsp* _internal_mutable_get_least_load_node_rsp();
  public:
  void unsafe_arena_set_allocated_get_least_load_node_rsp(
      ::SSLSLCGetLeastLoadNodeRsp* get_least_load_node_rsp);
  ::SSLSLCGetLeastLoadNodeRsp* unsafe_arena_release_get_least_load_node_rsp();

  void clear_body();
  BodyCase body_case() const;
  // @@protoc_insertion_point(class_scope:SSLCLSPkgBody)
 private:
  class _Internal;
  void set_has_node_register();
  void set_has_node_unregister();
  void set_has_heart_beat_req();
  void set_has_heart_beat_rsp();
  void set_has_subscribe();
  void set_has_publish();
  void set_has_get_all_nodes_req();
  void set_has_get_all_nodes_rsp();
  void set_has_get_least_load_node_req();
  void set_has_get_least_load_node_rsp();

  inline bool has_body() const;
  inline void clear_has_body();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union BodyUnion {
    constexpr BodyUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::SSLCLSNodeRegister* node_register_;
    ::SSLCLSNodeUnregister* node_unregister_;
    ::SSLCLSHeartBeatReq* heart_beat_req_;
    ::SSLSLCHeartBeatRsp* heart_beat_rsp_;
    ::SSLCLSSubscribe* subscribe_;
    ::SSLSLCPublish* publish_;
    ::SSLCLSGetAllNodesReq* get_all_nodes_req_;
    ::SSLSLCGetAllNodesRsp* get_all_nodes_rsp_;
    ::SSLCLSGetLeastLoadNodeReq* get_least_load_node_req_;
    ::SSLSLCGetLeastLoadNodeRsp* get_least_load_node_rsp_;
  } body_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_sslcls_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SSLCLSNode

// .NODETYPE node_type = 1;
inline void SSLCLSNode::clear_node_type() {
  node_type_ = 0;
}
inline ::NODETYPE SSLCLSNode::_internal_node_type() const {
  return static_cast< ::NODETYPE >(node_type_);
}
inline ::NODETYPE SSLCLSNode::node_type() const {
  // @@protoc_insertion_point(field_get:SSLCLSNode.node_type)
  return _internal_node_type();
}
inline void SSLCLSNode::_internal_set_node_type(::NODETYPE value) {
  
  node_type_ = value;
}
inline void SSLCLSNode::set_node_type(::NODETYPE value) {
  _internal_set_node_type(value);
  // @@protoc_insertion_point(field_set:SSLCLSNode.node_type)
}

// uint32 node_id = 2;
inline void SSLCLSNode::clear_node_id() {
  node_id_ = 0u;
}
inline uint32_t SSLCLSNode::_internal_node_id() const {
  return node_id_;
}
inline uint32_t SSLCLSNode::node_id() const {
  // @@protoc_insertion_point(field_get:SSLCLSNode.node_id)
  return _internal_node_id();
}
inline void SSLCLSNode::_internal_set_node_id(uint32_t value) {
  
  node_id_ = value;
}
inline void SSLCLSNode::set_node_id(uint32_t value) {
  _internal_set_node_id(value);
  // @@protoc_insertion_point(field_set:SSLCLSNode.node_id)
}

// string ip = 3;
inline void SSLCLSNode::clear_ip() {
  ip_.ClearToEmpty();
}
inline const std::string& SSLCLSNode::ip() const {
  // @@protoc_insertion_point(field_get:SSLCLSNode.ip)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SSLCLSNode::set_ip(ArgT0&& arg0, ArgT... args) {
 
 ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SSLCLSNode.ip)
}
inline std::string* SSLCLSNode::mutable_ip() {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:SSLCLSNode.ip)
  return _s;
}
inline const std::string& SSLCLSNode::_internal_ip() const {
  return ip_.Get();
}
inline void SSLCLSNode::_internal_set_ip(const std::string& value) {
  
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SSLCLSNode::_internal_mutable_ip() {
  
  return ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SSLCLSNode::release_ip() {
  // @@protoc_insertion_point(field_release:SSLCLSNode.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SSLCLSNode::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ip_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SSLCLSNode.ip)
}

// uint32 port = 4;
inline void SSLCLSNode::clear_port() {
  port_ = 0u;
}
inline uint32_t SSLCLSNode::_internal_port() const {
  return port_;
}
inline uint32_t SSLCLSNode::port() const {
  // @@protoc_insertion_point(field_get:SSLCLSNode.port)
  return _internal_port();
}
inline void SSLCLSNode::_internal_set_port(uint32_t value) {
  
  port_ = value;
}
inline void SSLCLSNode::set_port(uint32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:SSLCLSNode.port)
}

// -------------------------------------------------------------------

// SSLCLSNodeRegister

// .SSLCLSNode node = 1;
inline bool SSLCLSNodeRegister::_internal_has_node() const {
  return this != internal_default_instance() && node_ != nullptr;
}
inline bool SSLCLSNodeRegister::has_node() const {
  return _internal_has_node();
}
inline void SSLCLSNodeRegister::clear_node() {
  if (GetArenaForAllocation() == nullptr && node_ != nullptr) {
    delete node_;
  }
  node_ = nullptr;
}
inline const ::SSLCLSNode& SSLCLSNodeRegister::_internal_node() const {
  const ::SSLCLSNode* p = node_;
  return p != nullptr ? *p : reinterpret_cast<const ::SSLCLSNode&>(
      ::_SSLCLSNode_default_instance_);
}
inline const ::SSLCLSNode& SSLCLSNodeRegister::node() const {
  // @@protoc_insertion_point(field_get:SSLCLSNodeRegister.node)
  return _internal_node();
}
inline void SSLCLSNodeRegister::unsafe_arena_set_allocated_node(
    ::SSLCLSNode* node) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(node_);
  }
  node_ = node;
  if (node) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SSLCLSNodeRegister.node)
}
inline ::SSLCLSNode* SSLCLSNodeRegister::release_node() {
  
  ::SSLCLSNode* temp = node_;
  node_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SSLCLSNode* SSLCLSNodeRegister::unsafe_arena_release_node() {
  // @@protoc_insertion_point(field_release:SSLCLSNodeRegister.node)
  
  ::SSLCLSNode* temp = node_;
  node_ = nullptr;
  return temp;
}
inline ::SSLCLSNode* SSLCLSNodeRegister::_internal_mutable_node() {
  
  if (node_ == nullptr) {
    auto* p = CreateMaybeMessage<::SSLCLSNode>(GetArenaForAllocation());
    node_ = p;
  }
  return node_;
}
inline ::SSLCLSNode* SSLCLSNodeRegister::mutable_node() {
  ::SSLCLSNode* _msg = _internal_mutable_node();
  // @@protoc_insertion_point(field_mutable:SSLCLSNodeRegister.node)
  return _msg;
}
inline void SSLCLSNodeRegister::set_allocated_node(::SSLCLSNode* node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete node_;
  }
  if (node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::SSLCLSNode>::GetOwningArena(node);
    if (message_arena != submessage_arena) {
      node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, node, submessage_arena);
    }
    
  } else {
    
  }
  node_ = node;
  // @@protoc_insertion_point(field_set_allocated:SSLCLSNodeRegister.node)
}

// -------------------------------------------------------------------

// SSLCLSNodeUnregister

// .NODETYPE node_type = 1;
inline void SSLCLSNodeUnregister::clear_node_type() {
  node_type_ = 0;
}
inline ::NODETYPE SSLCLSNodeUnregister::_internal_node_type() const {
  return static_cast< ::NODETYPE >(node_type_);
}
inline ::NODETYPE SSLCLSNodeUnregister::node_type() const {
  // @@protoc_insertion_point(field_get:SSLCLSNodeUnregister.node_type)
  return _internal_node_type();
}
inline void SSLCLSNodeUnregister::_internal_set_node_type(::NODETYPE value) {
  
  node_type_ = value;
}
inline void SSLCLSNodeUnregister::set_node_type(::NODETYPE value) {
  _internal_set_node_type(value);
  // @@protoc_insertion_point(field_set:SSLCLSNodeUnregister.node_type)
}

// uint32 node_id = 2;
inline void SSLCLSNodeUnregister::clear_node_id() {
  node_id_ = 0u;
}
inline uint32_t SSLCLSNodeUnregister::_internal_node_id() const {
  return node_id_;
}
inline uint32_t SSLCLSNodeUnregister::node_id() const {
  // @@protoc_insertion_point(field_get:SSLCLSNodeUnregister.node_id)
  return _internal_node_id();
}
inline void SSLCLSNodeUnregister::_internal_set_node_id(uint32_t value) {
  
  node_id_ = value;
}
inline void SSLCLSNodeUnregister::set_node_id(uint32_t value) {
  _internal_set_node_id(value);
  // @@protoc_insertion_point(field_set:SSLCLSNodeUnregister.node_id)
}

// -------------------------------------------------------------------

// SSLCLSHeartBeatReq

// uint32 load = 1;
inline void SSLCLSHeartBeatReq::clear_load() {
  load_ = 0u;
}
inline uint32_t SSLCLSHeartBeatReq::_internal_load() const {
  return load_;
}
inline uint32_t SSLCLSHeartBeatReq::load() const {
  // @@protoc_insertion_point(field_get:SSLCLSHeartBeatReq.load)
  return _internal_load();
}
inline void SSLCLSHeartBeatReq::_internal_set_load(uint32_t value) {
  
  load_ = value;
}
inline void SSLCLSHeartBeatReq::set_load(uint32_t value) {
  _internal_set_load(value);
  // @@protoc_insertion_point(field_set:SSLCLSHeartBeatReq.load)
}

// -------------------------------------------------------------------

// SSLSLCHeartBeatRsp

// -------------------------------------------------------------------

// SSLCLSSubscribe

// .NODETYPE node_type = 1;
inline void SSLCLSSubscribe::clear_node_type() {
  node_type_ = 0;
}
inline ::NODETYPE SSLCLSSubscribe::_internal_node_type() const {
  return static_cast< ::NODETYPE >(node_type_);
}
inline ::NODETYPE SSLCLSSubscribe::node_type() const {
  // @@protoc_insertion_point(field_get:SSLCLSSubscribe.node_type)
  return _internal_node_type();
}
inline void SSLCLSSubscribe::_internal_set_node_type(::NODETYPE value) {
  
  node_type_ = value;
}
inline void SSLCLSSubscribe::set_node_type(::NODETYPE value) {
  _internal_set_node_type(value);
  // @@protoc_insertion_point(field_set:SSLCLSSubscribe.node_type)
}

// -------------------------------------------------------------------

// SSLSLCPublish

// .SSLSLCPublish.PUBLISHTYPE publish_type = 1;
inline void SSLSLCPublish::clear_publish_type() {
  publish_type_ = 0;
}
inline ::SSLSLCPublish_PUBLISHTYPE SSLSLCPublish::_internal_publish_type() const {
  return static_cast< ::SSLSLCPublish_PUBLISHTYPE >(publish_type_);
}
inline ::SSLSLCPublish_PUBLISHTYPE SSLSLCPublish::publish_type() const {
  // @@protoc_insertion_point(field_get:SSLSLCPublish.publish_type)
  return _internal_publish_type();
}
inline void SSLSLCPublish::_internal_set_publish_type(::SSLSLCPublish_PUBLISHTYPE value) {
  
  publish_type_ = value;
}
inline void SSLSLCPublish::set_publish_type(::SSLSLCPublish_PUBLISHTYPE value) {
  _internal_set_publish_type(value);
  // @@protoc_insertion_point(field_set:SSLSLCPublish.publish_type)
}

// .SSLCLSNode node = 2;
inline bool SSLSLCPublish::_internal_has_node() const {
  return this != internal_default_instance() && node_ != nullptr;
}
inline bool SSLSLCPublish::has_node() const {
  return _internal_has_node();
}
inline void SSLSLCPublish::clear_node() {
  if (GetArenaForAllocation() == nullptr && node_ != nullptr) {
    delete node_;
  }
  node_ = nullptr;
}
inline const ::SSLCLSNode& SSLSLCPublish::_internal_node() const {
  const ::SSLCLSNode* p = node_;
  return p != nullptr ? *p : reinterpret_cast<const ::SSLCLSNode&>(
      ::_SSLCLSNode_default_instance_);
}
inline const ::SSLCLSNode& SSLSLCPublish::node() const {
  // @@protoc_insertion_point(field_get:SSLSLCPublish.node)
  return _internal_node();
}
inline void SSLSLCPublish::unsafe_arena_set_allocated_node(
    ::SSLCLSNode* node) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(node_);
  }
  node_ = node;
  if (node) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SSLSLCPublish.node)
}
inline ::SSLCLSNode* SSLSLCPublish::release_node() {
  
  ::SSLCLSNode* temp = node_;
  node_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SSLCLSNode* SSLSLCPublish::unsafe_arena_release_node() {
  // @@protoc_insertion_point(field_release:SSLSLCPublish.node)
  
  ::SSLCLSNode* temp = node_;
  node_ = nullptr;
  return temp;
}
inline ::SSLCLSNode* SSLSLCPublish::_internal_mutable_node() {
  
  if (node_ == nullptr) {
    auto* p = CreateMaybeMessage<::SSLCLSNode>(GetArenaForAllocation());
    node_ = p;
  }
  return node_;
}
inline ::SSLCLSNode* SSLSLCPublish::mutable_node() {
  ::SSLCLSNode* _msg = _internal_mutable_node();
  // @@protoc_insertion_point(field_mutable:SSLSLCPublish.node)
  return _msg;
}
inline void SSLSLCPublish::set_allocated_node(::SSLCLSNode* node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete node_;
  }
  if (node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::SSLCLSNode>::GetOwningArena(node);
    if (message_arena != submessage_arena) {
      node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, node, submessage_arena);
    }
    
  } else {
    
  }
  node_ = node;
  // @@protoc_insertion_point(field_set_allocated:SSLSLCPublish.node)
}

// -------------------------------------------------------------------

// SSLCLSGetAllNodesReq

// .NODETYPE node_type = 1;
inline void SSLCLSGetAllNodesReq::clear_node_type() {
  node_type_ = 0;
}
inline ::NODETYPE SSLCLSGetAllNodesReq::_internal_node_type() const {
  return static_cast< ::NODETYPE >(node_type_);
}
inline ::NODETYPE SSLCLSGetAllNodesReq::node_type() const {
  // @@protoc_insertion_point(field_get:SSLCLSGetAllNodesReq.node_type)
  return _internal_node_type();
}
inline void SSLCLSGetAllNodesReq::_internal_set_node_type(::NODETYPE value) {
  
  node_type_ = value;
}
inline void SSLCLSGetAllNodesReq::set_node_type(::NODETYPE value) {
  _internal_set_node_type(value);
  // @@protoc_insertion_point(field_set:SSLCLSGetAllNodesReq.node_type)
}

// -------------------------------------------------------------------

// SSLSLCGetAllNodesRsp

// repeated .SSLCLSNode nodes = 1;
inline int SSLSLCGetAllNodesRsp::_internal_nodes_size() const {
  return nodes_.size();
}
inline int SSLSLCGetAllNodesRsp::nodes_size() const {
  return _internal_nodes_size();
}
inline void SSLSLCGetAllNodesRsp::clear_nodes() {
  nodes_.Clear();
}
inline ::SSLCLSNode* SSLSLCGetAllNodesRsp::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:SSLSLCGetAllNodesRsp.nodes)
  return nodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SSLCLSNode >*
SSLSLCGetAllNodesRsp::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:SSLSLCGetAllNodesRsp.nodes)
  return &nodes_;
}
inline const ::SSLCLSNode& SSLSLCGetAllNodesRsp::_internal_nodes(int index) const {
  return nodes_.Get(index);
}
inline const ::SSLCLSNode& SSLSLCGetAllNodesRsp::nodes(int index) const {
  // @@protoc_insertion_point(field_get:SSLSLCGetAllNodesRsp.nodes)
  return _internal_nodes(index);
}
inline ::SSLCLSNode* SSLSLCGetAllNodesRsp::_internal_add_nodes() {
  return nodes_.Add();
}
inline ::SSLCLSNode* SSLSLCGetAllNodesRsp::add_nodes() {
  ::SSLCLSNode* _add = _internal_add_nodes();
  // @@protoc_insertion_point(field_add:SSLSLCGetAllNodesRsp.nodes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SSLCLSNode >&
SSLSLCGetAllNodesRsp::nodes() const {
  // @@protoc_insertion_point(field_list:SSLSLCGetAllNodesRsp.nodes)
  return nodes_;
}

// -------------------------------------------------------------------

// SSLCLSGetLeastLoadNodeReq

// .NODETYPE node_type = 1;
inline void SSLCLSGetLeastLoadNodeReq::clear_node_type() {
  node_type_ = 0;
}
inline ::NODETYPE SSLCLSGetLeastLoadNodeReq::_internal_node_type() const {
  return static_cast< ::NODETYPE >(node_type_);
}
inline ::NODETYPE SSLCLSGetLeastLoadNodeReq::node_type() const {
  // @@protoc_insertion_point(field_get:SSLCLSGetLeastLoadNodeReq.node_type)
  return _internal_node_type();
}
inline void SSLCLSGetLeastLoadNodeReq::_internal_set_node_type(::NODETYPE value) {
  
  node_type_ = value;
}
inline void SSLCLSGetLeastLoadNodeReq::set_node_type(::NODETYPE value) {
  _internal_set_node_type(value);
  // @@protoc_insertion_point(field_set:SSLCLSGetLeastLoadNodeReq.node_type)
}

// -------------------------------------------------------------------

// SSLSLCGetLeastLoadNodeRsp

// .SSLCLSNode node = 1;
inline bool SSLSLCGetLeastLoadNodeRsp::_internal_has_node() const {
  return this != internal_default_instance() && node_ != nullptr;
}
inline bool SSLSLCGetLeastLoadNodeRsp::has_node() const {
  return _internal_has_node();
}
inline void SSLSLCGetLeastLoadNodeRsp::clear_node() {
  if (GetArenaForAllocation() == nullptr && node_ != nullptr) {
    delete node_;
  }
  node_ = nullptr;
}
inline const ::SSLCLSNode& SSLSLCGetLeastLoadNodeRsp::_internal_node() const {
  const ::SSLCLSNode* p = node_;
  return p != nullptr ? *p : reinterpret_cast<const ::SSLCLSNode&>(
      ::_SSLCLSNode_default_instance_);
}
inline const ::SSLCLSNode& SSLSLCGetLeastLoadNodeRsp::node() const {
  // @@protoc_insertion_point(field_get:SSLSLCGetLeastLoadNodeRsp.node)
  return _internal_node();
}
inline void SSLSLCGetLeastLoadNodeRsp::unsafe_arena_set_allocated_node(
    ::SSLCLSNode* node) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(node_);
  }
  node_ = node;
  if (node) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SSLSLCGetLeastLoadNodeRsp.node)
}
inline ::SSLCLSNode* SSLSLCGetLeastLoadNodeRsp::release_node() {
  
  ::SSLCLSNode* temp = node_;
  node_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SSLCLSNode* SSLSLCGetLeastLoadNodeRsp::unsafe_arena_release_node() {
  // @@protoc_insertion_point(field_release:SSLSLCGetLeastLoadNodeRsp.node)
  
  ::SSLCLSNode* temp = node_;
  node_ = nullptr;
  return temp;
}
inline ::SSLCLSNode* SSLSLCGetLeastLoadNodeRsp::_internal_mutable_node() {
  
  if (node_ == nullptr) {
    auto* p = CreateMaybeMessage<::SSLCLSNode>(GetArenaForAllocation());
    node_ = p;
  }
  return node_;
}
inline ::SSLCLSNode* SSLSLCGetLeastLoadNodeRsp::mutable_node() {
  ::SSLCLSNode* _msg = _internal_mutable_node();
  // @@protoc_insertion_point(field_mutable:SSLSLCGetLeastLoadNodeRsp.node)
  return _msg;
}
inline void SSLSLCGetLeastLoadNodeRsp::set_allocated_node(::SSLCLSNode* node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete node_;
  }
  if (node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::SSLCLSNode>::GetOwningArena(node);
    if (message_arena != submessage_arena) {
      node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, node, submessage_arena);
    }
    
  } else {
    
  }
  node_ = node;
  // @@protoc_insertion_point(field_set_allocated:SSLSLCGetLeastLoadNodeRsp.node)
}

// -------------------------------------------------------------------

// SSLCLSPkgBody

// .SSLCLSNodeRegister node_register = 1;
inline bool SSLCLSPkgBody::_internal_has_node_register() const {
  return body_case() == kNodeRegister;
}
inline bool SSLCLSPkgBody::has_node_register() const {
  return _internal_has_node_register();
}
inline void SSLCLSPkgBody::set_has_node_register() {
  _oneof_case_[0] = kNodeRegister;
}
inline void SSLCLSPkgBody::clear_node_register() {
  if (_internal_has_node_register()) {
    if (GetArenaForAllocation() == nullptr) {
      delete body_.node_register_;
    }
    clear_has_body();
  }
}
inline ::SSLCLSNodeRegister* SSLCLSPkgBody::release_node_register() {
  // @@protoc_insertion_point(field_release:SSLCLSPkgBody.node_register)
  if (_internal_has_node_register()) {
    clear_has_body();
      ::SSLCLSNodeRegister* temp = body_.node_register_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    body_.node_register_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::SSLCLSNodeRegister& SSLCLSPkgBody::_internal_node_register() const {
  return _internal_has_node_register()
      ? *body_.node_register_
      : reinterpret_cast< ::SSLCLSNodeRegister&>(::_SSLCLSNodeRegister_default_instance_);
}
inline const ::SSLCLSNodeRegister& SSLCLSPkgBody::node_register() const {
  // @@protoc_insertion_point(field_get:SSLCLSPkgBody.node_register)
  return _internal_node_register();
}
inline ::SSLCLSNodeRegister* SSLCLSPkgBody::unsafe_arena_release_node_register() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SSLCLSPkgBody.node_register)
  if (_internal_has_node_register()) {
    clear_has_body();
    ::SSLCLSNodeRegister* temp = body_.node_register_;
    body_.node_register_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SSLCLSPkgBody::unsafe_arena_set_allocated_node_register(::SSLCLSNodeRegister* node_register) {
  clear_body();
  if (node_register) {
    set_has_node_register();
    body_.node_register_ = node_register;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SSLCLSPkgBody.node_register)
}
inline ::SSLCLSNodeRegister* SSLCLSPkgBody::_internal_mutable_node_register() {
  if (!_internal_has_node_register()) {
    clear_body();
    set_has_node_register();
    body_.node_register_ = CreateMaybeMessage< ::SSLCLSNodeRegister >(GetArenaForAllocation());
  }
  return body_.node_register_;
}
inline ::SSLCLSNodeRegister* SSLCLSPkgBody::mutable_node_register() {
  ::SSLCLSNodeRegister* _msg = _internal_mutable_node_register();
  // @@protoc_insertion_point(field_mutable:SSLCLSPkgBody.node_register)
  return _msg;
}

// .SSLCLSNodeUnregister node_unregister = 2;
inline bool SSLCLSPkgBody::_internal_has_node_unregister() const {
  return body_case() == kNodeUnregister;
}
inline bool SSLCLSPkgBody::has_node_unregister() const {
  return _internal_has_node_unregister();
}
inline void SSLCLSPkgBody::set_has_node_unregister() {
  _oneof_case_[0] = kNodeUnregister;
}
inline void SSLCLSPkgBody::clear_node_unregister() {
  if (_internal_has_node_unregister()) {
    if (GetArenaForAllocation() == nullptr) {
      delete body_.node_unregister_;
    }
    clear_has_body();
  }
}
inline ::SSLCLSNodeUnregister* SSLCLSPkgBody::release_node_unregister() {
  // @@protoc_insertion_point(field_release:SSLCLSPkgBody.node_unregister)
  if (_internal_has_node_unregister()) {
    clear_has_body();
      ::SSLCLSNodeUnregister* temp = body_.node_unregister_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    body_.node_unregister_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::SSLCLSNodeUnregister& SSLCLSPkgBody::_internal_node_unregister() const {
  return _internal_has_node_unregister()
      ? *body_.node_unregister_
      : reinterpret_cast< ::SSLCLSNodeUnregister&>(::_SSLCLSNodeUnregister_default_instance_);
}
inline const ::SSLCLSNodeUnregister& SSLCLSPkgBody::node_unregister() const {
  // @@protoc_insertion_point(field_get:SSLCLSPkgBody.node_unregister)
  return _internal_node_unregister();
}
inline ::SSLCLSNodeUnregister* SSLCLSPkgBody::unsafe_arena_release_node_unregister() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SSLCLSPkgBody.node_unregister)
  if (_internal_has_node_unregister()) {
    clear_has_body();
    ::SSLCLSNodeUnregister* temp = body_.node_unregister_;
    body_.node_unregister_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SSLCLSPkgBody::unsafe_arena_set_allocated_node_unregister(::SSLCLSNodeUnregister* node_unregister) {
  clear_body();
  if (node_unregister) {
    set_has_node_unregister();
    body_.node_unregister_ = node_unregister;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SSLCLSPkgBody.node_unregister)
}
inline ::SSLCLSNodeUnregister* SSLCLSPkgBody::_internal_mutable_node_unregister() {
  if (!_internal_has_node_unregister()) {
    clear_body();
    set_has_node_unregister();
    body_.node_unregister_ = CreateMaybeMessage< ::SSLCLSNodeUnregister >(GetArenaForAllocation());
  }
  return body_.node_unregister_;
}
inline ::SSLCLSNodeUnregister* SSLCLSPkgBody::mutable_node_unregister() {
  ::SSLCLSNodeUnregister* _msg = _internal_mutable_node_unregister();
  // @@protoc_insertion_point(field_mutable:SSLCLSPkgBody.node_unregister)
  return _msg;
}

// .SSLCLSHeartBeatReq heart_beat_req = 3;
inline bool SSLCLSPkgBody::_internal_has_heart_beat_req() const {
  return body_case() == kHeartBeatReq;
}
inline bool SSLCLSPkgBody::has_heart_beat_req() const {
  return _internal_has_heart_beat_req();
}
inline void SSLCLSPkgBody::set_has_heart_beat_req() {
  _oneof_case_[0] = kHeartBeatReq;
}
inline void SSLCLSPkgBody::clear_heart_beat_req() {
  if (_internal_has_heart_beat_req()) {
    if (GetArenaForAllocation() == nullptr) {
      delete body_.heart_beat_req_;
    }
    clear_has_body();
  }
}
inline ::SSLCLSHeartBeatReq* SSLCLSPkgBody::release_heart_beat_req() {
  // @@protoc_insertion_point(field_release:SSLCLSPkgBody.heart_beat_req)
  if (_internal_has_heart_beat_req()) {
    clear_has_body();
      ::SSLCLSHeartBeatReq* temp = body_.heart_beat_req_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    body_.heart_beat_req_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::SSLCLSHeartBeatReq& SSLCLSPkgBody::_internal_heart_beat_req() const {
  return _internal_has_heart_beat_req()
      ? *body_.heart_beat_req_
      : reinterpret_cast< ::SSLCLSHeartBeatReq&>(::_SSLCLSHeartBeatReq_default_instance_);
}
inline const ::SSLCLSHeartBeatReq& SSLCLSPkgBody::heart_beat_req() const {
  // @@protoc_insertion_point(field_get:SSLCLSPkgBody.heart_beat_req)
  return _internal_heart_beat_req();
}
inline ::SSLCLSHeartBeatReq* SSLCLSPkgBody::unsafe_arena_release_heart_beat_req() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SSLCLSPkgBody.heart_beat_req)
  if (_internal_has_heart_beat_req()) {
    clear_has_body();
    ::SSLCLSHeartBeatReq* temp = body_.heart_beat_req_;
    body_.heart_beat_req_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SSLCLSPkgBody::unsafe_arena_set_allocated_heart_beat_req(::SSLCLSHeartBeatReq* heart_beat_req) {
  clear_body();
  if (heart_beat_req) {
    set_has_heart_beat_req();
    body_.heart_beat_req_ = heart_beat_req;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SSLCLSPkgBody.heart_beat_req)
}
inline ::SSLCLSHeartBeatReq* SSLCLSPkgBody::_internal_mutable_heart_beat_req() {
  if (!_internal_has_heart_beat_req()) {
    clear_body();
    set_has_heart_beat_req();
    body_.heart_beat_req_ = CreateMaybeMessage< ::SSLCLSHeartBeatReq >(GetArenaForAllocation());
  }
  return body_.heart_beat_req_;
}
inline ::SSLCLSHeartBeatReq* SSLCLSPkgBody::mutable_heart_beat_req() {
  ::SSLCLSHeartBeatReq* _msg = _internal_mutable_heart_beat_req();
  // @@protoc_insertion_point(field_mutable:SSLCLSPkgBody.heart_beat_req)
  return _msg;
}

// .SSLSLCHeartBeatRsp heart_beat_rsp = 4;
inline bool SSLCLSPkgBody::_internal_has_heart_beat_rsp() const {
  return body_case() == kHeartBeatRsp;
}
inline bool SSLCLSPkgBody::has_heart_beat_rsp() const {
  return _internal_has_heart_beat_rsp();
}
inline void SSLCLSPkgBody::set_has_heart_beat_rsp() {
  _oneof_case_[0] = kHeartBeatRsp;
}
inline void SSLCLSPkgBody::clear_heart_beat_rsp() {
  if (_internal_has_heart_beat_rsp()) {
    if (GetArenaForAllocation() == nullptr) {
      delete body_.heart_beat_rsp_;
    }
    clear_has_body();
  }
}
inline ::SSLSLCHeartBeatRsp* SSLCLSPkgBody::release_heart_beat_rsp() {
  // @@protoc_insertion_point(field_release:SSLCLSPkgBody.heart_beat_rsp)
  if (_internal_has_heart_beat_rsp()) {
    clear_has_body();
      ::SSLSLCHeartBeatRsp* temp = body_.heart_beat_rsp_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    body_.heart_beat_rsp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::SSLSLCHeartBeatRsp& SSLCLSPkgBody::_internal_heart_beat_rsp() const {
  return _internal_has_heart_beat_rsp()
      ? *body_.heart_beat_rsp_
      : reinterpret_cast< ::SSLSLCHeartBeatRsp&>(::_SSLSLCHeartBeatRsp_default_instance_);
}
inline const ::SSLSLCHeartBeatRsp& SSLCLSPkgBody::heart_beat_rsp() const {
  // @@protoc_insertion_point(field_get:SSLCLSPkgBody.heart_beat_rsp)
  return _internal_heart_beat_rsp();
}
inline ::SSLSLCHeartBeatRsp* SSLCLSPkgBody::unsafe_arena_release_heart_beat_rsp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SSLCLSPkgBody.heart_beat_rsp)
  if (_internal_has_heart_beat_rsp()) {
    clear_has_body();
    ::SSLSLCHeartBeatRsp* temp = body_.heart_beat_rsp_;
    body_.heart_beat_rsp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SSLCLSPkgBody::unsafe_arena_set_allocated_heart_beat_rsp(::SSLSLCHeartBeatRsp* heart_beat_rsp) {
  clear_body();
  if (heart_beat_rsp) {
    set_has_heart_beat_rsp();
    body_.heart_beat_rsp_ = heart_beat_rsp;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SSLCLSPkgBody.heart_beat_rsp)
}
inline ::SSLSLCHeartBeatRsp* SSLCLSPkgBody::_internal_mutable_heart_beat_rsp() {
  if (!_internal_has_heart_beat_rsp()) {
    clear_body();
    set_has_heart_beat_rsp();
    body_.heart_beat_rsp_ = CreateMaybeMessage< ::SSLSLCHeartBeatRsp >(GetArenaForAllocation());
  }
  return body_.heart_beat_rsp_;
}
inline ::SSLSLCHeartBeatRsp* SSLCLSPkgBody::mutable_heart_beat_rsp() {
  ::SSLSLCHeartBeatRsp* _msg = _internal_mutable_heart_beat_rsp();
  // @@protoc_insertion_point(field_mutable:SSLCLSPkgBody.heart_beat_rsp)
  return _msg;
}

// .SSLCLSSubscribe subscribe = 5;
inline bool SSLCLSPkgBody::_internal_has_subscribe() const {
  return body_case() == kSubscribe;
}
inline bool SSLCLSPkgBody::has_subscribe() const {
  return _internal_has_subscribe();
}
inline void SSLCLSPkgBody::set_has_subscribe() {
  _oneof_case_[0] = kSubscribe;
}
inline void SSLCLSPkgBody::clear_subscribe() {
  if (_internal_has_subscribe()) {
    if (GetArenaForAllocation() == nullptr) {
      delete body_.subscribe_;
    }
    clear_has_body();
  }
}
inline ::SSLCLSSubscribe* SSLCLSPkgBody::release_subscribe() {
  // @@protoc_insertion_point(field_release:SSLCLSPkgBody.subscribe)
  if (_internal_has_subscribe()) {
    clear_has_body();
      ::SSLCLSSubscribe* temp = body_.subscribe_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    body_.subscribe_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::SSLCLSSubscribe& SSLCLSPkgBody::_internal_subscribe() const {
  return _internal_has_subscribe()
      ? *body_.subscribe_
      : reinterpret_cast< ::SSLCLSSubscribe&>(::_SSLCLSSubscribe_default_instance_);
}
inline const ::SSLCLSSubscribe& SSLCLSPkgBody::subscribe() const {
  // @@protoc_insertion_point(field_get:SSLCLSPkgBody.subscribe)
  return _internal_subscribe();
}
inline ::SSLCLSSubscribe* SSLCLSPkgBody::unsafe_arena_release_subscribe() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SSLCLSPkgBody.subscribe)
  if (_internal_has_subscribe()) {
    clear_has_body();
    ::SSLCLSSubscribe* temp = body_.subscribe_;
    body_.subscribe_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SSLCLSPkgBody::unsafe_arena_set_allocated_subscribe(::SSLCLSSubscribe* subscribe) {
  clear_body();
  if (subscribe) {
    set_has_subscribe();
    body_.subscribe_ = subscribe;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SSLCLSPkgBody.subscribe)
}
inline ::SSLCLSSubscribe* SSLCLSPkgBody::_internal_mutable_subscribe() {
  if (!_internal_has_subscribe()) {
    clear_body();
    set_has_subscribe();
    body_.subscribe_ = CreateMaybeMessage< ::SSLCLSSubscribe >(GetArenaForAllocation());
  }
  return body_.subscribe_;
}
inline ::SSLCLSSubscribe* SSLCLSPkgBody::mutable_subscribe() {
  ::SSLCLSSubscribe* _msg = _internal_mutable_subscribe();
  // @@protoc_insertion_point(field_mutable:SSLCLSPkgBody.subscribe)
  return _msg;
}

// .SSLSLCPublish publish = 6;
inline bool SSLCLSPkgBody::_internal_has_publish() const {
  return body_case() == kPublish;
}
inline bool SSLCLSPkgBody::has_publish() const {
  return _internal_has_publish();
}
inline void SSLCLSPkgBody::set_has_publish() {
  _oneof_case_[0] = kPublish;
}
inline void SSLCLSPkgBody::clear_publish() {
  if (_internal_has_publish()) {
    if (GetArenaForAllocation() == nullptr) {
      delete body_.publish_;
    }
    clear_has_body();
  }
}
inline ::SSLSLCPublish* SSLCLSPkgBody::release_publish() {
  // @@protoc_insertion_point(field_release:SSLCLSPkgBody.publish)
  if (_internal_has_publish()) {
    clear_has_body();
      ::SSLSLCPublish* temp = body_.publish_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    body_.publish_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::SSLSLCPublish& SSLCLSPkgBody::_internal_publish() const {
  return _internal_has_publish()
      ? *body_.publish_
      : reinterpret_cast< ::SSLSLCPublish&>(::_SSLSLCPublish_default_instance_);
}
inline const ::SSLSLCPublish& SSLCLSPkgBody::publish() const {
  // @@protoc_insertion_point(field_get:SSLCLSPkgBody.publish)
  return _internal_publish();
}
inline ::SSLSLCPublish* SSLCLSPkgBody::unsafe_arena_release_publish() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SSLCLSPkgBody.publish)
  if (_internal_has_publish()) {
    clear_has_body();
    ::SSLSLCPublish* temp = body_.publish_;
    body_.publish_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SSLCLSPkgBody::unsafe_arena_set_allocated_publish(::SSLSLCPublish* publish) {
  clear_body();
  if (publish) {
    set_has_publish();
    body_.publish_ = publish;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SSLCLSPkgBody.publish)
}
inline ::SSLSLCPublish* SSLCLSPkgBody::_internal_mutable_publish() {
  if (!_internal_has_publish()) {
    clear_body();
    set_has_publish();
    body_.publish_ = CreateMaybeMessage< ::SSLSLCPublish >(GetArenaForAllocation());
  }
  return body_.publish_;
}
inline ::SSLSLCPublish* SSLCLSPkgBody::mutable_publish() {
  ::SSLSLCPublish* _msg = _internal_mutable_publish();
  // @@protoc_insertion_point(field_mutable:SSLCLSPkgBody.publish)
  return _msg;
}

// .SSLCLSGetAllNodesReq get_all_nodes_req = 7;
inline bool SSLCLSPkgBody::_internal_has_get_all_nodes_req() const {
  return body_case() == kGetAllNodesReq;
}
inline bool SSLCLSPkgBody::has_get_all_nodes_req() const {
  return _internal_has_get_all_nodes_req();
}
inline void SSLCLSPkgBody::set_has_get_all_nodes_req() {
  _oneof_case_[0] = kGetAllNodesReq;
}
inline void SSLCLSPkgBody::clear_get_all_nodes_req() {
  if (_internal_has_get_all_nodes_req()) {
    if (GetArenaForAllocation() == nullptr) {
      delete body_.get_all_nodes_req_;
    }
    clear_has_body();
  }
}
inline ::SSLCLSGetAllNodesReq* SSLCLSPkgBody::release_get_all_nodes_req() {
  // @@protoc_insertion_point(field_release:SSLCLSPkgBody.get_all_nodes_req)
  if (_internal_has_get_all_nodes_req()) {
    clear_has_body();
      ::SSLCLSGetAllNodesReq* temp = body_.get_all_nodes_req_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    body_.get_all_nodes_req_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::SSLCLSGetAllNodesReq& SSLCLSPkgBody::_internal_get_all_nodes_req() const {
  return _internal_has_get_all_nodes_req()
      ? *body_.get_all_nodes_req_
      : reinterpret_cast< ::SSLCLSGetAllNodesReq&>(::_SSLCLSGetAllNodesReq_default_instance_);
}
inline const ::SSLCLSGetAllNodesReq& SSLCLSPkgBody::get_all_nodes_req() const {
  // @@protoc_insertion_point(field_get:SSLCLSPkgBody.get_all_nodes_req)
  return _internal_get_all_nodes_req();
}
inline ::SSLCLSGetAllNodesReq* SSLCLSPkgBody::unsafe_arena_release_get_all_nodes_req() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SSLCLSPkgBody.get_all_nodes_req)
  if (_internal_has_get_all_nodes_req()) {
    clear_has_body();
    ::SSLCLSGetAllNodesReq* temp = body_.get_all_nodes_req_;
    body_.get_all_nodes_req_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SSLCLSPkgBody::unsafe_arena_set_allocated_get_all_nodes_req(::SSLCLSGetAllNodesReq* get_all_nodes_req) {
  clear_body();
  if (get_all_nodes_req) {
    set_has_get_all_nodes_req();
    body_.get_all_nodes_req_ = get_all_nodes_req;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SSLCLSPkgBody.get_all_nodes_req)
}
inline ::SSLCLSGetAllNodesReq* SSLCLSPkgBody::_internal_mutable_get_all_nodes_req() {
  if (!_internal_has_get_all_nodes_req()) {
    clear_body();
    set_has_get_all_nodes_req();
    body_.get_all_nodes_req_ = CreateMaybeMessage< ::SSLCLSGetAllNodesReq >(GetArenaForAllocation());
  }
  return body_.get_all_nodes_req_;
}
inline ::SSLCLSGetAllNodesReq* SSLCLSPkgBody::mutable_get_all_nodes_req() {
  ::SSLCLSGetAllNodesReq* _msg = _internal_mutable_get_all_nodes_req();
  // @@protoc_insertion_point(field_mutable:SSLCLSPkgBody.get_all_nodes_req)
  return _msg;
}

// .SSLSLCGetAllNodesRsp get_all_nodes_rsp = 8;
inline bool SSLCLSPkgBody::_internal_has_get_all_nodes_rsp() const {
  return body_case() == kGetAllNodesRsp;
}
inline bool SSLCLSPkgBody::has_get_all_nodes_rsp() const {
  return _internal_has_get_all_nodes_rsp();
}
inline void SSLCLSPkgBody::set_has_get_all_nodes_rsp() {
  _oneof_case_[0] = kGetAllNodesRsp;
}
inline void SSLCLSPkgBody::clear_get_all_nodes_rsp() {
  if (_internal_has_get_all_nodes_rsp()) {
    if (GetArenaForAllocation() == nullptr) {
      delete body_.get_all_nodes_rsp_;
    }
    clear_has_body();
  }
}
inline ::SSLSLCGetAllNodesRsp* SSLCLSPkgBody::release_get_all_nodes_rsp() {
  // @@protoc_insertion_point(field_release:SSLCLSPkgBody.get_all_nodes_rsp)
  if (_internal_has_get_all_nodes_rsp()) {
    clear_has_body();
      ::SSLSLCGetAllNodesRsp* temp = body_.get_all_nodes_rsp_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    body_.get_all_nodes_rsp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::SSLSLCGetAllNodesRsp& SSLCLSPkgBody::_internal_get_all_nodes_rsp() const {
  return _internal_has_get_all_nodes_rsp()
      ? *body_.get_all_nodes_rsp_
      : reinterpret_cast< ::SSLSLCGetAllNodesRsp&>(::_SSLSLCGetAllNodesRsp_default_instance_);
}
inline const ::SSLSLCGetAllNodesRsp& SSLCLSPkgBody::get_all_nodes_rsp() const {
  // @@protoc_insertion_point(field_get:SSLCLSPkgBody.get_all_nodes_rsp)
  return _internal_get_all_nodes_rsp();
}
inline ::SSLSLCGetAllNodesRsp* SSLCLSPkgBody::unsafe_arena_release_get_all_nodes_rsp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SSLCLSPkgBody.get_all_nodes_rsp)
  if (_internal_has_get_all_nodes_rsp()) {
    clear_has_body();
    ::SSLSLCGetAllNodesRsp* temp = body_.get_all_nodes_rsp_;
    body_.get_all_nodes_rsp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SSLCLSPkgBody::unsafe_arena_set_allocated_get_all_nodes_rsp(::SSLSLCGetAllNodesRsp* get_all_nodes_rsp) {
  clear_body();
  if (get_all_nodes_rsp) {
    set_has_get_all_nodes_rsp();
    body_.get_all_nodes_rsp_ = get_all_nodes_rsp;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SSLCLSPkgBody.get_all_nodes_rsp)
}
inline ::SSLSLCGetAllNodesRsp* SSLCLSPkgBody::_internal_mutable_get_all_nodes_rsp() {
  if (!_internal_has_get_all_nodes_rsp()) {
    clear_body();
    set_has_get_all_nodes_rsp();
    body_.get_all_nodes_rsp_ = CreateMaybeMessage< ::SSLSLCGetAllNodesRsp >(GetArenaForAllocation());
  }
  return body_.get_all_nodes_rsp_;
}
inline ::SSLSLCGetAllNodesRsp* SSLCLSPkgBody::mutable_get_all_nodes_rsp() {
  ::SSLSLCGetAllNodesRsp* _msg = _internal_mutable_get_all_nodes_rsp();
  // @@protoc_insertion_point(field_mutable:SSLCLSPkgBody.get_all_nodes_rsp)
  return _msg;
}

// .SSLCLSGetLeastLoadNodeReq get_least_load_node_req = 9;
inline bool SSLCLSPkgBody::_internal_has_get_least_load_node_req() const {
  return body_case() == kGetLeastLoadNodeReq;
}
inline bool SSLCLSPkgBody::has_get_least_load_node_req() const {
  return _internal_has_get_least_load_node_req();
}
inline void SSLCLSPkgBody::set_has_get_least_load_node_req() {
  _oneof_case_[0] = kGetLeastLoadNodeReq;
}
inline void SSLCLSPkgBody::clear_get_least_load_node_req() {
  if (_internal_has_get_least_load_node_req()) {
    if (GetArenaForAllocation() == nullptr) {
      delete body_.get_least_load_node_req_;
    }
    clear_has_body();
  }
}
inline ::SSLCLSGetLeastLoadNodeReq* SSLCLSPkgBody::release_get_least_load_node_req() {
  // @@protoc_insertion_point(field_release:SSLCLSPkgBody.get_least_load_node_req)
  if (_internal_has_get_least_load_node_req()) {
    clear_has_body();
      ::SSLCLSGetLeastLoadNodeReq* temp = body_.get_least_load_node_req_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    body_.get_least_load_node_req_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::SSLCLSGetLeastLoadNodeReq& SSLCLSPkgBody::_internal_get_least_load_node_req() const {
  return _internal_has_get_least_load_node_req()
      ? *body_.get_least_load_node_req_
      : reinterpret_cast< ::SSLCLSGetLeastLoadNodeReq&>(::_SSLCLSGetLeastLoadNodeReq_default_instance_);
}
inline const ::SSLCLSGetLeastLoadNodeReq& SSLCLSPkgBody::get_least_load_node_req() const {
  // @@protoc_insertion_point(field_get:SSLCLSPkgBody.get_least_load_node_req)
  return _internal_get_least_load_node_req();
}
inline ::SSLCLSGetLeastLoadNodeReq* SSLCLSPkgBody::unsafe_arena_release_get_least_load_node_req() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SSLCLSPkgBody.get_least_load_node_req)
  if (_internal_has_get_least_load_node_req()) {
    clear_has_body();
    ::SSLCLSGetLeastLoadNodeReq* temp = body_.get_least_load_node_req_;
    body_.get_least_load_node_req_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SSLCLSPkgBody::unsafe_arena_set_allocated_get_least_load_node_req(::SSLCLSGetLeastLoadNodeReq* get_least_load_node_req) {
  clear_body();
  if (get_least_load_node_req) {
    set_has_get_least_load_node_req();
    body_.get_least_load_node_req_ = get_least_load_node_req;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SSLCLSPkgBody.get_least_load_node_req)
}
inline ::SSLCLSGetLeastLoadNodeReq* SSLCLSPkgBody::_internal_mutable_get_least_load_node_req() {
  if (!_internal_has_get_least_load_node_req()) {
    clear_body();
    set_has_get_least_load_node_req();
    body_.get_least_load_node_req_ = CreateMaybeMessage< ::SSLCLSGetLeastLoadNodeReq >(GetArenaForAllocation());
  }
  return body_.get_least_load_node_req_;
}
inline ::SSLCLSGetLeastLoadNodeReq* SSLCLSPkgBody::mutable_get_least_load_node_req() {
  ::SSLCLSGetLeastLoadNodeReq* _msg = _internal_mutable_get_least_load_node_req();
  // @@protoc_insertion_point(field_mutable:SSLCLSPkgBody.get_least_load_node_req)
  return _msg;
}

// .SSLSLCGetLeastLoadNodeRsp get_least_load_node_rsp = 10;
inline bool SSLCLSPkgBody::_internal_has_get_least_load_node_rsp() const {
  return body_case() == kGetLeastLoadNodeRsp;
}
inline bool SSLCLSPkgBody::has_get_least_load_node_rsp() const {
  return _internal_has_get_least_load_node_rsp();
}
inline void SSLCLSPkgBody::set_has_get_least_load_node_rsp() {
  _oneof_case_[0] = kGetLeastLoadNodeRsp;
}
inline void SSLCLSPkgBody::clear_get_least_load_node_rsp() {
  if (_internal_has_get_least_load_node_rsp()) {
    if (GetArenaForAllocation() == nullptr) {
      delete body_.get_least_load_node_rsp_;
    }
    clear_has_body();
  }
}
inline ::SSLSLCGetLeastLoadNodeRsp* SSLCLSPkgBody::release_get_least_load_node_rsp() {
  // @@protoc_insertion_point(field_release:SSLCLSPkgBody.get_least_load_node_rsp)
  if (_internal_has_get_least_load_node_rsp()) {
    clear_has_body();
      ::SSLSLCGetLeastLoadNodeRsp* temp = body_.get_least_load_node_rsp_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    body_.get_least_load_node_rsp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::SSLSLCGetLeastLoadNodeRsp& SSLCLSPkgBody::_internal_get_least_load_node_rsp() const {
  return _internal_has_get_least_load_node_rsp()
      ? *body_.get_least_load_node_rsp_
      : reinterpret_cast< ::SSLSLCGetLeastLoadNodeRsp&>(::_SSLSLCGetLeastLoadNodeRsp_default_instance_);
}
inline const ::SSLSLCGetLeastLoadNodeRsp& SSLCLSPkgBody::get_least_load_node_rsp() const {
  // @@protoc_insertion_point(field_get:SSLCLSPkgBody.get_least_load_node_rsp)
  return _internal_get_least_load_node_rsp();
}
inline ::SSLSLCGetLeastLoadNodeRsp* SSLCLSPkgBody::unsafe_arena_release_get_least_load_node_rsp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SSLCLSPkgBody.get_least_load_node_rsp)
  if (_internal_has_get_least_load_node_rsp()) {
    clear_has_body();
    ::SSLSLCGetLeastLoadNodeRsp* temp = body_.get_least_load_node_rsp_;
    body_.get_least_load_node_rsp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SSLCLSPkgBody::unsafe_arena_set_allocated_get_least_load_node_rsp(::SSLSLCGetLeastLoadNodeRsp* get_least_load_node_rsp) {
  clear_body();
  if (get_least_load_node_rsp) {
    set_has_get_least_load_node_rsp();
    body_.get_least_load_node_rsp_ = get_least_load_node_rsp;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SSLCLSPkgBody.get_least_load_node_rsp)
}
inline ::SSLSLCGetLeastLoadNodeRsp* SSLCLSPkgBody::_internal_mutable_get_least_load_node_rsp() {
  if (!_internal_has_get_least_load_node_rsp()) {
    clear_body();
    set_has_get_least_load_node_rsp();
    body_.get_least_load_node_rsp_ = CreateMaybeMessage< ::SSLSLCGetLeastLoadNodeRsp >(GetArenaForAllocation());
  }
  return body_.get_least_load_node_rsp_;
}
inline ::SSLSLCGetLeastLoadNodeRsp* SSLCLSPkgBody::mutable_get_least_load_node_rsp() {
  ::SSLSLCGetLeastLoadNodeRsp* _msg = _internal_mutable_get_least_load_node_rsp();
  // @@protoc_insertion_point(field_mutable:SSLCLSPkgBody.get_least_load_node_rsp)
  return _msg;
}

inline bool SSLCLSPkgBody::has_body() const {
  return body_case() != BODY_NOT_SET;
}
inline void SSLCLSPkgBody::clear_has_body() {
  _oneof_case_[0] = BODY_NOT_SET;
}
inline SSLCLSPkgBody::BodyCase SSLCLSPkgBody::body_case() const {
  return SSLCLSPkgBody::BodyCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::SSLSLCPublish_PUBLISHTYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SSLSLCPublish_PUBLISHTYPE>() {
  return ::SSLSLCPublish_PUBLISHTYPE_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sslcls_2eproto
