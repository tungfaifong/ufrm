// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ssid.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ssid_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ssid_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ssid_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ssid_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ssid_2eproto;
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

enum SSID : int {
  SSID_LC_LS_NODE_REGISTER = 0,
  SSID_LC_LS_NODE_UNREGISTER = 1,
  SSID_LC_LS_HEART_BEAT_REQ = 2,
  SSID_LS_LC_HEART_BEAT_RSP = 3,
  SSID_LC_LS_SUBSCRIBE = 4,
  SSID_LS_LC_PUBLISH = 5,
  SSID_LC_LS_GET_ALL_NODES_REQ = 6,
  SSID_LS_LC_GET_ALL_NODES_RSP = 7,
  SSID_LC_LS_GET_LEAST_LOAD_NODE_REQ = 8,
  SSID_LS_LC_GET_LEAST_LOAD_NODE_RSP = 9,
  SSID_GW_GS_INIT = 10000,
  SSID_GW_GS_HEART_BEAT_REQ = 10001,
  SSID_GS_GW_HEART_BEAT_RSP = 10002,
  SSID_GW_GS_FORWAR_CS_PKG = 10003,
  SSID_GS_GW_FORWAR_SC_PKG = 10004,
  SSID_PC_PX_NODE_REGISTER = 20000,
  SSID_PC_PX_NODE_UNREGISTER = 20001,
  SSID_PC_PX_HEART_BEAT_REQ = 20002,
  SSID_PX_PC_HEART_BEAT_RSP = 20003,
  SSID_DC_DS_SELECT_REQ = 30000,
  SSID_DS_DC_SELECT_RSP = 30001,
  SSID_DC_DS_INSERT_REQ = 30002,
  SSID_DS_DC_INSERT_RSP = 30003,
  SSID_DC_DS_UPDATE_REQ = 30004,
  SSID_DS_DC_UPDATE_RSP = 30005,
  SSID_DC_DS_DELETE_REQ = 30006,
  SSID_DS_DC_DELETE_RSP = 30007,
  SSID_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SSID_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SSID_IsValid(int value);
constexpr SSID SSID_MIN = SSID_LC_LS_NODE_REGISTER;
constexpr SSID SSID_MAX = SSID_DS_DC_DELETE_RSP;
constexpr int SSID_ARRAYSIZE = SSID_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SSID_descriptor();
template<typename T>
inline const std::string& SSID_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SSID>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SSID_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SSID_descriptor(), enum_t_value);
}
inline bool SSID_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SSID* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SSID>(
    SSID_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::SSID> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SSID>() {
  return ::SSID_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ssid_2eproto
