// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ss.proto

#include "ss.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr SSPkgHead::SSPkgHead(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : from_node_type_(0)

  , from_node_id_(0u)
  , to_node_type_(0)

  , to_node_id_(0u)
  , id_(0)

  , msg_type_(0)

  , rpc_id_(uint64_t{0u})
  , proxy_type_(0)

  , logic_type_(0)
{}
struct SSPkgHeadDefaultTypeInternal {
  constexpr SSPkgHeadDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SSPkgHeadDefaultTypeInternal() {}
  union {
    SSPkgHead _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SSPkgHeadDefaultTypeInternal _SSPkgHead_default_instance_;
constexpr SSPkgBody::SSPkgBody(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct SSPkgBodyDefaultTypeInternal {
  constexpr SSPkgBodyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SSPkgBodyDefaultTypeInternal() {}
  union {
    SSPkgBody _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SSPkgBodyDefaultTypeInternal _SSPkgBody_default_instance_;
constexpr SSPkg::SSPkg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : head_(nullptr)
  , body_(nullptr){}
struct SSPkgDefaultTypeInternal {
  constexpr SSPkgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SSPkgDefaultTypeInternal() {}
  union {
    SSPkg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SSPkgDefaultTypeInternal _SSPkg_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ss_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_ss_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ss_2eproto = nullptr;

const uint32_t TableStruct_ss_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SSPkgHead, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SSPkgHead, from_node_type_),
  PROTOBUF_FIELD_OFFSET(::SSPkgHead, from_node_id_),
  PROTOBUF_FIELD_OFFSET(::SSPkgHead, to_node_type_),
  PROTOBUF_FIELD_OFFSET(::SSPkgHead, to_node_id_),
  PROTOBUF_FIELD_OFFSET(::SSPkgHead, id_),
  PROTOBUF_FIELD_OFFSET(::SSPkgHead, msg_type_),
  PROTOBUF_FIELD_OFFSET(::SSPkgHead, rpc_id_),
  PROTOBUF_FIELD_OFFSET(::SSPkgHead, proxy_type_),
  PROTOBUF_FIELD_OFFSET(::SSPkgHead, logic_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SSPkgBody, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::SSPkgBody, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::SSPkgBody, body_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SSPkg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SSPkg, head_),
  PROTOBUF_FIELD_OFFSET(::SSPkg, body_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::SSPkgHead)},
  { 15, -1, -1, sizeof(::SSPkgBody)},
  { 26, -1, -1, sizeof(::SSPkg)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SSPkgHead_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SSPkgBody_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SSPkg_default_instance_),
};

const char descriptor_table_protodef_ss_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\010ss.proto\032\014common.proto\032\nssid.proto\032\014ss"
  "lcls.proto\032\014ssgwgs.proto\032\014sspcpx.proto\032\014"
  "ssdcds.proto\"\240\003\n\tSSPkgHead\022!\n\016from_node_"
  "type\030\001 \001(\0162\t.NODETYPE\022\024\n\014from_node_id\030\002 "
  "\001(\r\022\037\n\014to_node_type\030\003 \001(\0162\t.NODETYPE\022\022\n\n"
  "to_node_id\030\004 \001(\r\022\021\n\002id\030\005 \001(\0162\005.SSID\022$\n\010m"
  "sg_type\030\006 \001(\0162\022.SSPkgHead.MSGTYPE\022\016\n\006rpc"
  "_id\030\007 \001(\004\022(\n\nproxy_type\030\010 \001(\0162\024.SSPkgHea"
  "d.PROXYTYPE\022(\n\nlogic_type\030\t \001(\0162\024.SSPkgH"
  "ead.LOGICTYPE\"-\n\007MSGTYPE\022\n\n\006NORMAL\020\000\022\n\n\006"
  "RPCREQ\020\001\022\n\n\006RPCRSP\020\002\"0\n\tPROXYTYPE\022\007\n\003END"
  "\020\000\022\013\n\007FORWARD\020\001\022\r\n\tBROADCAST\020\002\"\'\n\tLOGICT"
  "YPE\022\010\n\004BOTH\020\000\022\007\n\003CPP\020\001\022\007\n\003LUA\020\002\"\247\001\n\tSSPk"
  "gBody\022#\n\tlcls_body\030\001 \001(\0132\016.SSLCLSPkgBody"
  "H\000\022#\n\tgwgs_body\030\002 \001(\0132\016.SSGWGSPkgBodyH\000\022"
  "#\n\tpcpx_body\030\003 \001(\0132\016.SSPCPXPkgBodyH\000\022#\n\t"
  "dcds_body\030\004 \001(\0132\016.SSDCDSPkgBodyH\000B\006\n\004bod"
  "y\";\n\005SSPkg\022\030\n\004head\030\001 \001(\0132\n.SSPkgHead\022\030\n\004"
  "body\030\002 \001(\0132\n.SSPkgBodyb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ss_2eproto_deps[6] = {
  &::descriptor_table_common_2eproto,
  &::descriptor_table_ssdcds_2eproto,
  &::descriptor_table_ssgwgs_2eproto,
  &::descriptor_table_ssid_2eproto,
  &::descriptor_table_sslcls_2eproto,
  &::descriptor_table_sspcpx_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ss_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ss_2eproto = {
  false, false, 750, descriptor_table_protodef_ss_2eproto, "ss.proto", 
  &descriptor_table_ss_2eproto_once, descriptor_table_ss_2eproto_deps, 6, 3,
  schemas, file_default_instances, TableStruct_ss_2eproto::offsets,
  file_level_metadata_ss_2eproto, file_level_enum_descriptors_ss_2eproto, file_level_service_descriptors_ss_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_ss_2eproto_getter() {
  return &descriptor_table_ss_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_ss_2eproto(&descriptor_table_ss_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SSPkgHead_MSGTYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ss_2eproto);
  return file_level_enum_descriptors_ss_2eproto[0];
}
bool SSPkgHead_MSGTYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SSPkgHead_MSGTYPE SSPkgHead::NORMAL;
constexpr SSPkgHead_MSGTYPE SSPkgHead::RPCREQ;
constexpr SSPkgHead_MSGTYPE SSPkgHead::RPCRSP;
constexpr SSPkgHead_MSGTYPE SSPkgHead::MSGTYPE_MIN;
constexpr SSPkgHead_MSGTYPE SSPkgHead::MSGTYPE_MAX;
constexpr int SSPkgHead::MSGTYPE_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SSPkgHead_PROXYTYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ss_2eproto);
  return file_level_enum_descriptors_ss_2eproto[1];
}
bool SSPkgHead_PROXYTYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SSPkgHead_PROXYTYPE SSPkgHead::END;
constexpr SSPkgHead_PROXYTYPE SSPkgHead::FORWARD;
constexpr SSPkgHead_PROXYTYPE SSPkgHead::BROADCAST;
constexpr SSPkgHead_PROXYTYPE SSPkgHead::PROXYTYPE_MIN;
constexpr SSPkgHead_PROXYTYPE SSPkgHead::PROXYTYPE_MAX;
constexpr int SSPkgHead::PROXYTYPE_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SSPkgHead_LOGICTYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ss_2eproto);
  return file_level_enum_descriptors_ss_2eproto[2];
}
bool SSPkgHead_LOGICTYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SSPkgHead_LOGICTYPE SSPkgHead::BOTH;
constexpr SSPkgHead_LOGICTYPE SSPkgHead::CPP;
constexpr SSPkgHead_LOGICTYPE SSPkgHead::LUA;
constexpr SSPkgHead_LOGICTYPE SSPkgHead::LOGICTYPE_MIN;
constexpr SSPkgHead_LOGICTYPE SSPkgHead::LOGICTYPE_MAX;
constexpr int SSPkgHead::LOGICTYPE_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class SSPkgHead::_Internal {
 public:
};

SSPkgHead::SSPkgHead(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:SSPkgHead)
}
SSPkgHead::SSPkgHead(const SSPkgHead& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&from_node_type_, &from.from_node_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&logic_type_) -
    reinterpret_cast<char*>(&from_node_type_)) + sizeof(logic_type_));
  // @@protoc_insertion_point(copy_constructor:SSPkgHead)
}

inline void SSPkgHead::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&from_node_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&logic_type_) -
    reinterpret_cast<char*>(&from_node_type_)) + sizeof(logic_type_));
}

SSPkgHead::~SSPkgHead() {
  // @@protoc_insertion_point(destructor:SSPkgHead)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SSPkgHead::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SSPkgHead::ArenaDtor(void* object) {
  SSPkgHead* _this = reinterpret_cast< SSPkgHead* >(object);
  (void)_this;
}
void SSPkgHead::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SSPkgHead::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SSPkgHead::Clear() {
// @@protoc_insertion_point(message_clear_start:SSPkgHead)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&from_node_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&logic_type_) -
      reinterpret_cast<char*>(&from_node_type_)) + sizeof(logic_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SSPkgHead::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .NODETYPE from_node_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_from_node_type(static_cast<::NODETYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 from_node_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          from_node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .NODETYPE to_node_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_to_node_type(static_cast<::NODETYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 to_node_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          to_node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SSID id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_id(static_cast<::SSID>(val));
        } else
          goto handle_unusual;
        continue;
      // .SSPkgHead.MSGTYPE msg_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_msg_type(static_cast<::SSPkgHead_MSGTYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // uint64 rpc_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          rpc_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SSPkgHead.PROXYTYPE proxy_type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_proxy_type(static_cast<::SSPkgHead_PROXYTYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // .SSPkgHead.LOGICTYPE logic_type = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_logic_type(static_cast<::SSPkgHead_LOGICTYPE>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SSPkgHead::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSPkgHead)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .NODETYPE from_node_type = 1;
  if (this->_internal_from_node_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_from_node_type(), target);
  }

  // uint32 from_node_id = 2;
  if (this->_internal_from_node_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_from_node_id(), target);
  }

  // .NODETYPE to_node_type = 3;
  if (this->_internal_to_node_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_to_node_type(), target);
  }

  // uint32 to_node_id = 4;
  if (this->_internal_to_node_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_to_node_id(), target);
  }

  // .SSID id = 5;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_id(), target);
  }

  // .SSPkgHead.MSGTYPE msg_type = 6;
  if (this->_internal_msg_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_msg_type(), target);
  }

  // uint64 rpc_id = 7;
  if (this->_internal_rpc_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_rpc_id(), target);
  }

  // .SSPkgHead.PROXYTYPE proxy_type = 8;
  if (this->_internal_proxy_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_proxy_type(), target);
  }

  // .SSPkgHead.LOGICTYPE logic_type = 9;
  if (this->_internal_logic_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_logic_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSPkgHead)
  return target;
}

size_t SSPkgHead::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SSPkgHead)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .NODETYPE from_node_type = 1;
  if (this->_internal_from_node_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_from_node_type());
  }

  // uint32 from_node_id = 2;
  if (this->_internal_from_node_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_from_node_id());
  }

  // .NODETYPE to_node_type = 3;
  if (this->_internal_to_node_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_to_node_type());
  }

  // uint32 to_node_id = 4;
  if (this->_internal_to_node_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_to_node_id());
  }

  // .SSID id = 5;
  if (this->_internal_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
  }

  // .SSPkgHead.MSGTYPE msg_type = 6;
  if (this->_internal_msg_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_msg_type());
  }

  // uint64 rpc_id = 7;
  if (this->_internal_rpc_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_rpc_id());
  }

  // .SSPkgHead.PROXYTYPE proxy_type = 8;
  if (this->_internal_proxy_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_proxy_type());
  }

  // .SSPkgHead.LOGICTYPE logic_type = 9;
  if (this->_internal_logic_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_logic_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SSPkgHead::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SSPkgHead::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SSPkgHead::GetClassData() const { return &_class_data_; }

void SSPkgHead::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SSPkgHead *>(to)->MergeFrom(
      static_cast<const SSPkgHead &>(from));
}


void SSPkgHead::MergeFrom(const SSPkgHead& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SSPkgHead)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_from_node_type() != 0) {
    _internal_set_from_node_type(from._internal_from_node_type());
  }
  if (from._internal_from_node_id() != 0) {
    _internal_set_from_node_id(from._internal_from_node_id());
  }
  if (from._internal_to_node_type() != 0) {
    _internal_set_to_node_type(from._internal_to_node_type());
  }
  if (from._internal_to_node_id() != 0) {
    _internal_set_to_node_id(from._internal_to_node_id());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_msg_type() != 0) {
    _internal_set_msg_type(from._internal_msg_type());
  }
  if (from._internal_rpc_id() != 0) {
    _internal_set_rpc_id(from._internal_rpc_id());
  }
  if (from._internal_proxy_type() != 0) {
    _internal_set_proxy_type(from._internal_proxy_type());
  }
  if (from._internal_logic_type() != 0) {
    _internal_set_logic_type(from._internal_logic_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SSPkgHead::CopyFrom(const SSPkgHead& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SSPkgHead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSPkgHead::IsInitialized() const {
  return true;
}

void SSPkgHead::InternalSwap(SSPkgHead* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SSPkgHead, logic_type_)
      + sizeof(SSPkgHead::logic_type_)
      - PROTOBUF_FIELD_OFFSET(SSPkgHead, from_node_type_)>(
          reinterpret_cast<char*>(&from_node_type_),
          reinterpret_cast<char*>(&other->from_node_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SSPkgHead::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ss_2eproto_getter, &descriptor_table_ss_2eproto_once,
      file_level_metadata_ss_2eproto[0]);
}

// ===================================================================

class SSPkgBody::_Internal {
 public:
  static const ::SSLCLSPkgBody& lcls_body(const SSPkgBody* msg);
  static const ::SSGWGSPkgBody& gwgs_body(const SSPkgBody* msg);
  static const ::SSPCPXPkgBody& pcpx_body(const SSPkgBody* msg);
  static const ::SSDCDSPkgBody& dcds_body(const SSPkgBody* msg);
};

const ::SSLCLSPkgBody&
SSPkgBody::_Internal::lcls_body(const SSPkgBody* msg) {
  return *msg->body_.lcls_body_;
}
const ::SSGWGSPkgBody&
SSPkgBody::_Internal::gwgs_body(const SSPkgBody* msg) {
  return *msg->body_.gwgs_body_;
}
const ::SSPCPXPkgBody&
SSPkgBody::_Internal::pcpx_body(const SSPkgBody* msg) {
  return *msg->body_.pcpx_body_;
}
const ::SSDCDSPkgBody&
SSPkgBody::_Internal::dcds_body(const SSPkgBody* msg) {
  return *msg->body_.dcds_body_;
}
void SSPkgBody::set_allocated_lcls_body(::SSLCLSPkgBody* lcls_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_body();
  if (lcls_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lcls_body));
    if (message_arena != submessage_arena) {
      lcls_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lcls_body, submessage_arena);
    }
    set_has_lcls_body();
    body_.lcls_body_ = lcls_body;
  }
  // @@protoc_insertion_point(field_set_allocated:SSPkgBody.lcls_body)
}
void SSPkgBody::clear_lcls_body() {
  if (_internal_has_lcls_body()) {
    if (GetArenaForAllocation() == nullptr) {
      delete body_.lcls_body_;
    }
    clear_has_body();
  }
}
void SSPkgBody::set_allocated_gwgs_body(::SSGWGSPkgBody* gwgs_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_body();
  if (gwgs_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gwgs_body));
    if (message_arena != submessage_arena) {
      gwgs_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gwgs_body, submessage_arena);
    }
    set_has_gwgs_body();
    body_.gwgs_body_ = gwgs_body;
  }
  // @@protoc_insertion_point(field_set_allocated:SSPkgBody.gwgs_body)
}
void SSPkgBody::clear_gwgs_body() {
  if (_internal_has_gwgs_body()) {
    if (GetArenaForAllocation() == nullptr) {
      delete body_.gwgs_body_;
    }
    clear_has_body();
  }
}
void SSPkgBody::set_allocated_pcpx_body(::SSPCPXPkgBody* pcpx_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_body();
  if (pcpx_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pcpx_body));
    if (message_arena != submessage_arena) {
      pcpx_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pcpx_body, submessage_arena);
    }
    set_has_pcpx_body();
    body_.pcpx_body_ = pcpx_body;
  }
  // @@protoc_insertion_point(field_set_allocated:SSPkgBody.pcpx_body)
}
void SSPkgBody::clear_pcpx_body() {
  if (_internal_has_pcpx_body()) {
    if (GetArenaForAllocation() == nullptr) {
      delete body_.pcpx_body_;
    }
    clear_has_body();
  }
}
void SSPkgBody::set_allocated_dcds_body(::SSDCDSPkgBody* dcds_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_body();
  if (dcds_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dcds_body));
    if (message_arena != submessage_arena) {
      dcds_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dcds_body, submessage_arena);
    }
    set_has_dcds_body();
    body_.dcds_body_ = dcds_body;
  }
  // @@protoc_insertion_point(field_set_allocated:SSPkgBody.dcds_body)
}
void SSPkgBody::clear_dcds_body() {
  if (_internal_has_dcds_body()) {
    if (GetArenaForAllocation() == nullptr) {
      delete body_.dcds_body_;
    }
    clear_has_body();
  }
}
SSPkgBody::SSPkgBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:SSPkgBody)
}
SSPkgBody::SSPkgBody(const SSPkgBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_body();
  switch (from.body_case()) {
    case kLclsBody: {
      _internal_mutable_lcls_body()->::SSLCLSPkgBody::MergeFrom(from._internal_lcls_body());
      break;
    }
    case kGwgsBody: {
      _internal_mutable_gwgs_body()->::SSGWGSPkgBody::MergeFrom(from._internal_gwgs_body());
      break;
    }
    case kPcpxBody: {
      _internal_mutable_pcpx_body()->::SSPCPXPkgBody::MergeFrom(from._internal_pcpx_body());
      break;
    }
    case kDcdsBody: {
      _internal_mutable_dcds_body()->::SSDCDSPkgBody::MergeFrom(from._internal_dcds_body());
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:SSPkgBody)
}

inline void SSPkgBody::SharedCtor() {
clear_has_body();
}

SSPkgBody::~SSPkgBody() {
  // @@protoc_insertion_point(destructor:SSPkgBody)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SSPkgBody::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_body()) {
    clear_body();
  }
}

void SSPkgBody::ArenaDtor(void* object) {
  SSPkgBody* _this = reinterpret_cast< SSPkgBody* >(object);
  (void)_this;
}
void SSPkgBody::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SSPkgBody::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SSPkgBody::clear_body() {
// @@protoc_insertion_point(one_of_clear_start:SSPkgBody)
  switch (body_case()) {
    case kLclsBody: {
      if (GetArenaForAllocation() == nullptr) {
        delete body_.lcls_body_;
      }
      break;
    }
    case kGwgsBody: {
      if (GetArenaForAllocation() == nullptr) {
        delete body_.gwgs_body_;
      }
      break;
    }
    case kPcpxBody: {
      if (GetArenaForAllocation() == nullptr) {
        delete body_.pcpx_body_;
      }
      break;
    }
    case kDcdsBody: {
      if (GetArenaForAllocation() == nullptr) {
        delete body_.dcds_body_;
      }
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = BODY_NOT_SET;
}


void SSPkgBody::Clear() {
// @@protoc_insertion_point(message_clear_start:SSPkgBody)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_body();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SSPkgBody::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .SSLCLSPkgBody lcls_body = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_lcls_body(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SSGWGSPkgBody gwgs_body = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_gwgs_body(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SSPCPXPkgBody pcpx_body = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pcpx_body(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SSDCDSPkgBody dcds_body = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_dcds_body(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SSPkgBody::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSPkgBody)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .SSLCLSPkgBody lcls_body = 1;
  if (_internal_has_lcls_body()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::lcls_body(this), target, stream);
  }

  // .SSGWGSPkgBody gwgs_body = 2;
  if (_internal_has_gwgs_body()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::gwgs_body(this), target, stream);
  }

  // .SSPCPXPkgBody pcpx_body = 3;
  if (_internal_has_pcpx_body()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::pcpx_body(this), target, stream);
  }

  // .SSDCDSPkgBody dcds_body = 4;
  if (_internal_has_dcds_body()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::dcds_body(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSPkgBody)
  return target;
}

size_t SSPkgBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SSPkgBody)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (body_case()) {
    // .SSLCLSPkgBody lcls_body = 1;
    case kLclsBody: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *body_.lcls_body_);
      break;
    }
    // .SSGWGSPkgBody gwgs_body = 2;
    case kGwgsBody: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *body_.gwgs_body_);
      break;
    }
    // .SSPCPXPkgBody pcpx_body = 3;
    case kPcpxBody: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *body_.pcpx_body_);
      break;
    }
    // .SSDCDSPkgBody dcds_body = 4;
    case kDcdsBody: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *body_.dcds_body_);
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SSPkgBody::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SSPkgBody::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SSPkgBody::GetClassData() const { return &_class_data_; }

void SSPkgBody::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SSPkgBody *>(to)->MergeFrom(
      static_cast<const SSPkgBody &>(from));
}


void SSPkgBody::MergeFrom(const SSPkgBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SSPkgBody)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.body_case()) {
    case kLclsBody: {
      _internal_mutable_lcls_body()->::SSLCLSPkgBody::MergeFrom(from._internal_lcls_body());
      break;
    }
    case kGwgsBody: {
      _internal_mutable_gwgs_body()->::SSGWGSPkgBody::MergeFrom(from._internal_gwgs_body());
      break;
    }
    case kPcpxBody: {
      _internal_mutable_pcpx_body()->::SSPCPXPkgBody::MergeFrom(from._internal_pcpx_body());
      break;
    }
    case kDcdsBody: {
      _internal_mutable_dcds_body()->::SSDCDSPkgBody::MergeFrom(from._internal_dcds_body());
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SSPkgBody::CopyFrom(const SSPkgBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SSPkgBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSPkgBody::IsInitialized() const {
  return true;
}

void SSPkgBody::InternalSwap(SSPkgBody* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(body_, other->body_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SSPkgBody::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ss_2eproto_getter, &descriptor_table_ss_2eproto_once,
      file_level_metadata_ss_2eproto[1]);
}

// ===================================================================

class SSPkg::_Internal {
 public:
  static const ::SSPkgHead& head(const SSPkg* msg);
  static const ::SSPkgBody& body(const SSPkg* msg);
};

const ::SSPkgHead&
SSPkg::_Internal::head(const SSPkg* msg) {
  return *msg->head_;
}
const ::SSPkgBody&
SSPkg::_Internal::body(const SSPkg* msg) {
  return *msg->body_;
}
SSPkg::SSPkg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:SSPkg)
}
SSPkg::SSPkg(const SSPkg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_head()) {
    head_ = new ::SSPkgHead(*from.head_);
  } else {
    head_ = nullptr;
  }
  if (from._internal_has_body()) {
    body_ = new ::SSPkgBody(*from.body_);
  } else {
    body_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:SSPkg)
}

inline void SSPkg::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&head_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&body_) -
    reinterpret_cast<char*>(&head_)) + sizeof(body_));
}

SSPkg::~SSPkg() {
  // @@protoc_insertion_point(destructor:SSPkg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SSPkg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete head_;
  if (this != internal_default_instance()) delete body_;
}

void SSPkg::ArenaDtor(void* object) {
  SSPkg* _this = reinterpret_cast< SSPkg* >(object);
  (void)_this;
}
void SSPkg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SSPkg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SSPkg::Clear() {
// @@protoc_insertion_point(message_clear_start:SSPkg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && head_ != nullptr) {
    delete head_;
  }
  head_ = nullptr;
  if (GetArenaForAllocation() == nullptr && body_ != nullptr) {
    delete body_;
  }
  body_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SSPkg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .SSPkgHead head = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_head(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SSPkgBody body = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_body(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SSPkg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSPkg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .SSPkgHead head = 1;
  if (this->_internal_has_head()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::head(this), target, stream);
  }

  // .SSPkgBody body = 2;
  if (this->_internal_has_body()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::body(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSPkg)
  return target;
}

size_t SSPkg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SSPkg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .SSPkgHead head = 1;
  if (this->_internal_has_head()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *head_);
  }

  // .SSPkgBody body = 2;
  if (this->_internal_has_body()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *body_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SSPkg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SSPkg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SSPkg::GetClassData() const { return &_class_data_; }

void SSPkg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SSPkg *>(to)->MergeFrom(
      static_cast<const SSPkg &>(from));
}


void SSPkg::MergeFrom(const SSPkg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SSPkg)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_head()) {
    _internal_mutable_head()->::SSPkgHead::MergeFrom(from._internal_head());
  }
  if (from._internal_has_body()) {
    _internal_mutable_body()->::SSPkgBody::MergeFrom(from._internal_body());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SSPkg::CopyFrom(const SSPkg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SSPkg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSPkg::IsInitialized() const {
  return true;
}

void SSPkg::InternalSwap(SSPkg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SSPkg, body_)
      + sizeof(SSPkg::body_)
      - PROTOBUF_FIELD_OFFSET(SSPkg, head_)>(
          reinterpret_cast<char*>(&head_),
          reinterpret_cast<char*>(&other->head_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SSPkg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ss_2eproto_getter, &descriptor_table_ss_2eproto_once,
      file_level_metadata_ss_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::SSPkgHead* Arena::CreateMaybeMessage< ::SSPkgHead >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SSPkgHead >(arena);
}
template<> PROTOBUF_NOINLINE ::SSPkgBody* Arena::CreateMaybeMessage< ::SSPkgBody >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SSPkgBody >(arena);
}
template<> PROTOBUF_NOINLINE ::SSPkg* Arena::CreateMaybeMessage< ::SSPkg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SSPkg >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
